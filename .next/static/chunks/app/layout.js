/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Faritra%2FWork%2FFreelance%2F3xBuilds%2Fclubhouse-clone-react%2Fapp%2Flayout.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!***********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Faritra%2FWork%2FFreelance%2F3xBuilds%2Fclubhouse-clone-react%2Fapp%2Flayout.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \***********************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/layout.tsx */ \"(app-pages-browser)/./app/layout.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZhcml0cmElMkZXb3JrJTJGRnJlZWxhbmNlJTJGM3hCdWlsZHMlMkZjbHViaG91c2UtY2xvbmUtcmVhY3QlMkZhcHAlMkZsYXlvdXQudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsMEpBQStHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/OWMzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9hcml0cmEvV29yay9GcmVlbGFuY2UvM3hCdWlsZHMvY2x1YmhvdXNlLWNsb25lLXJlYWN0L2FwcC9sYXlvdXQudHN4XCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Faritra%2FWork%2FFreelance%2F3xBuilds%2Fclubhouse-clone-react%2Fapp%2Flayout.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@100mslive/hms-video-store/dist/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@100mslive/hms-video-store/dist/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConnectivityState: function() { return /* binding */ Tn; },\n/* harmony export */   DeviceType: function() { return /* binding */ qs; },\n/* harmony export */   Diagnostics: function() { return /* binding */ Ut; },\n/* harmony export */   DomainCategory: function() { return /* binding */ Ls; },\n/* harmony export */   EventBus: function() { return /* binding */ Kt; },\n/* harmony export */   HLSPlaylistType: function() { return /* binding */ Gs; },\n/* harmony export */   HLSStreamType: function() { return /* binding */ Ws; },\n/* harmony export */   HMSAudioDeviceCategory: function() { return /* binding */ _r; },\n/* harmony export */   HMSAudioMode: function() { return /* binding */ xr; },\n/* harmony export */   HMSAudioPluginType: function() { return /* binding */ Cr; },\n/* harmony export */   HMSLogLevel: function() { return /* binding */ ks; },\n/* harmony export */   HMSMessageType: function() { return /* binding */ So; },\n/* harmony export */   HMSNotificationSeverity: function() { return /* binding */ fs; },\n/* harmony export */   HMSNotificationTypes: function() { return /* binding */ Pr; },\n/* harmony export */   HMSPeerType: function() { return /* binding */ Or; },\n/* harmony export */   HMSPlaylistType: function() { return /* binding */ vs; },\n/* harmony export */   HMSPluginUnsupportedTypes: function() { return /* binding */ Lr; },\n/* harmony export */   HMSReactiveStore: function() { return /* binding */ mt; },\n/* harmony export */   HMSRecordingState: function() { return /* binding */ Fs; },\n/* harmony export */   HMSRoomState: function() { return /* binding */ Er; },\n/* harmony export */   HMSStats: function() { return /* binding */ si; },\n/* harmony export */   HMSTrackExceptionTrackType: function() { return /* binding */ Ds; },\n/* harmony export */   HMSTranscriptionMode: function() { return /* binding */ Ks; },\n/* harmony export */   HMSTranscriptionState: function() { return /* binding */ $s; },\n/* harmony export */   HMSVideoPluginCanvasContextType: function() { return /* binding */ Fr; },\n/* harmony export */   HMSVideoPluginType: function() { return /* binding */ Vr; },\n/* harmony export */   createDefaultStatsStore: function() { return /* binding */ ni; },\n/* harmony export */   createDefaultStoreState: function() { return /* binding */ oi; },\n/* harmony export */   getAudioDeviceCategory: function() { return /* binding */ Nr; },\n/* harmony export */   parsedUserAgent: function() { return /* binding */ Te; },\n/* harmony export */   selectAppData: function() { return /* binding */ uS; },\n/* harmony export */   selectAppDataByPath: function() { return /* binding */ hS; },\n/* harmony export */   selectAudioPlaylist: function() { return /* binding */ Aa; },\n/* harmony export */   selectAudioPlaylistTrackByPeerID: function() { return /* binding */ IS; },\n/* harmony export */   selectAudioTrackByID: function() { return /* binding */ gS; },\n/* harmony export */   selectAudioTrackByPeerID: function() { return /* binding */ on; },\n/* harmony export */   selectAudioTrackVolume: function() { return /* binding */ _a; },\n/* harmony export */   selectAudioVolumeByPeerID: function() { return /* binding */ wS; },\n/* harmony export */   selectAuxiliaryAudioByPeerID: function() { return /* binding */ PS; },\n/* harmony export */   selectAuxiliaryTracksByPeerID: function() { return /* binding */ MS; },\n/* harmony export */   selectAvailableRoleNames: function() { return /* binding */ Um; },\n/* harmony export */   selectBroadcastMessages: function() { return /* binding */ cn; },\n/* harmony export */   selectBroadcastMessagesUnreadCount: function() { return /* binding */ OS; },\n/* harmony export */   selectCameraStreamByPeerID: function() { return /* binding */ vS; },\n/* harmony export */   selectConnectionQualities: function() { return /* binding */ Mm; },\n/* harmony export */   selectConnectionQualityByPeerID: function() { return /* binding */ ES; },\n/* harmony export */   selectDegradedTracks: function() { return /* binding */ Dm; },\n/* harmony export */   selectDevices: function() { return /* binding */ vm; },\n/* harmony export */   selectDidIJoinWithin: function() { return /* binding */ ug; },\n/* harmony export */   selectDominantSpeaker: function() { return /* binding */ bm; },\n/* harmony export */   selectEffectsKey: function() { return /* binding */ Qm; },\n/* harmony export */   selectErrors: function() { return /* binding */ Go; },\n/* harmony export */   selectFullAppData: function() { return /* binding */ zr; },\n/* harmony export */   selectHLSState: function() { return /* binding */ Gm; },\n/* harmony export */   selectHMSBroadcastMessages: function() { return /* binding */ Jo; },\n/* harmony export */   selectHMSMessages: function() { return /* binding */ Dt; },\n/* harmony export */   selectHMSMessagesCount: function() { return /* binding */ wm; },\n/* harmony export */   selectHMSStats: function() { return /* binding */ oc; },\n/* harmony export */   selectHandRaisedPeers: function() { return /* binding */ Zm; },\n/* harmony export */   selectHasPeerHandRaised: function() { return /* binding */ $S; },\n/* harmony export */   selectIsAllowedToPreviewMedia: function() { return /* binding */ tg; },\n/* harmony export */   selectIsAllowedToPublish: function() { return /* binding */ eg; },\n/* harmony export */   selectIsAllowedToSubscribe: function() { return /* binding */ Bm; },\n/* harmony export */   selectIsAudioLocallyMuted: function() { return /* binding */ wa; },\n/* harmony export */   selectIsConnectedToRoom: function() { return /* binding */ Be; },\n/* harmony export */   selectIsEffectsEnabled: function() { return /* binding */ jm; },\n/* harmony export */   selectIsInPreview: function() { return /* binding */ ma; },\n/* harmony export */   selectIsLargeRoom: function() { return /* binding */ qm; },\n/* harmony export */   selectIsLocalAudioEnabled: function() { return /* binding */ Am; },\n/* harmony export */   selectIsLocalAudioPluginPresent: function() { return /* binding */ cg; },\n/* harmony export */   selectIsLocalScreenShared: function() { return /* binding */ Xr; },\n/* harmony export */   selectIsLocalVideoDisplayEnabled: function() { return /* binding */ ha; },\n/* harmony export */   selectIsLocalVideoEnabled: function() { return /* binding */ Yr; },\n/* harmony export */   selectIsLocalVideoPluginPresent: function() { return /* binding */ ng; },\n/* harmony export */   selectIsLocallyMutedByPeerID: function() { return /* binding */ LS; },\n/* harmony export */   selectIsPeerAudioEnabled: function() { return /* binding */ HS; },\n/* harmony export */   selectIsPeerVideoEnabled: function() { return /* binding */ CS; },\n/* harmony export */   selectIsRoleAllowedToPublish: function() { return /* binding */ og; },\n/* harmony export */   selectIsScreenShareLocallyMutedByPeerID: function() { return /* binding */ DS; },\n/* harmony export */   selectIsSomeoneScreenSharing: function() { return /* binding */ Im; },\n/* harmony export */   selectIsTranscriptionAllowedByMode: function() { return /* binding */ jS; },\n/* harmony export */   selectIsTranscriptionEnabled: function() { return /* binding */ xm; },\n/* harmony export */   selectIsVBEnabled: function() { return /* binding */ Jm; },\n/* harmony export */   selectLocalAudioTrackID: function() { return /* binding */ le; },\n/* harmony export */   selectLocalMediaSettings: function() { return /* binding */ ua; },\n/* harmony export */   selectLocalPeer: function() { return /* binding */ re; },\n/* harmony export */   selectLocalPeerID: function() { return /* binding */ Ie; },\n/* harmony export */   selectLocalPeerName: function() { return /* binding */ km; },\n/* harmony export */   selectLocalPeerRole: function() { return /* binding */ ct; },\n/* harmony export */   selectLocalPeerRoleName: function() { return /* binding */ Em; },\n/* harmony export */   selectLocalTrackIDs: function() { return /* binding */ pa; },\n/* harmony export */   selectLocalVideoTrackID: function() { return /* binding */ Z; },\n/* harmony export */   selectMessageByMessageID: function() { return /* binding */ qS; },\n/* harmony export */   selectMessageIDsInOrder: function() { return /* binding */ la; },\n/* harmony export */   selectMessagesByPeerID: function() { return /* binding */ xS; },\n/* harmony export */   selectMessagesByRole: function() { return /* binding */ US; },\n/* harmony export */   selectMessagesMap: function() { return /* binding */ Ai; },\n/* harmony export */   selectMessagesUnreadCountByPeerID: function() { return /* binding */ VS; },\n/* harmony export */   selectMessagesUnreadCountByRole: function() { return /* binding */ BS; },\n/* harmony export */   selectPeerAudioByID: function() { return /* binding */ kS; },\n/* harmony export */   selectPeerByCondition: function() { return /* binding */ dg; },\n/* harmony export */   selectPeerByID: function() { return /* binding */ ee; },\n/* harmony export */   selectPeerCount: function() { return /* binding */ ym; },\n/* harmony export */   selectPeerMetadata: function() { return /* binding */ WS; },\n/* harmony export */   selectPeerName: function() { return /* binding */ KS; },\n/* harmony export */   selectPeerNameByID: function() { return /* binding */ mS; },\n/* harmony export */   selectPeerScreenSharing: function() { return /* binding */ jo; },\n/* harmony export */   selectPeerSharingAudio: function() { return /* binding */ Rm; },\n/* harmony export */   selectPeerSharingAudioPlaylist: function() { return /* binding */ Lm; },\n/* harmony export */   selectPeerSharingVideoPlaylist: function() { return /* binding */ Cm; },\n/* harmony export */   selectPeerTypeByID: function() { return /* binding */ SS; },\n/* harmony export */   selectPeers: function() { return /* binding */ ke; },\n/* harmony export */   selectPeersByCondition: function() { return /* binding */ lg; },\n/* harmony export */   selectPeersByRole: function() { return /* binding */ FS; },\n/* harmony export */   selectPeersByRoles: function() { return /* binding */ GS; },\n/* harmony export */   selectPeersMap: function() { return /* binding */ z; },\n/* harmony export */   selectPeersScreenSharing: function() { return /* binding */ Hm; },\n/* harmony export */   selectPeersWithAudioStatus: function() { return /* binding */ XS; },\n/* harmony export */   selectPermissions: function() { return /* binding */ ga; },\n/* harmony export */   selectPollByID: function() { return /* binding */ xa; },\n/* harmony export */   selectPolls: function() { return /* binding */ Xm; },\n/* harmony export */   selectPollsMap: function() { return /* binding */ Ta; },\n/* harmony export */   selectPreviewRole: function() { return /* binding */ Sa; },\n/* harmony export */   selectPreviewRoleName: function() { return /* binding */ Qo; },\n/* harmony export */   selectRTMPState: function() { return /* binding */ Fm; },\n/* harmony export */   selectRecentError: function() { return /* binding */ Tm; },\n/* harmony export */   selectRecordingState: function() { return /* binding */ Vm; },\n/* harmony export */   selectRemotePeers: function() { return /* binding */ Pm; },\n/* harmony export */   selectRoleByRoleName: function() { return /* binding */ pn; },\n/* harmony export */   selectRoleChangeRequest: function() { return /* binding */ ZS; },\n/* harmony export */   selectRolesMap: function() { return /* binding */ Ee; },\n/* harmony export */   selectRoom: function() { return /* binding */ F; },\n/* harmony export */   selectRoomID: function() { return /* binding */ fm; },\n/* harmony export */   selectRoomStartTime: function() { return /* binding */ Km; },\n/* harmony export */   selectRoomStarted: function() { return /* binding */ Om; },\n/* harmony export */   selectRoomState: function() { return /* binding */ se; },\n/* harmony export */   selectScreenAudioTrackByID: function() { return /* binding */ TS; },\n/* harmony export */   selectScreenShareAudioByPeerID: function() { return /* binding */ Da; },\n/* harmony export */   selectScreenShareByPeerID: function() { return /* binding */ RS; },\n/* harmony export */   selectScreenSharesByPeerId: function() { return /* binding */ La; },\n/* harmony export */   selectScreenVideoTrackByID: function() { return /* binding */ fS; },\n/* harmony export */   selectScreenshareAudioVolumeByPeerID: function() { return /* binding */ _S; },\n/* harmony export */   selectSessionId: function() { return /* binding */ $m; },\n/* harmony export */   selectSessionMetadata: function() { return /* binding */ Ym; },\n/* harmony export */   selectSessionStore: function() { return /* binding */ pS; },\n/* harmony export */   selectSimulcastLayerByTrack: function() { return /* binding */ NS; },\n/* harmony export */   selectSpeakers: function() { return /* binding */ Wo; },\n/* harmony export */   selectTemplateAppData: function() { return /* binding */ zm; },\n/* harmony export */   selectTrackAudioByID: function() { return /* binding */ yS; },\n/* harmony export */   selectTrackByID: function() { return /* binding */ Ii; },\n/* harmony export */   selectTracksMap: function() { return /* binding */ N; },\n/* harmony export */   selectTranscriptionsState: function() { return /* binding */ Wm; },\n/* harmony export */   selectUnreadHMSBroadcastMessagesCount: function() { return /* binding */ Nm; },\n/* harmony export */   selectUnreadHMSMessagesCount: function() { return /* binding */ _m; },\n/* harmony export */   selectVideoPlaylist: function() { return /* binding */ Ia; },\n/* harmony export */   selectVideoPlaylistAudioTrackByPeerID: function() { return /* binding */ AS; },\n/* harmony export */   selectVideoPlaylistVideoTrackByPeerID: function() { return /* binding */ bS; },\n/* harmony export */   selectVideoTrackByID: function() { return /* binding */ Ha; },\n/* harmony export */   selectVideoTrackByPeerID: function() { return /* binding */ an; },\n/* harmony export */   selectWhiteboard: function() { return /* binding */ eS; },\n/* harmony export */   selectWhiteboards: function() { return /* binding */ zo; },\n/* harmony export */   simulcastMapping: function() { return /* binding */ We; }\n/* harmony export */ });\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! reselect */ \"(app-pages-browser)/./node_modules/reselect/es/index.js\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ua-parser-js */ \"(app-pages-browser)/./node_modules/ua-parser-js/src/ua-parser.js\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ua_parser_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash.isequal */ \"(app-pages-browser)/./node_modules/lodash.isequal/index.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_isequal__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var webrtc_adapter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! webrtc-adapter */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/adapter_core.js\");\n/* harmony import */ var eventemitter2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! eventemitter2 */ \"(app-pages-browser)/./node_modules/eventemitter2/lib/eventemitter2.js\");\n/* harmony import */ var eventemitter2__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(eventemitter2__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! immer */ \"(app-pages-browser)/./node_modules/immer/dist/immer.esm.mjs\");\n/* harmony import */ var zustand_shallow__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! zustand/shallow */ \"(app-pages-browser)/./node_modules/zustand/esm/shallow.js\");\n/* harmony import */ var zustand_vanilla__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zustand/vanilla */ \"(app-pages-browser)/./node_modules/zustand/esm/vanilla.js\");\n/* harmony import */ var sdp_transform__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! sdp-transform */ \"(app-pages-browser)/./node_modules/sdp-transform/lib/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nvar co=Object.defineProperty,lo=Object.defineProperties;var uo=Object.getOwnPropertyDescriptors;var ai=Object.getOwnPropertySymbols,po=Object.getPrototypeOf,gs=Object.prototype.hasOwnProperty,Ts=Object.prototype.propertyIsEnumerable,ho=Reflect.get;var Ss=(a,e,t)=>e in a?co(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t,m=(a,e)=>{for(var t in e||(e={}))gs.call(e,t)&&Ss(a,t,e[t]);if(ai)for(var t of ai(e))Ts.call(e,t)&&Ss(a,t,e[t]);return a},M=(a,e)=>lo(a,uo(e));var kr=(a,e)=>{var t={};for(var i in a)gs.call(a,i)&&e.indexOf(i)<0&&(t[i]=a[i]);if(a!=null&&ai)for(var i of ai(a))e.indexOf(i)<0&&Ts.call(a,i)&&(t[i]=a[i]);return t};var mo=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports);var ne=(a,e,t)=>ho(po(a),t,e);var c=(a,e,t)=>new Promise((i,r)=>{var s=d=>{try{n(t.next(d))}catch(u){r(u)}},o=d=>{try{n(t.throw(d))}catch(u){r(u)}},n=d=>d.done?i(d.value):Promise.resolve(d.value).then(s,o);n((t=t.apply(a,e)).next())});var Ir=mo((Jc,Eo)=>{Eo.exports={version:\"0.12.36\",license:\"MIT\",repository:{type:\"git\",url:\"https://github.com/100mslive/web-sdks.git\",directory:\"packages/hms-video-store\"},main:\"dist/index.cjs.js\",module:\"dist/index.js\",typings:\"dist/index.d.ts\",files:[\"dist\",\"src\"],engines:{node:\">=12\"},exports:{\".\":{require:\"./dist/index.cjs.js\",import:\"./dist/index.js\",default:\"./dist/index.js\"}},sideEffects:!1,scripts:{prestart:\"rm -rf dist && yarn types:build\",start:'concurrently \"yarn dev\" \"yarn types\"',dev:\"node ../../scripts/dev\",\"build:only\":\"node ../../scripts/build\",build:\"yarn build:only && yarn types:build\",types:\"tsc -w\",\"types:build\":\"tsc -p tsconfig.json\",format:\"prettier --write src/**/*.ts\",test:\"jest --maxWorkers=1\",\"test:watch\":\"jest --watch\",\"test:coverage\":\"jest --coverage\",lint:\"eslint -c ../../.eslintrc .\",\"lint:fix\":\"yarn lint --fix\",prepare:\"yarn build\",size:\"size-limit\",analyze:\"size-limit --why\",docs:\"rm -rf ./docs && typedoc && rm -f ./docs/README.md && mkdir ./docs/home &&mv ./docs/modules.md ./docs/home/content.md && node ../../scripts/docs-store && npx prettier --write './docs/**/*'\"},name:\"@100mslive/hms-video-store\",author:\"100ms\",dependencies:{eventemitter2:\"^6.4.9\",immer:\"^9.0.6\",\"lodash.isequal\":\"^4.5.0\",reselect:\"4.0.0\",\"sdp-transform\":\"^2.14.1\",\"ua-parser-js\":\"^1.0.1\",uuid:\"^8.3.2\",\"webrtc-adapter\":\"^8.0.0\",zustand:\"3.5.7\"},devDependencies:{\"@types/dom-screen-wake-lock\":\"^1.0.1\",\"@types/lodash.isequal\":\"^4.5.8\",\"@types/sdp-transform\":\"^2.4.4\",\"@types/ua-parser-js\":\"^0.7.36\",\"@types/uuid\":\"^8.3.0\",\"jest-canvas-mock\":\"^2.3.1\",\"jsdom-worker\":\"^0.3.0\",tslib:\"^2.2.0\"},description:\"@100mslive Core SDK which abstracts the complexities of webRTC while providing a reactive store for data management with a unidirectional data flow\",keywords:[\"video\",\"webrtc\",\"conferencing\",\"100ms\"],gitHead:\"777fbe43235a3488b310cd0a390a7e36150f6229\"}});var Er=(n=>(n.Disconnected=\"Disconnected\",n.Preview=\"Preview\",n.Connecting=\"Connecting\",n.Connected=\"Connected\",n.Reconnecting=\"Reconnecting\",n.Disconnecting=\"Disconnecting\",n.Failed=\"Failed\",n))(Er||{});var oi=()=>({room:{id:\"\",isConnected:!1,name:\"\",peers:[],localPeer:\"\",roomState:\"Disconnected\",recording:{browser:{running:!1},server:{running:!1},hls:{running:!1}},rtmp:{running:!1},hls:{running:!1,variants:[]},sessionId:\"\"},peers:{},tracks:{},playlist:{audio:{list:{},selection:{id:\"\",hasPrevious:!1,hasNext:!1},progress:0,volume:0,currentTime:0,playbackRate:1},video:{list:{},selection:{id:\"\",hasPrevious:!1,hasNext:!1},progress:0,volume:0,currentTime:0,playbackRate:1}},messages:{byID:{},allIDs:[]},speakers:{},connectionQualities:{},settings:{audioInputDeviceId:\"\",audioOutputDeviceId:\"\",videoInputDeviceId:\"\"},devices:{audioInput:[],audioOutput:[],videoInput:[]},roles:{},roleChangeRequests:[],errors:[],sessionStore:{},templateAppData:{},polls:{},whiteboards:{},hideLocalPeer:!1}),ni=()=>({peerStats:{},remoteTrackStats:{},localTrackStats:{},localPeer:{id:\"\"}});var So=(e=>(e.CHAT=\"chat\",e))(So||{});var fs=(t=>(t.INFO=\"info\",t.ERROR=\"error\",t))(fs||{}),Pr=(w=>(w.PEER_JOINED=\"PEER_JOINED\",w.PEER_LEFT=\"PEER_LEFT\",w.PEER_LIST=\"PEER_LIST\",w.NEW_MESSAGE=\"NEW_MESSAGE\",w.ERROR=\"ERROR\",w.RECONNECTING=\"RECONNECTING\",w.RECONNECTED=\"RECONNECTED\",w.TRACK_ADDED=\"TRACK_ADDED\",w.TRACK_REMOVED=\"TRACK_REMOVED\",w.TRACK_MUTED=\"TRACK_MUTED\",w.TRACK_UNMUTED=\"TRACK_UNMUTED\",w.TRACK_DEGRADED=\"TRACK_DEGRADED\",w.TRACK_RESTORED=\"TRACK_RESTORED\",w.TRACK_DESCRIPTION_CHANGED=\"TRACK_DESCRIPTION_CHANGED\",w.ROLE_UPDATED=\"ROLE_UPDATED\",w.CHANGE_TRACK_STATE_REQUEST=\"CHANGE_TRACK_STATE_REQUEST\",w.CHANGE_MULTI_TRACK_STATE_REQUEST=\"CHANGE_MULTI_TRACK_STATE_REQUEST\",w.ROOM_ENDED=\"ROOM_ENDED\",w.REMOVED_FROM_ROOM=\"REMOVED_FROM_ROOM\",w.DEVICE_CHANGE_UPDATE=\"DEVICE_CHANGE_UPDATE\",w.PLAYLIST_TRACK_ENDED=\"PLAYLIST_TRACK_ENDED\",w.NAME_UPDATED=\"NAME_UPDATED\",w.METADATA_UPDATED=\"METADATA_UPDATED\",w.POLL_CREATED=\"POLL_CREATED\",w.POLL_STARTED=\"POLL_STARTED\",w.POLL_STOPPED=\"POLL_STOPPED\",w.POLL_VOTES_UPDATED=\"POLL_VOTES_UPDATED\",w.POLLS_LIST=\"POLLS_LIST\",w.HAND_RAISE_CHANGED=\"HAND_RAISE_CHANGED\",w.TRANSCRIPTION_STATE_UPDATED=\"TRANSCRIPTION_STATE_UPDATED\",w))(Pr||{});var vs=(t=>(t.audio=\"audio\",t.video=\"video\",t))(vs||{});function Fe(a,e){let t,i;if(e)for(let r of e.auxiliaryTracks){let s=a[r];go(s)&&(i=gt(s)?s:i,t=Tt(s)?s:t)}return{video:t,audio:i}}function gt(a){return a&&a.type===\"audio\"}function Tt(a){return a&&a.type===\"video\"}function go(a){return a&&a.source===\"screen\"}function ci(a){return a&&a.source===\"audioplaylist\"}function ft(a){return a&&a.source===\"videoplaylist\"}function Ms(a){return a?!!(a!=null&&a.degraded):!1}function ze(a,e){return e&&a.tracks[e]?a.tracks[e].enabled:!1}function ys(a,e){return e&&a.tracks[e]?a.tracks[e].displayEnabled:!1}function vt(a){var r;let e=!1,t=!1,i=!1;return(r=a==null?void 0:a.publishParams)!=null&&r.allowed&&(e=a.publishParams.allowed.includes(\"video\"),t=a.publishParams.allowed.includes(\"audio\"),i=a.publishParams.allowed.includes(\"screen\")),{video:e,audio:t,screen:i}}var ks=(d=>(d[d.VERBOSE=0]=\"VERBOSE\",d[d.DEBUG=1]=\"DEBUG\",d[d.INFO=2]=\"INFO\",d[d.WARN=3]=\"WARN\",d[d.TIME=4]=\"TIME\",d[d.TIMEEND=5]=\"TIMEEND\",d[d.ERROR=6]=\"ERROR\",d[d.NONE=7]=\"NONE\",d))(ks||{}),To=typeof window!=\"undefined\"&&typeof window.expect!=\"undefined\",l=class{static v(e,...t){this.log(0,e,...t)}static d(e,...t){this.log(1,e,...t)}static i(e,...t){this.log(2,e,...t)}static w(e,...t){this.log(3,e,...t)}static e(e,...t){this.log(6,e,...t)}static time(e){this.log(4,\"[HMSPerformanceTiming]\",e)}static timeEnd(e){this.log(5,\"[HMSPerformanceTiming]\",e,e)}static cleanup(){performance.clearMarks(),performance.clearMeasures()}static log(e,t,...i){if(!(this.level.valueOf()>e.valueOf()))switch(e){case 0:{console.log(t,...i);break}case 1:{console.debug(t,...i);break}case 2:{console.info(t,...i);break}case 3:{console.warn(t,...i);break}case 6:{console.error(t,...i);break}case 4:{performance.mark(i[0]);break}case 5:{let r=i[0];try{let s=performance.measure(r,r);this.log(1,t,r,s==null?void 0:s.duration),performance.clearMarks(r),performance.clearMeasures(r)}catch(s){this.log(1,t,r,s)}break}}}};l.level=To?7:0;var Ye=class{constructor(e){this.tracks=new Array;this.nativeStream=e,this.id=e.id}updateId(e){this.id=e}};var Te=new ua_parser_js__WEBPACK_IMPORTED_MODULE_1__.UAParser,U=typeof window!=\"undefined\",Es,Ge=typeof window==\"undefined\"&&!((Es=Te.getBrowser().name)!=null&&Es.toLowerCase().includes(\"electron\"));var vo=()=>!Ge,Tc=vo(),Mt=()=>Te.getDevice().type===\"mobile\",Rs=()=>typeof document!=\"undefined\"&&document.hidden,Hs=()=>{var a;return((a=Te.getOS().name)==null?void 0:a.toLowerCase())===\"ios\"},Ps,bs,Cs=(bs=(Ps=Te.getBrowser())==null?void 0:Ps.name)==null?void 0:bs.toLowerCase().includes(\"safari\"),As,Is,di=((Is=(As=Te.getBrowser())==null?void 0:As.name)==null?void 0:Is.toLowerCase())===\"firefox\";var Ls=(i=>(i.CUSTOM=\"CUSTOM\",i.LOCAL=\"LOCAL\",i.HMS=\"HMS\",i))(Ls||{});function Mo(){if(U&&window){let a=window.location.hostname;return a===\"localhost\"||a===\"127.0.0.1\"?\"LOCAL\":a.includes(\"app.100ms.live\")?\"HMS\":\"CUSTOM\"}return\"CUSTOM\"}var Xe=Mo();var P={WebSocketConnectionErrors:{FAILED_TO_CONNECT:1e3,WEBSOCKET_CONNECTION_LOST:1003,ABNORMAL_CLOSE:1006},APIErrors:{SERVER_ERRORS:2e3,INIT_CONFIG_NOT_AVAILABLE:2002,ENDPOINT_UNREACHABLE:2003,INVALID_TOKEN_FORMAT:2004},TracksErrors:{GENERIC_TRACK:3e3,CANT_ACCESS_CAPTURE_DEVICE:3001,DEVICE_NOT_AVAILABLE:3002,DEVICE_IN_USE:3003,DEVICE_LOST_MIDWAY:3004,NOTHING_TO_RETURN:3005,INVALID_VIDEO_SETTINGS:3006,CODEC_CHANGE_NOT_PERMITTED:3007,AUTOPLAY_ERROR:3008,OVER_CONSTRAINED:3009,NO_AUDIO_DETECTED:3010,SYSTEM_DENIED_PERMISSION:3011,CURRENT_TAB_NOT_SHARED:3012,AUDIO_PLAYBACK_ERROR:3013,SELECTED_DEVICE_MISSING:3014,NO_DATA:3015},WebrtcErrors:{CREATE_OFFER_FAILED:4001,CREATE_ANSWER_FAILED:4002,SET_LOCAL_DESCRIPTION_FAILED:4003,SET_REMOTE_DESCRIPTION_FAILED:4004,ICE_FAILURE:4005,ICE_DISCONNECTED:4006,STATS_FAILED:4007},WebsocketMethodErrors:{SERVER_ERRORS:5e3,ALREADY_JOINED:5001,CANNOT_JOIN_PREVIEW_IN_PROGRESS:5002},GenericErrors:{NOT_CONNECTED:6e3,SIGNALLING:6001,UNKNOWN:6002,NOT_READY:6003,JSON_PARSING_FAILED:6004,TRACK_METADATA_MISSING:6005,RTC_TRACK_MISSING:6006,PEER_METADATA_MISSING:6007,INVALID_ROLE:6008,PREVIEW_IN_PROGRESS:6009,MISSING_MEDIADEVICES:6010,MISSING_RTCPEERCONNECTION:6011,LOCAL_STORAGE_ACCESS_DENIED:6012,VALIDATION_FAILED:6013},PlaylistErrors:{NO_ENTRY_TO_PLAY:8001,NO_ENTRY_IS_PLAYING:8002}};var k=class a extends Error{constructor(t,i,r,s,o,n=!1){super(s);this.code=t;this.name=i;this.message=s;this.description=o;this.isTerminal=n;Object.setPrototypeOf(this,a.prototype),this.action=r.toString()}toAnalyticsProperties(){return{error_name:this.name,error_code:this.code,error_message:this.message,error_description:this.description,action:this.action,is_terminal:this.isTerminal}}addNativeError(t){this.nativeError=t}toString(){var t;return`{\n        code: ${this.code};\n        name: ${this.name};\n        action: ${this.action};\n        message: ${this.message};\n        description: ${this.description};\n        isTerminal: ${this.isTerminal};\n        nativeError: ${(t=this.nativeError)==null?void 0:t.message};\n      }`}};var W=class extends k{constructor(t,i,r,s,o,n){super(t,i,r,s,o,!1);this.code=t;this.name=i;this.message=s;this.description=o;this.trackType=n}toAnalyticsProperties(){return M(m({},super.toAnalyticsProperties()),{track_type:this.trackType})}toString(){var t;return`{\n        code: ${this.code};\n        name: ${this.name};\n        action: ${this.action};\n        message: ${this.message};\n        description: ${this.description};\n        isTerminal: ${this.isTerminal};\n        nativeError: ${(t=this.nativeError)==null?void 0:t.message};\n        trackType: ${this.trackType};\n      }`}};var Ds=(r=>(r.AUDIO=\"audio\",r.VIDEO=\"video\",r.AUDIO_VIDEO=\"audio, video\",r.SCREEN=\"screen\",r))(Ds||{});function br(a){switch(a){case\"join\":return\"JOIN\";case\"offer\":return\"PUBLISH\";case\"answer\":return\"SUBSCRIBE\";case\"track-update\":return\"TRACK\";default:return\"NONE\"}}var yo=[\"join\",\"offer\",\"answer\",\"trickle\",\"on-error\",\"JOIN\"],S={WebSocketConnectionErrors:{FailedToConnect(a,e=\"\"){return new k(P.WebSocketConnectionErrors.FAILED_TO_CONNECT,\"WebsocketFailedToConnect\",a,`[WS]: ${e}`,`[WS]: ${e}`)},WebSocketConnectionLost(a,e=\"\"){return new k(P.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST,\"WebSocketConnectionLost\",a,\"Network connection lost\",e)},AbnormalClose(a,e=\"\"){return new k(P.WebSocketConnectionErrors.ABNORMAL_CLOSE,\"WebSocketAbnormalClose\",a,\"Websocket closed abnormally\",e)}},APIErrors:{ServerErrors(a,e,t=\"\",i=!0){return new k(a,\"ServerErrors\",e,`[${e}]: Server error ${t}`,t,i)},EndpointUnreachable(a,e=\"\"){return new k(P.APIErrors.ENDPOINT_UNREACHABLE,\"EndpointUnreachable\",a,`Endpoint is not reachable - ${e}`,e)},InvalidTokenFormat(a,e=\"\"){return new k(P.APIErrors.INVALID_TOKEN_FORMAT,\"InvalidTokenFormat\",a,`Token is not in proper JWT format - ${e}`,e,!0)},InitConfigNotAvailable(a,e=\"\"){return new k(P.APIErrors.INIT_CONFIG_NOT_AVAILABLE,\"InitError\",a,`[INIT]: ${e}`,`[INIT]: ${e}`)}},TracksErrors:{GenericTrack(a,e=\"\"){return new W(P.TracksErrors.GENERIC_TRACK,\"GenericTrack\",a,`[TRACK]: ${e}`,`[TRACK]: ${e}`,\"audio, video\")},CantAccessCaptureDevice(a,e,t=\"\"){return new W(P.TracksErrors.CANT_ACCESS_CAPTURE_DEVICE,\"CantAccessCaptureDevice\",a,`User denied permission to access capture device - ${e}`,t,e)},DeviceNotAvailable(a,e,t=\"\"){return new W(P.TracksErrors.DEVICE_NOT_AVAILABLE,\"DeviceNotAvailable\",a,`[TRACK]: Capture device is no longer available - ${e}`,t,e)},DeviceInUse(a,e,t=\"\"){return new W(P.TracksErrors.DEVICE_IN_USE,\"DeviceInUse\",a,`[TRACK]: Capture device is in use by another application - ${e}`,t,e)},DeviceLostMidway(a,e,t=\"\"){return new W(P.TracksErrors.DEVICE_LOST_MIDWAY,\"DeviceLostMidway\",a,`Lost access to capture device midway - ${e}`,t,e)},NothingToReturn(a,e=\"\",t=\"There is no media to return. Please select either video or audio or both.\"){return new W(P.TracksErrors.NOTHING_TO_RETURN,\"NothingToReturn\",a,t,e,\"audio, video\")},InvalidVideoSettings(a,e=\"\"){return new W(P.TracksErrors.INVALID_VIDEO_SETTINGS,\"InvalidVideoSettings\",a,\"Cannot enable simulcast when no video settings are provided\",e,\"video\")},AutoplayBlocked(a,e=\"\"){return new W(P.TracksErrors.AUTOPLAY_ERROR,\"AutoplayBlocked\",a,\"Autoplay blocked because the user didn't interact with the document first\",e,\"audio\")},CodecChangeNotPermitted(a,e=\"\"){return new W(P.TracksErrors.CODEC_CHANGE_NOT_PERMITTED,\"CodecChangeNotPermitted\",a,\"Codec can't be changed mid call.\",e,\"audio, video\")},OverConstrained(a,e,t=\"\"){return new W(P.TracksErrors.OVER_CONSTRAINED,\"OverConstrained\",a,`[TRACK]: Requested constraints cannot be satisfied with the device hardware - ${e}`,t,e)},NoAudioDetected(a,e=\"Please check the mic or use another audio input\"){return new W(P.TracksErrors.NO_AUDIO_DETECTED,\"NoAudioDetected\",a,\"No audio input detected from microphone\",e,\"audio\")},SystemDeniedPermission(a,e,t=\"\"){return new W(P.TracksErrors.SYSTEM_DENIED_PERMISSION,\"SystemDeniedPermission\",a,`Operating System denied permission to access capture device - ${e}`,t,e)},CurrentTabNotShared(){return new W(P.TracksErrors.CURRENT_TAB_NOT_SHARED,\"CurrentTabNotShared\",\"TRACK\",\"The app requires you to share the current tab\",\"You must screen share the current tab in order to proceed\",\"screen\")},AudioPlaybackError(a){return new W(P.TracksErrors.AUDIO_PLAYBACK_ERROR,\"Audio playback error\",\"TRACK\",a,a,\"audio\")},SelectedDeviceMissing(a){return new W(P.TracksErrors.SELECTED_DEVICE_MISSING,\"SelectedDeviceMissing\",\"TRACK\",`Could not detect selected ${a} device`,`Please check connection to the ${a} device`,a)},NoDataInTrack(a){return new W(P.TracksErrors.NO_DATA,\"Track does not have any data\",\"TRACK\",a,\"This could possibily due to another application taking priority over the access to camera or microphone or due to an incoming call\",\"audio, video\")}},WebrtcErrors:{CreateOfferFailed(a,e=\"\"){return new k(P.WebrtcErrors.CREATE_OFFER_FAILED,\"CreateOfferFailed\",a,`[${a.toString()}]: Failed to create offer. `,e)},CreateAnswerFailed(a,e=\"\"){return new k(P.WebrtcErrors.CREATE_ANSWER_FAILED,\"CreateAnswerFailed\",a,`[${a.toString()}]: Failed to create answer. `,e)},SetLocalDescriptionFailed(a,e=\"\"){return new k(P.WebrtcErrors.SET_LOCAL_DESCRIPTION_FAILED,\"SetLocalDescriptionFailed\",a,`[${a.toString()}]: Failed to set offer. `,e)},SetRemoteDescriptionFailed(a,e=\"\"){return new k(P.WebrtcErrors.SET_REMOTE_DESCRIPTION_FAILED,\"SetRemoteDescriptionFailed\",a,`[${a.toString()}]: Failed to set answer. `,e,!0)},ICEFailure(a,e=\"\",t=!1){return new k(P.WebrtcErrors.ICE_FAILURE,\"ICEFailure\",a,`[${a.toString()}]: Ice connection state FAILED`,e,t)},ICEDisconnected(a,e=\"\"){return new k(P.WebrtcErrors.ICE_DISCONNECTED,\"ICEDisconnected\",a,`[${a.toString()}]: Ice connection state DISCONNECTED`,e)},StatsFailed(a,e=\"\"){return new k(P.WebrtcErrors.STATS_FAILED,\"StatsFailed\",a,`Failed to WebRTC get stats - ${e}`,e)}},WebsocketMethodErrors:{ServerErrors(a,e,t){return new k(a,\"ServerErrors\",e,t,t,yo.includes(e))},AlreadyJoined(a,e=\"\"){return new k(P.WebsocketMethodErrors.ALREADY_JOINED,\"AlreadyJoined\",a,\"[JOIN]: You have already joined this room.\",e)},CannotJoinPreviewInProgress(a,e=\"\"){return new k(P.WebsocketMethodErrors.CANNOT_JOIN_PREVIEW_IN_PROGRESS,\"CannotJoinPreviewInProgress\",a,\"[JOIN]: Cannot join if preview is in progress\",e)}},GenericErrors:{NotConnected(a,e=\"\"){return new k(P.GenericErrors.NOT_CONNECTED,\"NotConnected\",a,\"Client is not connected\",e)},Signalling(a,e){return new k(P.GenericErrors.SIGNALLING,\"Signalling\",a,`Unknown signalling error: ${a.toString()} ${e} `,e)},Unknown(a,e){return new k(P.GenericErrors.UNKNOWN,\"Unknown\",a,`Unknown exception: ${e}`,e)},NotReady(a,e=\"\"){return new k(P.GenericErrors.NOT_READY,\"NotReady\",a,e,e)},JsonParsingFailed(a,e,t=\"\"){return new k(P.GenericErrors.JSON_PARSING_FAILED,\"JsonParsingFailed\",a,`Failed to parse JSON message - ${e}`,t)},TrackMetadataMissing(a,e=\"\"){return new k(P.GenericErrors.TRACK_METADATA_MISSING,\"TrackMetadataMissing\",a,\"Track Metadata Missing\",e)},RTCTrackMissing(a,e=\"\"){return new k(P.GenericErrors.RTC_TRACK_MISSING,\"RTCTrackMissing\",a,\"RTC Track missing\",e)},PeerMetadataMissing(a,e=\"\"){return new k(P.GenericErrors.PEER_METADATA_MISSING,\"PeerMetadataMissing\",a,\"Peer Metadata Missing\",e)},ValidationFailed(a,e){return new k(P.GenericErrors.VALIDATION_FAILED,\"ValidationFailed\",\"VALIDATION\",a,e?JSON.stringify(e):\"\")},InvalidRole(a,e){return new k(P.GenericErrors.INVALID_ROLE,\"InvalidRole\",a,\"Invalid role. Join with valid role\",e,!0)},PreviewAlreadyInProgress(a,e=\"\"){return new k(P.GenericErrors.PREVIEW_IN_PROGRESS,\"PreviewAlreadyInProgress\",a,\"[Preview]: Cannot join if preview is in progress\",e)},LocalStorageAccessDenied(a=\"Access to localStorage has been denied\"){return new k(P.GenericErrors.LOCAL_STORAGE_ACCESS_DENIED,\"LocalStorageAccessDenied\",\"NONE\",\"LocalStorageAccessDenied\",a)},MissingMediaDevices(){return new k(P.GenericErrors.MISSING_MEDIADEVICES,\"MissingMediaDevices\",\"JOIN\",\"navigator.mediaDevices is undefined. 100ms SDK won't work on this website as WebRTC is not supported on HTTP endpoints(missing navigator.mediaDevices). Please ensure you're using the SDK either on localhost or a valid HTTPS endpoint.\",\"\",!0)},MissingRTCPeerConnection(){return new k(P.GenericErrors.MISSING_RTCPEERCONNECTION,\"MissingRTCPeerConnection\",\"JOIN\",\"RTCPeerConnection which is a core requirement for WebRTC call was not found, this could be due to an unsupported browser or browser extensions blocking WebRTC\",\"\",!0)}},MediaPluginErrors:{PlatformNotSupported(a,e=\"\"){return new k(7001,\"PlatformNotSupported\",a,\"Check HMS Docs to see the list of supported platforms\",e)},InitFailed(a,e=\"\"){return new k(7002,\"InitFailed\",a,\"Plugin init failed\",e)},ProcessingFailed(a,e=\"\"){return new k(7003,\"ProcessingFailed\",a,\"Plugin processing failed\",e)},AddAlreadyInProgress(a,e=\"\"){return new k(7004,\"AddAlreadyInProgress\",a,\"Plugin add already in progress\",e)},DeviceNotSupported(a,e=\"\"){return new k(7005,\"DeviceNotSupported\",a,\"Check HMS Docs to see the list of supported devices\",e)}},PlaylistErrors:{NoEntryToPlay(a,e){return new k(P.PlaylistErrors.NO_ENTRY_TO_PLAY,\"NoEntryToPlay\",a,\"Reached end of playlist\",e)},NoEntryPlaying(a,e){return new k(P.PlaylistErrors.NO_ENTRY_IS_PLAYING,\"NoEntryIsPlaying\",a,\"No entry is playing at this time\",e)}}};var Ar=class{constructor(){this.valuesMap=new Map}getItem(e){return this.valuesMap.has(e)?String(this.valuesMap.get(e)):null}setItem(e,t){this.valuesMap.set(e,t)}removeItem(e){this.valuesMap.delete(e)}clear(){this.valuesMap.clear()}key(e){if(arguments.length===0)throw new TypeError(\"Failed to execute 'key' on 'Storage': 1 argument required, but only 0 present.\");return Array.from(this.valuesMap.keys())[e]}get length(){return this.valuesMap.size}},ws=()=>{try{U&&!localStorage&&(window.localStorage=new Ar)}catch(a){l.e(\"Error initialising localStorage\",S.GenericErrors.LocalStorageAccessDenied())}};var fe=class{constructor(e){this.key=e;this.storage=null}getStorage(){try{return U&&!this.storage&&(ws(),this.storage=window.localStorage),this.storage}catch(e){return l.e(\"Error initialising localStorage\",S.GenericErrors.LocalStorageAccessDenied()),null}}get(){var i;let e=(i=this.getStorage())==null?void 0:i.getItem(this.key);return e?JSON.parse(e):void 0}set(e){var i;let t=JSON.stringify(e);(i=this.getStorage())==null||i.setItem(this.key,t)}clear(){var e;(e=this.getStorage())==null||e.removeItem(this.key)}};var li=()=>{let a,e=new fe(\"hms-analytics-deviceId\"),t=e.get();return t?a=t:(a=(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(),e.set(a)),a};var _s=\"[VALIDATIONS]\";function he(a){return a!=null}var yt=()=>{if(!he(RTCPeerConnection)){let a=S.GenericErrors.MissingRTCPeerConnection();throw l.e(_s,a),a}},kt=()=>{if(!he(navigator.mediaDevices)){let a=S.GenericErrors.MissingMediaDevices();throw l.e(_s,a),a}},Ns=a=>{if(!a.getPublishParams())throw S.GenericErrors.NotConnected(\"VALIDATION\",\"call addTrack after preview or join is successful\")};var Os=Ir().version;function Et(a=\"prod\",e){let t=\"web\",i=Xe!==\"LOCAL\"&&a===\"prod\"?\"prod\":\"debug\";if(Ge)return xs({os:\"web_nodejs\",os_version:process.version,sdk:t,sdk_version:Os,env:i,domain:Xe,is_prebuilt:!!(e!=null&&e.isPrebuilt),framework:\"node\",framework_version:process.version,framework_sdk_version:e==null?void 0:e.sdkVersion});let r=Te.getOS(),s=Te.getDevice(),o=Te.getBrowser(),n=Rr(`web_${r.name}`),d=r.version||\"\",u=Rr(`${o.name}_${o.version}`),p=u;return s.type&&(p=`${Rr(`${s.vendor}_${s.type}`)}/${u}`),xs({os:n,os_version:d,sdk:t,sdk_version:Os,device_model:p,env:i,domain:Xe,is_prebuilt:!!(e!=null&&e.isPrebuilt),framework:e==null?void 0:e.type,framework_version:e==null?void 0:e.version,framework_sdk_version:e==null?void 0:e.sdkVersion})}function Rr(a){return a.replace(/ /g,\"_\")}var xs=(a,e=\",\")=>Object.keys(a).filter(t=>he(a[t])).map(t=>`${t}:${a[t]}`).join(e);var C=class{constructor({name:e,level:t,properties:i,includesPII:r,timestamp:s}){this.metadata={peer:{},userAgent:Et()};this.name=e,this.level=t,this.includesPII=r||!1,this.properties=i||{},this.timestamp=s||new Date().getTime(),this.event_id=(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(),this.device_id=li()}toSignalParams(){return{name:this.name,info:M(m({},this.properties),{timestamp:this.timestamp,domain:Xe}),timestamp:new Date().getTime()}}};var y=class{static connect(e,t,i=new Date,r=new Date,s){let o=this.eventNameFor(\"connect\",e===void 0),n=e?2:1,d=this.getPropertiesWithError(M(m({},t),{[this.KEY_REQUESTED_AT]:i==null?void 0:i.getTime(),[this.KEY_RESPONDED_AT]:r==null?void 0:r.getTime(),endpoint:s}),e);return new C({name:o,level:n,properties:d})}static disconnect(e,t){let i=\"disconnected\",r=e?2:1,s=this.getPropertiesWithError(t,e);return new C({name:i,level:r,properties:s})}static preview(i){var r=i,{error:e}=r,t=kr(r,[\"error\"]);let s=this.eventNameFor(\"preview\",e===void 0),o=e?2:1,n=this.getPropertiesWithError(t,e);return new C({name:s,level:o,properties:n})}static join(i){var r=i,{error:e}=r,t=kr(r,[\"error\"]);let s=this.eventNameFor(\"join\",e===void 0),o=e?2:1,n=this.getPropertiesWithError(M(m({},t),{is_preview_called:!!t.is_preview_called}),e);return new C({name:s,level:o,properties:n})}static publish({devices:e,settings:t,error:i}){let r=this.eventNameFor(\"publish\",i===void 0),s=i?2:1,o=this.getPropertiesWithError({devices:e,audio:t==null?void 0:t.audio,video:t==null?void 0:t.video},i);return new C({name:r,level:s,properties:o})}static hlsPlayerError(e){return new C({name:\"hlsPlayerError\",level:2,properties:this.getErrorProperties(e)})}static subscribeFail(e){let t=this.eventNameFor(\"subscribe\",!1),i=2,r=this.getErrorProperties(e);return new C({name:t,level:i,properties:r})}static leave(){return new C({name:\"leave\",level:1})}static autoplayError(){return new C({name:\"autoplayError\",level:2})}static audioPlaybackError(e){return new C({name:\"audioPlaybackError\",level:2,properties:this.getErrorProperties(e)})}static audioRecovered(e){return new C({name:\"audioRecovered\",level:1,properties:{message:e}})}static permissionChange(e,t){return new C({name:\"permissionChanged\",level:1,properties:{message:`Perrmission for ${e} changed to ${t}`}})}static deviceChange({isUserSelection:e,selection:t,type:i,devices:r,error:s}){let o=this.eventNameFor(s?\"publish\":`device.${i}`,s===void 0),n=s?2:1,d=this.getPropertiesWithError({selection:t,devices:r,isUserSelection:e},s);return new C({name:o,level:n,properties:d})}static performance(e){let t=\"perf.stats\",i=1,r=e.toAnalyticsProperties();return new C({name:t,level:i,properties:r})}static rtcStats(e){let t=\"rtc.stats\",i=1,r=e.toAnalyticsProperties();return new C({name:t,level:i,properties:r})}static rtcStatsFailed(e){let t=\"rtc.stats.failed\",i=2;return new C({name:t,level:i,properties:this.getErrorProperties(e)})}static degradationStats(e,t){let i=\"video.degradation.stats\",r=1,s={degradedAt:e.degradedAt,trackId:e.trackId};if(!t&&e.degradedAt instanceof Date){let o=new Date,n=o.valueOf()-e.degradedAt.valueOf();s=M(m({},s),{duration:n,restoredAt:o})}return new C({name:i,level:r,properties:s})}static audioDetectionFail(e,t){let i=this.getPropertiesWithError({device:t},e),r=2,s=\"audiopresence.failed\";return new C({name:s,level:r,properties:i})}static previewNetworkQuality(e){return new C({name:\"perf.networkquality.preview\",level:e.error?2:1,properties:e})}static publishStats(e){return new C({name:\"publisher.stats\",level:1,properties:e})}static subscribeStats(e){return new C({name:\"subscriber.stats\",level:1,properties:e})}static getKrispUsage(e){return new C({name:\"krisp.usage\",level:1,properties:{duration:e}})}static krispStart(){return new C({name:\"krisp.start\",level:1})}static krispStop(){return new C({name:\"krisp.stop\",level:1})}static interruption({started:e,type:t,reason:i,deviceInfo:r}){return new C({name:`${e?\"interruption.start\":\"interruption.stop\"}`,level:1,properties:m({reason:i,type:t},r)})}static eventNameFor(e,t){return`${e}.${t?\"success\":\"failed\"}`}static getPropertiesWithError(e,t){let i=this.getErrorProperties(t);return e=m(m({},i),e),e}static getErrorProperties(e){return e?e instanceof k?e.toAnalyticsProperties():{error_name:e.name,error_message:e.message,error_description:e.cause}:{}}};y.KEY_REQUESTED_AT=\"requested_at\",y.KEY_RESPONDED_AT=\"responded_at\";var ui=a=>a?`{\n    trackId: ${a.id};\n    kind: ${a.kind};\n    enabled: ${a.enabled};\n    muted: ${a.muted};\n    readyState: ${a.readyState};\n  }`:\"\";var De=class{constructor(e,t,i){this.logIdentifier=\"\";this.isTrackNotPublishing=()=>this.nativeTrack.readyState===\"ended\"||this.nativeTrack.muted;this.stream=e,this.nativeTrack=t,this.source=i}get enabled(){return this.nativeTrack.enabled}get trackId(){return this.firstTrackId||this.sdpTrackId||this.nativeTrack.id}getMediaTrackSettings(){return this.nativeTrack.getSettings()}setEnabled(e){return c(this,null,function*(){this.nativeTrack.enabled=e})}setSdpTrackId(e){this.sdpTrackId=e}setFirstTrackId(e){this.firstTrackId=e}sendInterruptionEvent({started:e,reason:t}){return y.interruption({started:e,type:this.type,reason:t,deviceInfo:{deviceId:this.nativeTrack.getSettings().deviceId,groupId:this.nativeTrack.getSettings().groupId}})}cleanup(){var e;l.d(\"[HMSTrack]\",\"Stopping track\",this.toString()),(e=this.nativeTrack)==null||e.stop()}toString(){var e;return`{\n      streamId: ${this.stream.id};\n      peerId: ${this.peerId};\n      trackId: ${this.trackId};\n      mid: ${((e=this.transceiver)==null?void 0:e.mid)||\"-\"};\n      logIdentifier: ${this.logIdentifier};\n      source: ${this.source};\n      enabled: ${this.enabled};\n      nativeTrack: ${ui(this.nativeTrack)};\n    }`}};var we=class extends De{constructor(t,i,r){super(t,i,r);this.type=\"audio\";this.audioElement=null;if(i.kind!==\"audio\")throw new Error(\"Expected 'track' kind = 'audio'\")}getVolume(){return this.audioElement?Math.floor(this.audioElement.volume*100):null}setVolume(t){return c(this,null,function*(){if(t<0||t>100)throw Error(\"Please pass a valid number between 0-100\");yield this.subscribeToAudio(t===0?!1:this.enabled),this.audioElement&&(this.audioElement.volume=t/100)})}setAudioElement(t){l.d(\"[HMSAudioTrack]\",this.logIdentifier,\"adding audio element\",`${this}`,t),this.audioElement=t}getAudioElement(){return this.audioElement}getOutputDevice(){return this.outputDevice}cleanup(){super.cleanup(),this.audioElement&&(this.audioElement.srcObject=null,this.audioElement.remove(),this.audioElement=null)}setOutputDevice(t){return c(this,null,function*(){var i;if(!t){l.d(\"[HMSAudioTrack]\",this.logIdentifier,\"device is null\",`${this}`);return}if(!this.audioElement){l.d(\"[HMSAudioTrack]\",this.logIdentifier,\"no audio element to set output\",`${this}`),this.outputDevice=t;return}try{typeof this.audioElement.setSinkId==\"function\"&&(di||(yield(i=this.audioElement)==null?void 0:i.setSinkId(t.deviceId)),this.outputDevice=t)}catch(r){l.d(\"[HMSAudioTrack]\",\"error in setSinkId\",r)}})}subscribeToAudio(t){return c(this,null,function*(){this.stream instanceof Pe&&(yield this.stream.setAudio(t,this.trackId,this.logIdentifier))})}};var Hr=class{constructor(){this.storage=new fe(\"hms-device-selection\");this.remember=!1;this.TAG=\"[HMSDeviceStorage]\"}setDevices(e){this.devices=e}rememberDevices(e){this.remember=e}updateSelection(e,{deviceId:t,groupId:i}){if(!this.devices||!this.remember)return;let r=this.devices[e].find(o=>this.isSame({deviceId:t,groupId:i},o));if(!r){l.w(this.TAG,`Could not find device with deviceId: ${t}, groupId: ${i}`);return}let s=this.storage.get()||{};s[e]=r,this.storage.set(s)}getSelection(){if(this.remember)return this.storage.get()}cleanup(){this.remember=!1,this.devices=void 0}isSame(e,t){return e.deviceId===t.deviceId&&(e.groupId===t.groupId||!e.groupId)}},X=new Hr;var Cr=(t=>(t.TRANSFORM=\"TRANSFORM\",t.ANALYZE=\"ANALYZE\",t))(Cr||{}),Lr=(t=>(t.PLATFORM_NOT_SUPPORTED=\"PLATFORM_NOT_SUPPORTED\",t.DEVICE_NOT_SUPPORTED=\"DEVICE_NOT_SUPPORTED\",t))(Lr||{});var me=class{static failure(e,t){let i=\"mediaPlugin.failed\",r=2,s=m({plugin_name:e},t.toAnalyticsProperties());return new C({name:i,level:r,properties:s})}static audioPluginFailure(e,t,i){let r=\"mediaPlugin.failed\",s=2,o=m({plugin_name:e,sampleRate:t},i.toAnalyticsProperties());return new C({name:r,level:s,properties:o})}static audioPluginStats({pluginName:e,duration:t,loadTime:i,sampleRate:r}){let s=\"mediaPlugin.stats\",o=1,n={plugin_name:e,duration:t,load_time:i,sampleRate:r};return new C({name:s,level:o,properties:n})}static added(e,t){let i=\"mediaPlugin.added\",r=1,s={plugin_name:e,added_at:t};return new C({name:i,level:r,properties:s})}static stats({pluginName:e,duration:t,loadTime:i,avgPreProcessingTime:r,avgProcessingTime:s,inputFrameRate:o,pluginFrameRate:n}){let d=\"mediaPlugin.stats\",u=1,p={plugin_name:e,duration:t,load_time:i,avg_preprocessing_time:r,avg_processing_time:s,input_frame_rate:o,plugin_frame_rate:n};return new C({name:d,level:u,properties:p})}};var pi=class{constructor(e){this.eventBus=e;this.TAG=\"[AudioPluginsAnalytics]\";this.initTime={},this.addedTimestamps={},this.pluginAdded={},this.pluginSampleRate={}}added(e,t){this.pluginAdded[e]=!0,this.addedTimestamps[e]=Date.now(),this.initTime[e]=0,this.pluginSampleRate[e]=t,this.eventBus.analytics.publish(me.added(e,this.addedTimestamps[e]))}removed(e){if(this.pluginAdded[e]){let t={pluginName:e,duration:Math.floor((Date.now()-this.addedTimestamps[e])/1e3),loadTime:this.initTime[e],sampleRate:this.pluginSampleRate[e]};this.eventBus.analytics.publish(me.audioPluginStats(t)),this.clean(e)}}failure(e,t){this.pluginAdded[e]&&(this.eventBus.analytics.publish(me.audioPluginFailure(e,this.pluginSampleRate[e],t)),this.clean(e))}initWithTime(e,t){return c(this,null,function*(){if(this.initTime[e]){l.i(this.TAG,`Plugin Already loaded ${e}, time it took: ${this.initTime[e]}`);return}let i;try{i=yield this.timeInMs(t),l.i(this.TAG,`Time taken for Plugin ${e} initialization : ${i}`)}catch(r){let s=S.MediaPluginErrors.InitFailed(\"AUDIO_PLUGINS\",`failed during initialization of plugin${r.message||r}`);throw l.e(this.TAG,s),this.failure(e,s),s}i&&(this.initTime[e]=i)})}timeInMs(e){return c(this,null,function*(){let t=Date.now();return yield e(),Math.floor(Date.now()-t)})}clean(e){delete this.addedTimestamps[e],delete this.initTime[e],delete this.pluginAdded[e],delete this.pluginSampleRate[e]}};var Pt=class{constructor(e,t,i){this.eventBus=t;this.TAG=\"[AudioPluginsManager]\";this.pluginAddInProgress=!1;this.hmsTrack=e,this.pluginsMap=new Map,this.analytics=new pi(t),this.audioContext=ce.getAudioContext(),this.room=i}getPlugins(){return Array.from(this.pluginsMap.keys())}addPlugin(e){return c(this,null,function*(){var i,r;let t=(i=e.getName)==null?void 0:i.call(e);if(!t){l.w(\"no name provided by the plugin\");return}if(this.pluginAddInProgress){let s=S.MediaPluginErrors.AddAlreadyInProgress(\"AUDIO_PLUGINS\",\"Add Plugin is already in Progress\");throw this.analytics.added(t,this.audioContext.sampleRate),this.analytics.failure(t,s),l.w(\"can't add another plugin when previous add is in progress\"),s}switch(e.getName()){case\"HMSKrispPlugin\":{if(!((r=this.room)!=null&&r.isNoiseCancellationEnabled)){let s=\"Krisp Noise Cancellation is not enabled for this room\";if(this.pluginsMap.size===0)throw Error(s);l.w(this.TAG,s);return}this.eventBus.analytics.publish(y.krispStart());break}default:}this.pluginAddInProgress=!0;try{yield this.addPluginInternal(e)}finally{this.pluginAddInProgress=!1}})}addPluginInternal(e){return c(this,null,function*(){var i,r;let t=(i=e.getName)==null?void 0:i.call(e);if(this.pluginsMap.get(t)){l.w(this.TAG,`plugin - ${t} already added.`);return}yield this.validateAndThrow(t,e),(r=e.setEventBus)==null||r.call(e,this.eventBus);try{this.pluginsMap.size===0?yield this.initAudioNodes():this.prevAudioNode&&this.prevAudioNode.disconnect(),this.analytics.added(t,this.audioContext.sampleRate),yield this.analytics.initWithTime(t,()=>c(this,null,function*(){return e.init()})),this.pluginsMap.set(t,e),yield this.processPlugin(e),yield this.connectToDestination(),yield this.updateProcessedTrack()}catch(s){throw l.e(this.TAG,\"failed to add plugin\",s),s}})}validatePlugin(e){return e.checkSupport(this.audioContext)}validateAndThrow(e,t){return c(this,null,function*(){let i=this.validatePlugin(t);if(i.isSupported)l.i(this.TAG,`plugin is supported,- ${t.getName()}`);else if(this.analytics.added(e,this.audioContext.sampleRate),i.errType===\"PLATFORM_NOT_SUPPORTED\"){let r=S.MediaPluginErrors.PlatformNotSupported(\"AUDIO_PLUGINS\",\"platform not supported, see docs\");throw this.analytics.failure(e,r),yield this.cleanup(),r}else if(i.errType===\"DEVICE_NOT_SUPPORTED\"){let r=S.MediaPluginErrors.DeviceNotSupported(\"AUDIO_PLUGINS\",\"audio device not supported, see docs\");throw this.analytics.failure(e,r),yield this.cleanup(),r}})}removePlugin(e){return c(this,null,function*(){switch(e.getName()){case\"HMSKrispPlugin\":{this.eventBus.analytics.publish(y.krispStop());break}default:break}yield this.removePluginInternal(e),this.pluginsMap.size===0?(yield this.cleanup(),l.i(this.TAG,\"No plugins left, stopping plugins loop\"),yield this.hmsTrack.setProcessedTrack(void 0)):yield this.reprocessPlugins()})}cleanup(){return c(this,null,function*(){var e,t,i;for(let r of this.pluginsMap.values())yield this.removePluginInternal(r);yield this.hmsTrack.setProcessedTrack(void 0),(e=this.sourceNode)==null||e.disconnect(),(t=this.prevAudioNode)==null||t.disconnect(),(i=this.outputTrack)==null||i.stop(),this.sourceNode=void 0,this.destinationNode=void 0,this.prevAudioNode=void 0,this.outputTrack=void 0})}closeContext(){return c(this,null,function*(){this.audioContext=void 0})}reprocessPlugins(){return c(this,null,function*(){if(this.pluginsMap.size===0||!this.sourceNode)return;let e=Array.from(this.pluginsMap.values());yield this.cleanup(),yield this.initAudioNodes();for(let t of e)yield this.addPlugin(t);yield this.updateProcessedTrack()})}initAudioNodes(){return c(this,null,function*(){if(this.audioContext){let e=new MediaStream([this.hmsTrack.nativeTrack]);this.sourceNode=this.audioContext.createMediaStreamSource(e),this.destinationNode||(this.destinationNode=this.audioContext.createMediaStreamDestination(),this.outputTrack=this.destinationNode.stream.getAudioTracks()[0])}})}updateProcessedTrack(){return c(this,null,function*(){try{yield this.hmsTrack.setProcessedTrack(this.outputTrack)}catch(e){throw l.e(this.TAG,\"error in setting processed track\",e),e}})}processPlugin(e){return c(this,null,function*(){try{let t=yield e.processAudioTrack(this.audioContext,this.prevAudioNode||this.sourceNode);this.prevAudioNode&&this.prevAudioNode.connect(t),this.prevAudioNode=t}catch(t){let i=e.getName();l.e(this.TAG,`error in processing plugin ${i}`,t),yield this.removePluginInternal(e)}})}connectToDestination(){return c(this,null,function*(){try{this.prevAudioNode&&this.destinationNode&&this.prevAudioNode.context===this.destinationNode.context&&this.prevAudioNode.connect(this.destinationNode)}catch(e){l.e(this.TAG,\"error in connecting to destination node\",e)}})}removePluginInternal(e){return c(this,null,function*(){var i;let t=(i=e.getName)==null?void 0:i.call(e);if(!this.pluginsMap.get(t)){l.w(this.TAG,`plugin - ${t} not found to remove.`);return}l.i(this.TAG,`removing plugin ${t}`),this.pluginsMap.delete(t),e.stop(),this.analytics.removed(t)})}};function bo(a,e){let t=a.toLowerCase(),i=S.TracksErrors.GenericTrack(\"TRACK\",a);return t.includes(\"device not found\")?i=S.TracksErrors.DeviceNotAvailable(\"TRACK\",e,a):t.includes(\"permission denied\")&&(i=S.TracksErrors.CantAccessCaptureDevice(\"TRACK\",e,a)),i}function Ao(a,e=\"\"){if(webrtc_adapter__WEBPACK_IMPORTED_MODULE_4__[\"default\"].browserDetails.browser===\"chrome\"&&a.name===\"NotAllowedError\"&&a.message.includes(\"denied by system\"))return S.TracksErrors.SystemDeniedPermission(\"TRACK\",e,a.message);if(webrtc_adapter__WEBPACK_IMPORTED_MODULE_4__[\"default\"].browserDetails.browser===\"firefox\"&&a.name===\"NotFoundError\"){let i=S.TracksErrors.SystemDeniedPermission(\"TRACK\",e,a.message);return i.description=`Capture device is either blocked at Operating System level or not available - ${e}`,i}switch(a.name){case\"OverconstrainedError\":return S.TracksErrors.OverConstrained(\"TRACK\",e,a.constraint);case\"NotAllowedError\":return S.TracksErrors.CantAccessCaptureDevice(\"TRACK\",e,a.message);case\"NotFoundError\":return S.TracksErrors.DeviceNotAvailable(\"TRACK\",e,a.message);case\"NotReadableError\":return S.TracksErrors.DeviceInUse(\"TRACK\",e,a.message);case\"TypeError\":return S.TracksErrors.NothingToReturn(\"TRACK\",a.message);default:return bo(a.message,e)}}function _e(a,e){let t=Ao(a,e);return t.addNativeError(a),t}function Dr(a){return c(this,null,function*(){try{let e=a?a.toConstraints():!1;return e&&typeof e==\"object\"&&(a!=null&&a.deviceId)&&(e.deviceId={exact:a.deviceId}),(yield navigator.mediaDevices.getUserMedia({audio:e})).getAudioTracks()[0]}catch(e){throw _e(e,\"audio\")}})}function wr(a){return c(this,null,function*(){try{let e=a?a.toConstraints():!1;return e&&typeof e==\"object\"&&(a!=null&&a.deviceId)&&(e.deviceId={exact:a.deviceId}),(yield navigator.mediaDevices.getUserMedia({video:e})).getVideoTracks()[0]}catch(e){throw _e(e,\"video\")}})}function ve(a){return\"canvas\"in a||a.label===\"MediaStreamAudioDestinationNode\"||a.label===\"\"}var hi=(a,e)=>{if(!navigator.permissions){l.d(\"Permissions API not supported\");return}navigator.permissions.query({name:a}).then(t=>{t.onchange=()=>{e(t.state)}}).catch(t=>{l.e(`${a} not supported`,t.message)})};var Io=32e3;var ce={audioContext:null,getAudioContext(){return this.audioContext||(this.audioContext=di?new AudioContext:new AudioContext({sampleRate:Io})),this.audioContext},resumeContext(){return c(this,null,function*(){try{return yield this.getAudioContext().resume()}catch(a){l.e(\"AudioContext\",a)}})}},_r=(r=>(r.SPEAKERPHONE=\"SPEAKERPHONE\",r.WIRED=\"WIRED\",r.BLUETOOTH=\"BLUETOOTH\",r.EARPIECE=\"EARPIECE\",r))(_r||{}),Nr=a=>{if(!a)return l.w(\"[DeviceManager]:\",\"No device label provided\"),\"SPEAKERPHONE\";let e=a.toLowerCase();return e.includes(\"speakerphone\")?\"SPEAKERPHONE\":e.includes(\"wired\")?\"WIRED\":/airpods|buds|wireless|bluetooth/gi.test(e)?\"BLUETOOTH\":e.includes(\"earpiece\")?\"EARPIECE\":\"SPEAKERPHONE\"};var Ne=class{constructor(e=1/0){this.capacity=e;this.storage=[]}size(){return this.storage.length}toList(){return this.storage.slice(0)}enqueue(e){this.size()===this.capacity&&this.dequeue(),this.storage.push(e)}dequeue(){return this.storage.shift()}aggregate(e){return e(this.storage)}};var Bs=`(function workerSetup() {\n  function ticker() {\n    self.postMessage('tick');\n  }\n  self.onmessage = function (event) {\n    const [data, time] = event.data;\n    switch (data) {\n      case 'start':\n        setTimeout(ticker, time);\n        break;\n      default:\n        break;\n    }\n  };\n})()`;function J(a){if(a<0)throw Error(\"`ms` should be a positive integer\");return new Promise(e=>{setTimeout(e,a)})}function Oe(a){if(a<0)throw Error(\"`ms` should be a positive integer\");if(typeof Worker==\"undefined\")return J(a);let e=new Worker(URL.createObjectURL(new Blob([Bs],{type:\"application/javascript\"})));return e.postMessage([\"start\",a]),new Promise(t=>{e.onmessage=i=>{i.data===\"tick\"&&(t(),e.terminate())}})}function Vs(){if(typeof Worker==\"undefined\")return{sleep:e=>J(e)};let a=new Worker(URL.createObjectURL(new Blob([Bs],{type:\"application/javascript\"})));return{sleep:e=>(a.postMessage([\"start\",e]),new Promise(t=>{a.onmessage=i=>{i.data===\"tick\"&&t()}}))}}function mi(a,e=300){let t;return function(...i){clearTimeout(t),t=void 0;let r=this;t=setTimeout(()=>{a.apply(r,i)},e)}}var Ro=35,Ho=5,Si=class{constructor(e,t,i){this.track=e;this.audioLevelEvent=t;this.silenceEvent=i;this.TAG=\"[TrackAudioLevelMonitor]\";this.audioLevel=0;this.isMonitored=!1;this.interval=100;this.historyInterval=700;this.history=new Ne(this.historyInterval/this.interval);this.detectSilence=()=>c(this,null,function*(){let i=0;for(;this.isMonitored;){if(this.track.enabled)if(this.isSilentThisInstant()){if(i++,i>50){this.silenceEvent.publish({track:this.track});break}}else break;yield J(20)}});try{let r=new MediaStream([this.track.nativeTrack]);this.analyserNode=this.createAnalyserNodeForStream(r);let s=this.analyserNode.frequencyBinCount;this.dataArray=new Uint8Array(s)}catch(r){l.w(this.TAG,\"Unable to initialize AudioContext\",r)}}start(){this.stop(),this.isMonitored=!0,l.d(this.TAG,\"Starting track Monitor\",`${this.track}`),this.loop().then(()=>l.d(this.TAG,\"Stopping track Monitor\",`${this.track}`))}stop(){if(!this.analyserNode){l.d(this.TAG,\"AudioContext not initialized\");return}this.sendAudioLevel(0),this.isMonitored=!1}loop(){return c(this,null,function*(){for(;this.isMonitored;)this.sendAudioLevel(this.getMaxAudioLevelOverPeriod()),yield J(this.interval)})}sendAudioLevel(e=0){if(e=e>Ro?e:0,Math.abs(this.audioLevel-e)>Ho){this.audioLevel=e;let i={track:this.track,audioLevel:this.audioLevel};this.audioLevelEvent.publish(i)}}getMaxAudioLevelOverPeriod(){if(!this.analyserNode){l.d(this.TAG,\"AudioContext not initialized\");return}let e=this.calculateAudioLevel();return e!==void 0&&this.history.enqueue(e),this.history.aggregate(t=>Math.max(...t))}calculateAudioLevel(){if(!this.analyserNode||!this.dataArray){l.d(this.TAG,\"AudioContext not initialized\");return}this.analyserNode.getByteTimeDomainData(this.dataArray);let e=.009,t=e;for(let s of this.dataArray)t=Math.max(t,(s-128)/128);let i=(Math.log(e)-Math.log(t))/Math.log(e);return Math.ceil(Math.min(Math.max(i*100,0),100))}isSilentThisInstant(){if(!this.analyserNode||!this.dataArray){l.d(this.TAG,\"AudioContext not initialized\");return}return this.analyserNode.getByteTimeDomainData(this.dataArray),this.dataArray.every(e=>e===128||e===0)}createAnalyserNodeForStream(e){let t=ce.getAudioContext(),i=t.createMediaStreamSource(e),r=t.createAnalyser();return r.fftSize=2048,i.connect(r),r}};var Or=(t=>(t.SIP=\"sip\",t.REGULAR=\"regular\",t))(Or||{});var Fs=(n=>(n.NONE=\"none\",n.INITIALISED=\"initialised\",n.STARTED=\"started\",n.PAUSED=\"paused\",n.RESUMED=\"resumed\",n.STOPPED=\"stopped\",n.FAILED=\"failed\",n))(Fs||{});var Gs=(t=>(t.DVR=\"dvr\",t.NO_DVR=\"no-dvr\",t))(Gs||{}),Ws=(i=>(i.REGULAR=\"regular\",i.SCREEN=\"screen\",i.COMPOSITE=\"composite\",i))(Ws||{}),$s=(r=>(r.INITIALISED=\"initialised\",r.STARTED=\"started\",r.STOPPED=\"stopped\",r.FAILED=\"failed\",r))($s||{}),Ks=(e=>(e.CAPTION=\"caption\",e))(Ks||{});var We={f:\"high\",h:\"medium\",q:\"low\"};var xr=(t=>(t.VOICE=\"voice\",t.MUSIC=\"music\",t))(xr||{});var qs=(i=>(i.videoInput=\"videoInput\",i.audioInput=\"audioInput\",i.audioOutput=\"audioOutput\",i))(qs||{});var Q=class{constructor(){this._volume=1;this._codec=\"opus\";this._maxBitrate=32;this._deviceId=\"default\";this._audioMode=\"voice\";this._advanced=[{autoGainControl:{exact:!0}},{noiseSuppression:{exact:!0}},{highpassFilter:{exact:!0}},{audioMirroring:{exact:!0}}]}volume(e){if(!(0<=e&&e<=1))throw Error(\"volume can only be in range [0.0, 1.0]\");return this._volume=e,this}codec(e){return this._codec=e,this}maxBitrate(e){if(e&&e<=0)throw Error(\"maxBitrate should be >= 1\");return this._maxBitrate=this._audioMode===\"music\"?320:e,this}deviceId(e){return this._deviceId=e,this}audioMode(e=\"voice\"){return this._audioMode=e,this._audioMode===\"music\"?this._maxBitrate=320:this._maxBitrate=32,this}advanced(e){return this._advanced=e,this}build(){return new $e(this._volume,this._codec,this._maxBitrate,this._deviceId,this._advanced,this._audioMode)}},$e=class{constructor(e,t,i,r,s,o){this.volume=e,this.codec=t,this.maxBitrate=i,this.deviceId=r,this.advanced=s,this.audioMode=o,this.audioMode===\"music\"?this.maxBitrate=320:this.maxBitrate=32}toConstraints(){return{deviceId:this.deviceId,advanced:this.audioMode===\"music\"?[]:this.advanced}}toAnalyticsProperties(){return{audio_bitrate:this.maxBitrate,audio_codec:this.codec}}};var q=class{constructor(){this._width=320;this._height=180;this._codec=\"vp8\";this._maxFramerate=30;this._maxBitrate=150;this._advanced=[]}setWidth(e){return this._width=e,this}setHeight(e){return this._height=e,this}codec(e){return this._codec=e,this}maxFramerate(e){if(e&&e<=0)throw Error(\"maxFramerate should be >= 1\");return this._maxFramerate=e,this}maxBitrate(e,t=!0){if(typeof e==\"number\"&&e<=0)throw Error(\"maxBitrate should be >= 1\");return this._maxBitrate=e,!this._maxBitrate&&t&&(this._maxBitrate=15e4),this}deviceId(e){return this._deviceId=e,this}advanced(e){return this._advanced=e,this}facingMode(e){return this._facingMode=e,this}build(){return new Ke(this._width,this._height,this._codec,this._maxFramerate,this._deviceId,this._advanced,this._maxBitrate,this._facingMode)}},Ke=class{constructor(e,t,i,r,s,o,n,d){this.width=e,this.height=t,this.codec=i,this.maxFramerate=r,this.maxBitrate=n,this.deviceId=s,this.advanced=o,this.facingMode=d}toConstraints(e){let t=\"ideal\";e&&(t=\"max\");let i=this.improviseConstraintsAspect();return{width:{[t]:i.width},height:{[t]:i.height},frameRate:this.maxFramerate,deviceId:this.deviceId,facingMode:this.facingMode}}toAnalyticsProperties(){return{width:this.width,height:this.height,video_bitrate:this.maxBitrate,framerate:this.maxFramerate,video_codec:this.codec,facingMode:this.facingMode}}improviseConstraintsAspect(){return Mt()&&this.height&&this.width&&this.height>this.width?{width:this.height,height:this.width}:{width:this.width,height:this.height}}};var xe=class{constructor(){this._video=new q().build();this._audio=new Q().build();this._screen=new q().build();this._simulcast=!1}video(e){return this._video=e,this}audio(e){return this._audio=e,this}screen(e){return this._screen=e,this}simulcast(e){return this._simulcast=e,this}build(){if(this._audio===null&&this._video===null)throw S.TracksErrors.NothingToReturn(\"TRACK\");if(this._video===null&&this._simulcast)throw S.TracksErrors.InvalidVideoSettings(\"TRACK\",\"Cannot enable simulcast when no video settings are provided\");return new Ze(this._video,this._audio,this._simulcast,this._screen||void 0)}},Ze=class{constructor(e,t,i,r=null){this.video=e,this.audio=t,this.simulcast=i,this.screen=r}toAnalyticsProperties(){let e={audio_enabled:this.audio!==null,video_enabled:this.video!==null};return this.audio&&(e=m(m({},this.audio.toAnalyticsProperties()),e)),this.video&&(e=m(m({},this.video.toAnalyticsProperties()),e)),e}};function Js(a,e){return function(i){return!lodash_isequal__WEBPACK_IMPORTED_MODULE_3___default()(a[i],e[i])}}var de=class a extends we{constructor(t,i,r,s,o=new Q().build(),n){super(t,i,r);this.eventBus=s;this.room=n;this.TAG=\"[HMSLocalAudioTrack]\";this.tracksCreated=new Set;this.isPublished=!1;this.handleVisibilityChange=()=>c(this,null,function*(){if(!this.shouldReacquireTrack()){l.d(this.TAG,`visibiltiy: ${document.visibilityState}`,`${this}`);return}if(document.visibilityState===\"hidden\")this.eventBus.analytics.publish(this.sendInterruptionEvent({started:!0,reason:\"visibility-change\"}));else{l.d(this.TAG,\"On visibile replacing track as it is not publishing\");try{yield this.replaceTrackWith(this.settings)}catch(t){this.eventBus.error.publish(t)}this.eventBus.analytics.publish(this.sendInterruptionEvent({started:!1,reason:\"visibility-change\"}))}});this.trackPermissions=()=>{hi(\"microphone\",t=>{this.eventBus.analytics.publish(y.permissionChange(this.type,t)),t===\"denied\"&&this.eventBus.localAudioEnabled.publish({enabled:!1,track:this})})};this.handleTrackMute=()=>{l.d(this.TAG,\"muted natively\");let t=document.visibilityState===\"hidden\"?\"visibility-change\":\"incoming-call\";this.eventBus.analytics.publish(this.sendInterruptionEvent({started:!0,reason:t})),this.eventBus.localAudioEnabled.publish({enabled:!1,track:this})};this.handleTrackUnmute=()=>c(this,null,function*(){l.d(this.TAG,\"unmuted natively\");let t=document.visibilityState===\"hidden\"?\"visibility-change\":\"incoming-call\";this.eventBus.analytics.publish(this.sendInterruptionEvent({started:!1,reason:t}));try{yield this.setEnabled(this.enabled,!0),this.eventBus.localAudioUnmutedNatively.publish()}catch(i){this.eventBus.error.publish(i)}});this.replaceSenderTrack=()=>c(this,null,function*(){if(!this.transceiver||this.transceiver.direction!==\"sendonly\"){l.d(this.TAG,`transceiver for ${this.trackId} not available or not connected yet`);return}yield this.transceiver.sender.replaceTrack(this.processedTrack||this.nativeTrack)});this.shouldReacquireTrack=()=>ve(this.nativeTrack)||this.isTrackNotPublishing();this.handleSettingsChange=t=>c(this,null,function*(){let i=this.stream,r=Js(t,this.settings);(r(\"maxBitrate\")||r(\"audioMode\"))&&t.maxBitrate&&(yield i.setMaxBitrateAndFramerate(this,t)),(r(\"advanced\")||r(\"audioMode\"))&&(yield this.replaceTrackWith(t))});this.handleDeviceChange=(t,i=!1)=>c(this,null,function*(){if(Js(t,this.settings)(\"deviceId\")){this.manuallySelectedDeviceId=i?this.manuallySelectedDeviceId:t.deviceId,l.d(this.TAG,\"device change\",\"manual selection:\",this.manuallySelectedDeviceId,\"new device:\",t.deviceId),yield this.replaceTrackWith(t);let s=this.nativeTrack.getSettings().groupId;!i&&t.deviceId&&(X.updateSelection(\"audioInput\",{deviceId:t.deviceId,groupId:s}),this.eventBus.deviceChange.publish({isUserSelection:!0,type:\"audioInput\",selection:{deviceId:t.deviceId,groupId:s}}))}});t.tracks.push(this),this.addTrackEventListeners(i),this.trackPermissions(),this.settings=o,o.deviceId!==i.getSettings().deviceId&&!ve(i)&&(this.settings=this.buildNewSettings({deviceId:i.getSettings().deviceId})),this.pluginsManager=new Pt(this,s,n),this.setFirstTrackId(i.id),r===\"regular\"&&document.addEventListener(\"visibilitychange\",this.handleVisibilityChange)}clone(t){let i=this.nativeTrack.clone();t.nativeStream.addTrack(i);let r=new a(t,i,this.source,this.eventBus,this.settings,this.room);return r.peerId=this.peerId,this.pluginsManager.pluginsMap.size>0&&this.pluginsManager.pluginsMap.forEach(s=>{r.addPlugin(s).catch(o=>l.e(this.TAG,\"Plugin add failed while migrating\",s,o))}),r}getManuallySelectedDeviceId(){return this.manuallySelectedDeviceId}resetManuallySelectedDeviceId(){this.manuallySelectedDeviceId=void 0}updateTrack(t){return c(this,null,function*(){t.enabled=this.enabled,yield this.stream.replaceStreamTrack(this.nativeTrack,t),this.nativeTrack=t,yield this.replaceSenderTrack(),!!this.audioLevelMonitor&&this.initAudioLevelMonitor()})}replaceTrackWith(t){return c(this,null,function*(){let i=this.nativeTrack;i==null||i.stop(),this.removeTrackEventListeners(i),this.tracksCreated.forEach(r=>r.stop()),this.tracksCreated.clear();try{let r=yield Dr(t);this.addTrackEventListeners(r),this.tracksCreated.add(r),l.d(this.TAG,\"replaceTrack, Previous track stopped\",i,\"newTrack\",r),yield this.updateTrack(r)}catch(r){let s=yield Dr(this.settings);throw this.addTrackEventListeners(s),this.tracksCreated.add(s),yield this.updateTrack(s),this.isPublished&&this.eventBus.analytics.publish(y.publish({error:r})),r}try{yield this.pluginsManager.reprocessPlugins()}catch(r){this.eventBus.audioPluginFailed.publish(r)}})}setEnabled(t,i=!1){return c(this,null,function*(){t===this.enabled&&!i||(t&&this.shouldReacquireTrack()&&(yield this.replaceTrackWith(this.settings)),yield ne(a.prototype,this,\"setEnabled\").call(this,t),t&&(this.settings=this.buildNewSettings({deviceId:this.nativeTrack.getSettings().deviceId})),this.eventBus.localAudioEnabled.publish({enabled:t,track:this}))})}isPublishedTrackId(t){return this.publishedTrackId===t}setSettings(t,i=!1){return c(this,null,function*(){let r=this.buildNewSettings(t);if(ve(this.nativeTrack)){this.settings=r;return}yield this.handleDeviceChange(r,i),yield this.handleSettingsChange(r),this.settings=r})}getPlugins(){return this.pluginsManager.getPlugins()}addPlugin(t){return c(this,null,function*(){return this.pluginsManager.addPlugin(t)})}removePlugin(t){return c(this,null,function*(){return this.pluginsManager.removePlugin(t)})}validatePlugin(t){return this.pluginsManager.validatePlugin(t)}setProcessedTrack(t){return c(this,null,function*(){t?t!==this.processedTrack&&(this.processedTrack=t):this.processedTrack=void 0,yield this.replaceSenderTrack()})}initAudioLevelMonitor(){this.audioLevelMonitor&&this.destroyAudioLevelMonitor(),l.d(this.TAG,\"Monitor Audio Level for\",this,this.getMediaTrackSettings().deviceId),this.audioLevelMonitor=new Si(this,this.eventBus.trackAudioLevelUpdate,this.eventBus.localAudioSilence),this.audioLevelMonitor.start(),this.audioLevelMonitor.detectSilence()}destroyAudioLevelMonitor(){var t;(t=this.audioLevelMonitor)==null||t.stop(),this.audioLevelMonitor=void 0}cleanup(){return c(this,null,function*(){var t;ne(a.prototype,this,\"cleanup\").call(this),yield this.pluginsManager.cleanup(),yield this.pluginsManager.closeContext(),this.transceiver=void 0,(t=this.processedTrack)==null||t.stop(),this.tracksCreated.forEach(i=>i.stop()),this.tracksCreated.clear(),this.isPublished=!1,this.destroyAudioLevelMonitor(),document.removeEventListener(\"visibilitychange\",this.handleVisibilityChange)})}getTrackIDBeingSent(){return this.processedTrack?this.processedTrack.id:this.nativeTrack.id}getTrackBeingSent(){return this.processedTrack||this.nativeTrack}addTrackEventListeners(t){t.addEventListener(\"mute\",this.handleTrackMute),t.addEventListener(\"unmute\",this.handleTrackUnmute)}removeTrackEventListeners(t){t.removeEventListener(\"mute\",this.handleTrackMute),t.removeEventListener(\"unmute\",this.handleTrackUnmute)}buildNewSettings(t){let{volume:i,codec:r,maxBitrate:s,deviceId:o,advanced:n,audioMode:d}=m(m({},this.settings),t);return new $e(i,r,s,o,n,d)}};var ie=class a extends we{setEnabled(e){return c(this,null,function*(){e!==this.enabled&&(yield ne(a.prototype,this,\"setEnabled\").call(this,e),yield this.subscribeToAudio(e))})}};var et=class extends De{constructor(t,i,r){super(t,i,r);this.type=\"video\";this.sinkCount=0;this.handleTrackUnmute=()=>{this.getSinks().forEach(t=>this.reTriggerPlay({videoElement:t}))};this.reTriggerPlay=({videoElement:t})=>{setTimeout(()=>{t.play().catch(i=>{l.w(\"[HMSVideoTrack]\",\"failed to play\",i.message)})},0)};if(i.kind!==\"video\")throw new Error(\"Expected 'track' kind = 'video'\")}setVideoHandler(t){this.videoHandler=t}hasSinks(){return this.sinkCount>0}getSinks(){return this.videoHandler.getVideoElements()||[]}attach(t){this.videoHandler.addVideoElement(t)}detach(t){this.videoHandler.removeVideoElement(t)}addSink(t){this.addSinkInternal(t,this.nativeTrack)}removeSink(t){t.srcObject!==null&&(t.srcObject=null,this.reduceSinkCount())}cleanup(){super.cleanup(),this.videoHandler.cleanup()}addSinkInternal(t,i){let r=t.srcObject;if(r!==null&&r instanceof MediaStream){let o=r.getVideoTracks()[0];if((o==null?void 0:o.id)===i.id){if(!o.muted&&o.readyState===\"live\")return;this.reduceSinkCount()}else this.reduceSinkCount()}this.addPropertiesToElement(t);let s=new MediaStream([i]);t.srcObject=s,this.reTriggerPlay({videoElement:t}),this.sinkCount++}reduceSinkCount(){this.sinkCount>0&&this.sinkCount--}addPropertiesToElement(t){Cs||(t.autoplay=!0),t.playsInline=!0,t.muted=!0,t.controls=!1}};var bt={none:-1,low:0,medium:1,high:2},Lo=.5,Qs=(a,e)=>{let t=\"high\",i=e.width>e.height?\"width\":\"height\",r=[...a].sort((o,n)=>bt[o.layer]-bt[n.layer]),s=e[i]*((window==null?void 0:window.devicePixelRatio)||1);for(let o=0;o<r.length;o++){let{resolution:n,layer:d}=r[o],u=n[i];if(s<=u){t=d;break}else{let p=r[o+1],h=p?p.resolution[i]:Number.POSITIVE_INFINITY;if((s-u)/(h-u)<Lo){t=d;break}}}return t};var Ur=class{constructor(){this.TAG=\"[HMSIntersectionObserverWrapper]\";this.listeners=new WeakMap;this.observe=(e,t)=>{var i;this.createObserver(),this.unobserve(e),(i=this.intersectionObserver)==null||i.observe(e),this.listeners.set(e,t)};this.unobserve=e=>{var t;(t=this.intersectionObserver)==null||t.unobserve(e),this.listeners.delete(e)};this.createObserver=()=>{this.isSupported()&&!this.intersectionObserver&&(this.intersectionObserver=new IntersectionObserver(this.handleIntersection))};this.handleIntersection=e=>{var t;for(let i of e)(t=this.listeners.get(i.target))==null||t(i)};this.createObserver()}isSupported(){let e=U&&typeof window.IntersectionObserver!=\"undefined\";return e||l.w(this.TAG,\"IntersectionObserver is not supported, fallback will be used instead\"),e}},zs=new Ur;var Br=class{constructor(){this.TAG=\"[HMSResizeObserverWrapper]\";this.listeners=new WeakMap;this.observe=(e,t,i={box:\"border-box\"})=>{var r;this.createObserver(),this.unobserve(e),(r=this.resizeObserver)==null||r.observe(e,i),this.listeners.set(e,t)};this.unobserve=e=>{var t;(t=this.resizeObserver)==null||t.unobserve(e),this.listeners.delete(e)};this.createObserver=()=>{this.isSupported()&&!this.resizeObserver&&(this.resizeObserver=new ResizeObserver(mi(this.handleResize,300)))};this.handleResize=e=>{var t;for(let i of e)(t=this.listeners.get(i.target))==null||t(i)};this.createObserver()}isSupported(){let e=U&&typeof window.ResizeObserver!=\"undefined\";return e||l.w(this.TAG,\"Resize Observer is not supported\"),e}},Ys=new Br;var tt=class{constructor(e){this.track=e;this.TAG=\"[VideoElementManager]\";this.videoElements=new Set;this.entries=new WeakMap;this.handleIntersection=e=>c(this,null,function*(){let t=getComputedStyle(e.target).visibility===\"visible\";this.track.enabled&&(e.isIntersecting&&t||!document.contains(e.target))?(l.d(this.TAG,\"add sink intersection\",`${this.track}`,this.id),this.entries.set(e.target,e.boundingClientRect),yield this.selectMaxLayer(),yield this.track.addSink(e.target)):(l.d(this.TAG,\"remove sink intersection\",`${this.track}`,this.id),yield this.track.removeSink(e.target))});this.handleResize=e=>c(this,null,function*(){!this.track.enabled||!(this.track instanceof O)||(this.entries.set(e.target,e.contentRect),yield this.selectMaxLayer())});this.cleanup=()=>{this.videoElements.forEach(e=>{var t,i;e.srcObject=null,(t=this.resizeObserver)==null||t.unobserve(e),(i=this.intersectionObserver)==null||i.unobserve(e)}),this.videoElements.clear(),this.resizeObserver=void 0,this.intersectionObserver=void 0};this.init(),this.id=(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])()}updateSinks(e=!1){for(let t of this.videoElements)this.track.enabled?this.track.addSink(t,e):this.track.removeSink(t,e)}addVideoElement(e){return c(this,null,function*(){var t;this.videoElements.has(e)||(this.init(),l.d(this.TAG,`Adding video element for ${this.track}`,this.id),this.videoElements.add(e),this.videoElements.size>=10&&l.w(this.TAG,`${this.track}`,`the track is added to ${this.videoElements.size} video elements, while this may be intentional, it's likely that there is a bug leading to unnecessary creation of video elements in the UI`),(t=this.intersectionObserver)!=null&&t.isSupported()?this.intersectionObserver.observe(e,this.handleIntersection):U&&(this.isElementInViewport(e)?this.track.addSink(e):this.track.removeSink(e)),this.resizeObserver?this.resizeObserver.observe(e,this.handleResize):this.track instanceof O&&(yield this.track.setPreferredLayer(this.track.getPreferredLayer())))})}removeVideoElement(e){var t,i;this.track.removeSink(e),this.videoElements.delete(e),this.entries.delete(e),(t=this.resizeObserver)==null||t.unobserve(e),(i=this.intersectionObserver)==null||i.unobserve(e),l.d(this.TAG,`Removing video element for ${this.track}`)}getVideoElements(){return Array.from(this.videoElements)}init(){U&&(this.resizeObserver=Ys,this.intersectionObserver=zs)}isElementInViewport(e){let t=e.offsetTop,i=e.offsetLeft,r=e.offsetWidth,s=e.offsetHeight,{hidden:o}=e,{opacity:n,display:d}=getComputedStyle(e);for(;e.offsetParent;)e=e.offsetParent,t+=e.offsetTop,i+=e.offsetLeft;return t<window.pageYOffset+window.innerHeight&&i<window.pageXOffset+window.innerWidth&&t+s>window.pageYOffset&&i+r>window.pageXOffset&&!o&&(n!==\"\"?parseFloat(n)>0:!0)&&d!==\"none\"}selectMaxLayer(){return c(this,null,function*(){if(!(this.track instanceof O)||this.videoElements.size===0)return;let e;for(let t of this.videoElements){let i=this.entries.get(t);if(!i)continue;let{width:r,height:s}=i;if(r===0||s===0)continue;let o=Qs(this.track.getSimulcastDefinitions(),{width:r,height:s});e?e=bt[o]>bt[e]?o:e:e=o}e&&(l.d(this.TAG,`selecting max layer ${e} for the track`,`${this.track}`),yield this.track.setPreferredLayer(e))})}};var Vr=(t=>(t.TRANSFORM=\"TRANSFORM\",t.ANALYZE=\"ANALYZE\",t))(Vr||{}),Fr=(t=>(t[\"2D\"]=\"2d\",t.WEBGL=\"webgl\",t.WEBGL2=\"webgl2\",t))(Fr||{});var At=class{constructor(){this.total=0;this.count=0}add(e){this.count++,this.total+=e}getAvg(){return Math.floor(this.total/this.count)}reset(){this.total=0,this.count=0}};var it=class{constructor(e){this.eventBus=e;this.TAG=\"[VideoPluginsAnalytics]\";this.initTime={},this.preProcessingAvgs=new At,this.addedTimestamps={},this.processingAvgs={},this.pluginAdded={},this.pluginInputFrameRate={},this.pluginFrameRate={}}added(e,t,i){this.pluginAdded[e]=!0,this.addedTimestamps[e]=Date.now(),this.initTime[e]=0,this.processingAvgs[e]=new At,t&&(this.pluginInputFrameRate[e]=t,this.pluginFrameRate[e]=i||t),this.eventBus.analytics.publish(me.added(e,this.addedTimestamps[e]))}removed(e){var t;if(this.pluginAdded[e]){let i={pluginName:e,duration:Math.floor((Date.now()-this.addedTimestamps[e])/1e3),loadTime:this.initTime[e],avgPreProcessingTime:this.preProcessingAvgs.getAvg(),avgProcessingTime:(t=this.processingAvgs[e])==null?void 0:t.getAvg(),inputFrameRate:this.pluginInputFrameRate[e],pluginFrameRate:this.pluginFrameRate[e]};this.eventBus.analytics.publish(me.stats(i)),this.clean(e)}}failure(e,t){this.pluginAdded[e]&&(this.eventBus.analytics.publish(me.failure(e,t)),this.clean(e))}initWithTime(e,t){return c(this,null,function*(){if(this.initTime[e]){l.i(this.TAG,`Plugin Already loaded ${e}, time it took: ${this.initTime[e]}`);return}let i;try{i=yield this.timeInMs(t),l.i(this.TAG,`Time taken for Plugin ${e} initialization : ${i}`)}catch(r){let s=S.MediaPluginErrors.InitFailed(\"VIDEO_PLUGINS\",`failed during initialization of plugin${r.message||r}`);throw l.e(this.TAG,s),this.failure(e,s),s}i&&(this.initTime[e]=i)})}preProcessWithTime(e){return c(this,null,function*(){let t=yield this.timeInMs(e);this.preProcessingAvgs.add(t)})}processWithTime(e,t){return c(this,null,function*(){var r;let i;try{i=yield this.timeInMs(t)}catch(s){let o=S.MediaPluginErrors.ProcessingFailed(\"VIDEO_PLUGINS\",`Failed during processing of plugin${s.message||s}`);throw l.e(this.TAG,o),this.failure(e,o),o}i&&((r=this.processingAvgs[e])==null||r.add(i))})}timeInMs(e){return c(this,null,function*(){let t=Date.now();return yield e(),Math.floor(Date.now()-t)})}clean(e){delete this.addedTimestamps[e],delete this.initTime[e],delete this.processingAvgs[e],delete this.pluginAdded[e],delete this.pluginInputFrameRate[e],delete this.pluginFrameRate[e]}};var Xs=24,wo=320,_o=240,It=class{constructor(e,t){this.TAG=\"[VideoPluginsManager]\";this.pluginsLoopRunning=!1;this.pluginsLoopState=\"paused\";this.pluginAddInProgress=!1;this.reusableWorker=Vs();this.hmsTrack=e,this.pluginsMap=new Map,this.pluginNumFramesToSkip={},this.pluginNumFramesSkipped={},this.analytics=new it(t),this.canvases=new Array}getPlugins(){return Array.from(this.pluginsMap.keys())}addPlugin(e,t){return c(this,null,function*(){var i;if(this.pluginAddInProgress){let r=(i=e.getName)==null?void 0:i.call(e);if(!r||r===\"\"){l.w(\"no name provided by the plugin\");return}let s=S.MediaPluginErrors.AddAlreadyInProgress(\"VIDEO_PLUGINS\",\"Add Plugin is already in Progress\");throw this.analytics.failure(r,s),l.w(\"can't add another plugin when previous add is in progress\"),s}this.pluginAddInProgress=!0;try{yield this.addPluginInternal(e,t)}finally{this.pluginAddInProgress=!1}})}addPluginInternal(e,t){return c(this,null,function*(){var o,n;let i=(o=e.getName)==null?void 0:o.call(e);if(!i||i===\"\"){l.w(\"no name provided by the plugin\");return}if(this.pluginsMap.has(i)){l.w(this.TAG,`plugin - ${e.getName()} already added.`);return}let r=this.hmsTrack.getMediaTrackSettings().frameRate||Xs,s=0;t&&t>0?(l.i(this.TAG,`adding plugin ${e.getName()} with framerate ${t}`),t<r&&(s=Math.ceil(r/t)-1),this.analytics.added(i,r,t)):(l.i(this.TAG,`adding plugin ${e.getName()}`),this.analytics.added(i,r)),l.i(this.TAG,\"numFrames to skip processing\",s),this.pluginNumFramesToSkip[i]=s,this.pluginNumFramesSkipped[i]=s,this.validateAndThrow(i,e);try{if(yield this.analytics.initWithTime(i,()=>c(this,null,function*(){return yield e.init()})),this.pluginsMap.set(i,e),this.pluginsMap.size+1>this.canvases.length)for(let d=this.canvases.length;d<=this.pluginsMap.size;d++)this.canvases[d]=document.createElement(\"canvas\");yield this.startPluginsLoop((n=e.getContextType)==null?void 0:n.call(e))}catch(d){throw l.e(this.TAG,\"failed to add plugin\",d),yield this.removePlugin(e),d}})}validatePlugin(e){return e.checkSupport()}validateAndThrow(e,t){let i=this.validatePlugin(t);if(i.isSupported)l.i(this.TAG,`plugin is supported,- ${t.getName()}`);else{let r;switch(i.errType){case\"PLATFORM_NOT_SUPPORTED\":throw r=S.MediaPluginErrors.PlatformNotSupported(\"VIDEO_PLUGINS\",\"platform not supported, see docs\"),this.analytics.failure(e,r),r;case\"DEVICE_NOT_SUPPORTED\":throw r=S.MediaPluginErrors.DeviceNotSupported(\"VIDEO_PLUGINS\",\"video device not supported, see docs\"),this.analytics.failure(e,r),r}}}removePlugin(e){return c(this,null,function*(){let t=e.getName();if(!this.pluginsMap.get(t)){l.w(this.TAG,`plugin - ${t} not found to remove.`);return}l.i(this.TAG,`removing plugin ${t}`),this.removePluginEntry(t),this.pluginsMap.size===0&&(l.i(this.TAG,\"No plugins left, stopping plugins loop\"),yield this.stopPluginsLoop()),e.stop(),this.analytics.removed(t)})}removePluginEntry(e){this.pluginsMap.delete(e),this.pluginNumFramesToSkip[e]&&delete this.pluginNumFramesToSkip[e],this.pluginNumFramesSkipped[e]&&delete this.pluginNumFramesSkipped[e]}waitForRestart(){return c(this,null,function*(){if(!(!this.pluginsLoopRunning||this.pluginsLoopState===\"running\"))for(;this.pluginsLoopState===\"paused\";)yield Oe(100)})}cleanup(){return c(this,null,function*(){var e;for(let t of this.pluginsMap.values())yield this.removePlugin(t);(e=this.outputTrack)==null||e.stop()})}initElementsAndStream(e){this.inputCanvas||(this.inputCanvas=document.createElement(\"canvas\")),this.outputCanvas=document.createElement(\"canvas\"),this.inputVideo||(this.inputVideo=document.createElement(\"video\")),this.inputCanvas.getContext(\"2d\"),this.outputCanvas.getContext(e||\"2d\");let t=this.outputCanvas.captureStream();this.outputTrack=t.getVideoTracks()[0]}startPluginsLoop(e){return c(this,null,function*(){if(!this.pluginsLoopRunning){this.initElementsAndStream(e),this.pluginsLoopRunning=!0;try{yield this.hmsTrack.setProcessedTrack(this.outputTrack)}catch(t){throw this.pluginsLoopRunning=!1,l.e(this.TAG,\"error in setting processed track\",t),t}this.pluginsLoop().then(()=>{l.d(this.TAG,\"processLoop stopped\")})}})}stopPluginsLoop(){return c(this,null,function*(){var e;this.pluginsLoopRunning=!1,yield this.hmsTrack.setProcessedTrack(void 0),this.resetCanvases(),(e=this.outputTrack)==null||e.stop(),this.inputVideo&&(this.inputVideo.srcObject=null,this.inputVideo=void 0)})}pluginsLoop(){return c(this,null,function*(){for(;this.pluginsLoopRunning;){let e=this.hmsTrack.getMediaTrackSettings().frameRate||Xs,t=Math.floor(1e3/e);if(!this.hmsTrack.enabled||this.hmsTrack.nativeTrack.readyState===\"ended\"){this.pluginsLoopState===\"running\"&&this.resetCanvases(),this.pluginsLoopState=\"paused\",yield this.reusableWorker.sleep(t);continue}let i=0;try{yield this.analytics.preProcessWithTime(()=>c(this,null,function*(){return yield this.doPreProcessing()}));let r=Date.now();yield this.processFramesThroughPlugins(),i=Math.floor(Date.now()-r),i>t&&(i=t)}catch(r){l.e(this.TAG,\"error in plugins loop\",r)}this.pluginsLoopState=\"running\",yield this.reusableWorker.sleep(t-i)}})}doPreProcessing(){return c(this,null,function*(){yield this.addTrackToVideo(),yield this.updateInputCanvas()})}processFramesThroughPlugins(){return c(this,null,function*(){this.canvases[0]=this.inputCanvas;let e=0;for(let t of this.pluginsMap.values()){let i=t.getName();if(t){try{let r=this.checkIfSkipRequired(i);if(t.getPluginType()===\"TRANSFORM\"){let s=(o,n)=>c(this,null,function*(){try{yield t.processVideoFrame(o,n,r)}catch(d){l.e(this.TAG,`error in processing plugin ${i}`,d)}});if(r)e===this.pluginsMap.size-1?yield s(this.canvases[e],this.outputCanvas):yield s(this.canvases[e],this.canvases[e+1]);else{let o=this.canvases[e],n=this.canvases[e+1];e===this.pluginsMap.size-1?yield this.analytics.processWithTime(i,()=>c(this,null,function*(){return s(o,this.outputCanvas)})):yield this.analytics.processWithTime(i,()=>c(this,null,function*(){return s(o,n)}))}}else t.getPluginType()===\"ANALYZE\"&&!r&&(yield this.analytics.processWithTime(i,()=>c(this,null,function*(){return yield t.processVideoFrame(this.inputCanvas)})))}catch(r){l.e(this.TAG,`error in processing plugin ${i}`,r),yield this.removePlugin(t)}e++}}})}addTrackToVideo(){return c(this,null,function*(){var t;if(!this.inputVideo)return;let e=this.inputVideo.srcObject;e!==null&&e instanceof MediaStream&&((t=e.getVideoTracks()[0])==null?void 0:t.id)===this.hmsTrack.nativeTrack.id||(this.inputVideo.pause(),this.inputVideo.srcObject=new MediaStream([this.hmsTrack.nativeTrack]),this.inputVideo.muted=!0,this.inputVideo.playsInline=!0,yield this.inputVideo.play())})}updateInputCanvas(){return c(this,null,function*(){if(!this.inputCanvas||!this.inputVideo)return;let{width:e=wo,height:t=_o}=this.hmsTrack.getMediaTrackSettings();this.inputCanvas.height!==t&&(this.inputCanvas.height=t),this.inputCanvas.width!==e&&(this.inputCanvas.width=e),this.inputCanvas.getContext(\"2d\").drawImage(this.inputVideo,0,0,e,t)})}resetCanvases(){if(!this.outputCanvas||!this.inputCanvas)return;let e=this.inputCanvas.getContext(\"2d\");e&&(e.fillStyle=\"rgb(0, 0, 0)\",e.fillRect(0,0,this.outputCanvas.width,this.outputCanvas.height)),this.canvases=[]}checkIfSkipRequired(e){let t=!1;return this.pluginNumFramesSkipped[e]<this.pluginNumFramesToSkip[e]?(this.pluginNumFramesSkipped[e]++,t=!0):(t=!1,this.pluginNumFramesSkipped[e]=0),t}};var gi=class{constructor(e,t){this.TAG=\"[MediaStreamPluginsManager]\";this.plugins=new Set,this.analytics=new it(e),this.room=t}addPlugins(e){e.forEach(t=>{var i;switch(t.getName()){case\"HMSEffectsPlugin\":if(!((i=this.room)!=null&&i.isEffectsEnabled)){let r=\"Effects Virtual Background is not enabled for this room\";if(this.plugins.size===0)throw Error(r);l.w(this.TAG,r);return}break;default:}this.plugins.add(t)})}removePlugins(e){e.forEach(t=>{t.stop(),this.analytics.removed(t.getName()),this.plugins.delete(t)})}applyPlugins(e){let t=e;for(let i of this.plugins){let r=i.getName();try{t=i.apply(t),this.analytics.added(r)}catch(s){this.analytics.failure(r,s),l.e(\"Could not apply plugin\",s,r)}}return t}getPlugins(){return Array.from(this.plugins).map(e=>e.getName())}cleanup(){return c(this,null,function*(){this.removePlugins(Array.from(this.plugins))})}};var No=[\"init_response_time\",\"ws_connect_time\",\"on_policy_change_time\",\"local_audio_track_time\",\"local_video_track_time\",\"peer_list_time\",\"room_state_time\",\"join_response_time\"],Ti=class{constructor(){this.eventPerformanceMeasures={}}start(e){performance.mark(e)}end(e){var t;try{this.eventPerformanceMeasures[e]=performance.measure(e,e),l.d(\"[HMSPerformanceTiming]\",e,(t=this.eventPerformanceMeasures[e])==null?void 0:t.duration)}catch(i){l.w(\"[AnalyticsTimer]\",`Error in measuring performance for event ${e}`,{error:i})}}getTimeTaken(e){var t;return(t=this.eventPerformanceMeasures[e])==null?void 0:t.duration}getTimes(...e){return[...No,...e].reduce((t,i)=>M(m({},t),{[i]:this.getTimeTaken(i)}),{})}cleanup(){this.eventPerformanceMeasures={}}};var Gr={isAudioMuted:!1,isVideoMuted:!1,audioInputDeviceId:\"default\",audioOutputDeviceId:\"default\",videoDeviceId:\"default\",audioMode:\"voice\"},Me,fi,be=class a{constructor(e,t,i,r,s){this.store=e;this.observer=t;this.deviceManager=i;this.eventBus=r;this.analyticsTimer=s;this.TAG=\"[LocalTrackManager]\";this.setScreenCaptureHandleConfig()}getTracksToPublish(){return c(this,arguments,function*(e=Gr){let t=this.getAVTrackSettings(e);if(!t)return[];let i=!!t.audio,r=!!t.video,s=[],{videoTrack:o,audioTrack:n}=yield this.updateCurrentLocalTrackSettings(t),d=(o==null?void 0:o.stream)||(n==null?void 0:n.stream),u=!!(o&&this.store.getTrackById(o.trackId)),p=!!(n&&this.store.getTrackById(n.trackId));if(u&&p)return[];let h={audio:i&&!n&&(e.isAudioMuted?\"empty\":!0),video:r&&!o&&(e.isVideoMuted?\"empty\":!0)};h.audio&&this.analyticsTimer.start(\"local_audio_track_time\"),h.video&&this.analyticsTimer.start(\"local_video_track_time\");try{l.d(this.TAG,\"Init Local Tracks\",{fetchTrackOptions:h}),s=yield this.getLocalTracks(h,t,d)}catch(T){s=yield this.retryGetLocalTracks(T,t,h,d)}return h.audio&&this.analyticsTimer.end(\"local_audio_track_time\"),h.video&&this.analyticsTimer.end(\"local_video_track_time\"),o&&r&&!u&&s.push(o),n&&i&&!p&&s.push(n),s})}getLocalTracks(){return c(this,arguments,function*(e={audio:!0,video:!0},t,i){try{let r=yield this.getNativeLocalTracks(e,t);return this.createHMSLocalTracks(r,t,i)}catch(r){throw this.eventBus.analytics.publish(y.publish({devices:this.deviceManager.getDevices(),error:r,settings:t})),r}})}getNativeLocalTracks(){return c(this,arguments,function*(e={audio:!1,video:!1},t){let i=new Ze(e.video===!0?t.video:null,e.audio===!0?t.audio:null,t.simulcast),r=[];return(i.audio||i.video)&&r.push(...yield this.getAVTracks(i)),r.push(...this.getEmptyTracks(e)),r})}optimizeScreenShareConstraint(e,t){return c(this,null,function*(){var s,o,n;if(typeof t.video==\"boolean\"||!((s=t.video)!=null&&s.width)||!((o=t.video)!=null&&o.height))return;let i=this.store.getPublishParams();if(!i||!((n=i.allowed)!=null&&n.includes(\"screen\")))return;let r=document.createElement(\"video\");r.srcObject=e,r.addEventListener(\"loadedmetadata\",()=>c(this,null,function*(){let{videoWidth:d,videoHeight:u}=r,p=i.screen,h=p.width*p.height,T=d/u,g=p.width/p.height;if(T>g){let f=t.video,E=T/g,v=Math.sqrt(E);d*u>h?(f.width=d/v,f.height=u/v):(f.height=u*v,f.width=d*v),yield e.getVideoTracks()[0].applyConstraints(f)}}))})}getLocalScreen(e,t=!1){return c(this,null,function*(){var T;let i=yield this.getOrDefaultScreenshareConfig(e),r=this.getScreenshareSettings(i.videoOnly),s={video:M(m({},r==null?void 0:r.video.toConstraints(!0)),{displaySurface:i.displaySurface}),preferCurrentTab:i.preferCurrentTab,selfBrowserSurface:i.selfBrowserSurface,surfaceSwitching:i.surfaceSwitching,systemAudio:i.systemAudio};if(r!=null&&r.audio){let g=(T=r==null?void 0:r.audio)==null?void 0:T.toConstraints();delete g.advanced,s.audio=M(m({},g),{autoGainControl:!1,noiseSuppression:!1,googAutoGainControl:!1,echoCancellation:!1})}else e!=null&&e.forceCurrentTab&&e.preferCurrentTab&&e.cropElement&&(s.audio={echoCancellation:!0,noiseSuppression:!0});let o;try{l.d(\"retrieving screenshare with \",{config:i},{constraints:s}),o=yield navigator.mediaDevices.getDisplayMedia(s),t&&(yield this.optimizeScreenShareConstraint(o,s))}catch(g){l.w(this.TAG,\"error in getting screenshare - \",g);let f=_e(g,\"screen\");throw this.eventBus.analytics.publish(y.publish({error:f,devices:this.deviceManager.getDevices(),settings:new Ze(r==null?void 0:r.video,r==null?void 0:r.audio,!1)})),f}let n=[],d=new Se(o),u=o.getVideoTracks()[0],p=new G(d,u,\"screen\",this.eventBus,r==null?void 0:r.video,this.store.getRoom());p.setSimulcastDefinitons(this.store.getSimulcastDefinitionsForPeer(this.store.getLocalPeer(),\"screen\"));try{let g=this.validateCurrentTabCapture(p,i.forceCurrentTab);p.isCurrentTab=g,yield p.cropTo(i.cropTarget)}catch(g){throw o.getTracks().forEach(f=>f.stop()),g}n.push(p);let h=o.getAudioTracks()[0];if(h){let g=new de(d,h,\"screen\",this.eventBus,r==null?void 0:r.audio,this.store.getRoom());n.push(g)}return l.v(this.TAG,\"getLocalScreen\",n),n})}setScreenCaptureHandleConfig(e){var t;!((t=navigator.mediaDevices)!=null&&t.setCaptureHandleConfig)||this.isInIframe()||(e=e||{},Object.assign(e,{handle:(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(),exposeOrigin:!1,permittedOrigins:[window.location.origin]}),l.d(\"setting capture handle - \",e.handle),navigator.mediaDevices.setCaptureHandleConfig(e),this.captureHandleIdentifier=e.handle)}validateCurrentTabCapture(e,t){let i=e.getCaptureHandle(),r=!!(this.captureHandleIdentifier&&(i==null?void 0:i.handle)===this.captureHandleIdentifier);if(t&&!r)throw l.e(this.TAG,\"current tab was not shared with forceCurrentTab as true\"),S.TracksErrors.CurrentTabNotShared();return r}requestPermissions(){return c(this,null,function*(){try{(yield navigator.mediaDevices.getUserMedia({audio:!0,video:!0})).getTracks().forEach(t=>t.stop())}catch(e){l.e(this.TAG,e)}})}static getEmptyVideoTrack(e){var n,d,u;let t=((n=e==null?void 0:e.getSettings())==null?void 0:n.width)||320,i=((d=e==null?void 0:e.getSettings())==null?void 0:d.height)||240,r=1;Me||(Me=document.createElement(\"canvas\"),Me.width=t,Me.height=i,(u=Me.getContext(\"2d\"))==null||u.fillRect(0,0,t,i)),fi||(fi=setInterval(()=>{let p=Me==null?void 0:Me.getContext(\"2d\");p&&p.fillRect(0,0,1,1)},1e3/r));let o=Me.captureStream(r).getVideoTracks()[0];return o.enabled=!1,o}static getEmptyAudioTrack(){let e=ce.getAudioContext(),t=e.createOscillator(),i=e.createMediaStreamDestination();t.connect(i),t.start();let r=i.stream.getAudioTracks()[0];return r.enabled=!1,r}static cleanup(){clearInterval(fi),fi=void 0,Me=void 0}getAVTracks(e){return c(this,null,function*(){try{let t=yield navigator.mediaDevices.getUserMedia({audio:e.audio?e.audio.toConstraints():!1,video:e.video?e.video.toConstraints():!1});return t.getVideoTracks().concat(t.getAudioTracks())}catch(t){yield this.deviceManager.init();let i=!!(!this.deviceManager.hasWebcamPermission&&e.video),r=!!(!this.deviceManager.hasMicrophonePermission&&e.audio),s=this.getErrorType(i,r);throw _e(t,s)}})}getAVTrackSettings(e){let t=this.getAudioSettings(e),i=this.getVideoSettings(e);return!t&&!i?null:new xe().video(i).audio(t).build()}isInIframe(){try{return window.self!==window.top}catch(e){return!0}}retryGetLocalTracks(e,t,i,r){return c(this,null,function*(){if(e instanceof k&&e.action===\"TRACK\"){this.observer.onFailure(e);let s=e.code===P.TracksErrors.OVER_CONSTRAINED,o=e.message.includes(\"audio\"),n=e.message.includes(\"video\");if(s){let d=new xe().video(new Ke).audio(new $e).build();l.w(this.TAG,\"Fetch AV Tracks failed with overconstrained error\",{fetchTrackOptions:i},{error:e});try{return yield this.getLocalTracks(i,d,r)}catch(u){let p=u instanceof k?u.nativeError:u,h=u;if((p==null?void 0:p.name)===\"OverconstrainedError\"){let T=S.TracksErrors.GenericTrack(\"TRACK\",\"Overconstrained error after dropping all constraints\");T.addNativeError(p),h=T}return yield this.retryGetLocalTracks(h,t,i,r)}}i.audio=o?\"empty\":i.audio,i.video=n?\"empty\":i.video,l.w(this.TAG,\"Fetch AV Tracks failed\",{fetchTrackOptions:i},e);try{return yield this.getLocalTracks(i,t,r)}catch(d){return l.w(this.TAG,\"Fetch empty tacks failed\",d),i.audio=i.audio&&\"empty\",i.video=i.video&&\"empty\",this.observer.onFailure(d),yield this.getLocalTracks(i,t,r)}}else return l.w(this.TAG,\"Fetch AV Tracks failed - unknown exception\",e),this.observer.onFailure(e),[]})}getErrorType(e,t){return e&&t?\"audio, video\":e?\"video\":t?\"audio\":\"audio, video\"}getEmptyTracks(e){let t=[];return e.audio===\"empty\"&&t.push(a.getEmptyAudioTrack()),e.video===\"empty\"&&t.push(a.getEmptyVideoTrack()),t}updateCurrentLocalTrackSettings(e){return c(this,null,function*(){let t=this.store.getLocalPeerTracks(),i=t.find(n=>n.type===\"video\"&&n.source===\"regular\"),r=t.find(n=>n.type===\"audio\"&&n.source===\"regular\"),s=t.find(n=>n.type===\"video\"&&n.source===\"screen\");e!=null&&e.video&&(yield i==null?void 0:i.setSettings(e.video)),e!=null&&e.audio&&(yield r==null?void 0:r.setSettings(e.audio));let o=this.getScreenshareSettings(!0);return o!=null&&o.video&&(yield s==null?void 0:s.setSettings(o==null?void 0:o.video)),{videoTrack:i,audioTrack:r}})}getAudioSettings(e){var o;let t=this.store.getPublishParams();if(!t||!((o=t.allowed)!=null&&o.includes(\"audio\")))return null;let i=this.store.getLocalPeer(),r=i==null?void 0:i.audioTrack,s=(r==null?void 0:r.settings.deviceId)||e.audioInputDeviceId;return new Q().codec(t.audio.codec).maxBitrate(t.audio.bitRate).deviceId(s||Gr.audioInputDeviceId).build()}getVideoSettings(e){var n;let t=this.store.getPublishParams();if(!t||!((n=t.allowed)!=null&&n.includes(\"video\")))return null;let i=this.store.getLocalPeer(),r=i==null?void 0:i.videoTrack,s=(r==null?void 0:r.settings.deviceId)||e.videoDeviceId,o=t.video;return new q().codec(o.codec).maxBitrate(o.bitRate).maxFramerate(o.frameRate).setWidth(o.width).setHeight(o.height).deviceId(s||Gr.videoDeviceId).build()}getScreenshareSettings(e=!1){var r;let t=this.store.getPublishParams();if(!t||!((r=t.allowed)!=null&&r.includes(\"screen\")))return null;let i=t.screen;return{video:new q().maxBitrate(i.bitRate,!1).codec(i.codec).maxFramerate(i.frameRate).setWidth(i.width).setHeight(i.height).build(),audio:e?void 0:new Q().build()}}getOrDefaultScreenshareConfig(e){return c(this,null,function*(){var i;let t=Object.assign({videoOnly:!1,audioOnly:!1,forceCurrentTab:!1,preferCurrentTab:!1,selfBrowserSurface:\"exclude\",surfaceSwitching:\"include\",systemAudio:\"exclude\",displaySurface:\"monitor\"},e||{});return t.forceCurrentTab&&(t.videoOnly=!0,t.preferCurrentTab=!0,t.selfBrowserSurface=\"include\",t.surfaceSwitching=\"exclude\"),t.preferCurrentTab&&(t.selfBrowserSurface=\"include\",t.displaySurface=void 0),t.cropElement&&((i=window.CropTarget)!=null&&i.fromElement)&&(t.cropTarget=yield window.CropTarget.fromElement(t.cropElement)),t})}createHMSLocalTracks(e,t,i){let r=e.find(n=>n.kind===\"video\"),s=e.find(n=>n.kind===\"audio\");i?e.forEach(n=>i==null?void 0:i.nativeStream.addTrack(n)):i=new Se(new MediaStream(e));let o=[];if(s&&(t!=null&&t.audio)){let n=new de(i,s,\"regular\",this.eventBus,t.audio,this.store.getRoom());o.push(n)}if(r&&(t!=null&&t.video)){let n=new G(i,r,\"regular\",this.eventBus,t.video,this.store.getRoom());n.setSimulcastDefinitons(this.store.getSimulcastDefinitionsForPeer(this.store.getLocalPeer(),\"regular\")),o.push(n)}return o}};function Zs(a,e){return function(i){return!lodash_isequal__WEBPACK_IMPORTED_MODULE_3___default()(a[i],e[i])}}var G=class a extends et{constructor(t,i,r,s,o=new q().build(),n){super(t,i,r);this.eventBus=s;this.room=n;this._layerDefinitions=[];this.TAG=\"[HMSLocalVideoTrack]\";this.enabledStateBeforeBackground=!1;this.isCurrentTab=!1;this.isPublished=!1;this.replaceSenderTrack=t=>c(this,null,function*(){if(!this.transceiver||this.transceiver.direction!==\"sendonly\"){l.d(this.TAG,`transceiver for ${this.trackId} not available or not connected yet`);return}yield this.transceiver.sender.replaceTrack(t)});this.buildNewSettings=t=>{let{width:i,height:r,codec:s,maxFramerate:o,maxBitrate:n,deviceId:d,advanced:u,facingMode:p}=m(m({},this.settings),t);return new Ke(i,r,s,o,d,u,n,p)};this.handleSettingsChange=t=>c(this,null,function*(){let i=this.stream,r=Zs(t,this.settings);if(r(\"maxBitrate\")&&t.maxBitrate&&(yield i.setMaxBitrateAndFramerate(this)),r(\"width\")||r(\"height\")||r(\"advanced\"))if(this.source===\"video\"){let s=yield this.replaceTrackWith(t);yield this.replaceSender(s,this.enabled),this.nativeTrack=s,yield this.processPlugins(),this.videoHandler.updateSinks()}else yield this.nativeTrack.applyConstraints(t.toConstraints())});this.handleDeviceChange=(t,i=!1)=>c(this,null,function*(){if(Zs(t,this.settings)(\"deviceId\")&&this.source===\"regular\"){if(this.enabled){delete t.facingMode;let o=yield this.replaceTrackWith(t);yield this.replaceSender(o,this.enabled),this.nativeTrack=o,yield this.processPlugins(),this.videoHandler.updateSinks()}let s=this.nativeTrack.getSettings().groupId;!i&&t.deviceId&&(X.updateSelection(\"videoInput\",{deviceId:t.deviceId,groupId:s}),this.eventBus.deviceChange.publish({isUserSelection:!0,type:\"video\",selection:{deviceId:t.deviceId,groupId:s}}))}});this.trackPermissions=()=>{hi(\"camera\",t=>{this.eventBus.analytics.publish(y.permissionChange(this.type,t)),t===\"denied\"&&this.eventBus.localVideoEnabled.publish({enabled:!1,track:this})})};this.handleTrackMute=()=>{l.d(this.TAG,\"muted natively\",document.visibilityState);let t=document.visibilityState===\"hidden\"?\"visibility-change\":\"incoming-call\";this.eventBus.analytics.publish(this.sendInterruptionEvent({started:!0,reason:t})),this.eventBus.localVideoEnabled.publish({enabled:!1,track:this})};this.handleTrackUnmuteNatively=()=>c(this,null,function*(){l.d(this.TAG,\"unmuted natively\");let t=document.visibilityState===\"hidden\"?\"visibility-change\":\"incoming-call\";this.eventBus.analytics.publish(this.sendInterruptionEvent({started:!1,reason:t})),this.handleTrackUnmute(),this.eventBus.localVideoEnabled.publish({enabled:this.enabled,track:this}),this.eventBus.localVideoUnmutedNatively.publish(),yield this.setEnabled(this.enabled)});this.removeOrReplaceProcessedTrack=t=>c(this,null,function*(){t?t!==this.processedTrack&&(this.processedTrack=t):this.processedTrack=void 0,yield this.replaceSenderTrack(this.processedTrack||this.nativeTrack)});this.handleVisibilityChange=()=>c(this,null,function*(){if(document.visibilityState===\"hidden\")this.enabledStateBeforeBackground=this.enabled,this.enabled&&(yield this.setEnabled(!1)),this.eventBus.analytics.publish(this.sendInterruptionEvent({started:!0,reason:\"visibility-change\"}));else{if(l.d(this.TAG,\"visibility visible, restoring track state\",this.enabledStateBeforeBackground),this.enabledStateBeforeBackground)try{yield this.setEnabled(!0)}catch(t){this.eventBus.error.publish(t)}this.eventBus.analytics.publish(this.sendInterruptionEvent({started:!1,reason:\"visibility-change\"}))}});this.addTrackEventListeners(i),this.trackPermissions(),t.tracks.push(this),this.setVideoHandler(new tt(this)),this.settings=o,o.deviceId!==i.getSettings().deviceId&&i.enabled&&(this.settings=this.buildNewSettings({deviceId:i.getSettings().deviceId})),this.pluginsManager=new It(this,s),this.mediaStreamPluginsManager=new gi(s,n),this.setFirstTrackId(this.trackId),this.eventBus.localAudioUnmutedNatively.subscribe(this.handleTrackUnmute),U&&r===\"regular\"&&Mt()&&document.addEventListener(\"visibilitychange\",this.handleVisibilityChange)}clone(t){let i=this.nativeTrack.clone();t.nativeStream.addTrack(i);let r=new a(t,i,this.source,this.eventBus,this.settings,this.room);return r.peerId=this.peerId,this.pluginsManager.pluginsMap.size>0&&this.pluginsManager.pluginsMap.forEach(s=>{r.addPlugin(s).catch(o=>l.e(this.TAG,\"Plugin add failed while migrating\",s,o))}),this.mediaStreamPluginsManager.plugins.size>0&&r.addStreamPlugins(Array.from(this.mediaStreamPluginsManager.plugins)),r}setSimulcastDefinitons(t){this._layerDefinitions=t}getSimulcastDefinitions(){return this._layerDefinitions}setEnabled(t){return c(this,null,function*(){var i;if(t!==this.enabled){if(this.source===\"regular\"){let r;t?r=yield this.replaceTrackWith(this.settings):r=yield this.replaceTrackWithBlank(),yield this.replaceSender(r,t),(i=this.nativeTrack)==null||i.stop(),this.nativeTrack=r,yield ne(a.prototype,this,\"setEnabled\").call(this,t),t&&(yield this.pluginsManager.waitForRestart(),yield this.processPlugins(),this.settings=this.buildNewSettings({deviceId:r.getSettings().deviceId})),this.videoHandler.updateSinks()}this.eventBus.localVideoEnabled.publish({enabled:t,track:this})}})}processPlugins(){return c(this,null,function*(){try{if(this.pluginsManager.getPlugins().length>0)return;if(this.mediaStreamPluginsManager.getPlugins().length>0){let r=this.mediaStreamPluginsManager.applyPlugins(new MediaStream([this.nativeTrack])).getVideoTracks()[0];yield this.setProcessedTrack(r)}else yield this.setProcessedTrack();this.videoHandler.updateSinks()}catch(t){console.error(\"error in processing plugin(s)\",t)}})}addStreamPlugins(t){return c(this,null,function*(){if(this.pluginsManager.getPlugins().length>0)throw Error(\"Plugins of type HMSMediaStreamPlugin and HMSVideoPlugin cannot be used together\");this.mediaStreamPluginsManager.addPlugins(t),yield this.processPlugins()})}removeStreamPlugins(t){return c(this,null,function*(){this.mediaStreamPluginsManager.removePlugins(t),yield this.processPlugins()})}isPublishedTrackId(t){return this.publishedTrackId===t}addSink(t){this.addSinkInternal(t,this.processedTrack||this.nativeTrack)}setSettings(t,i=!1){return c(this,null,function*(){let r=this.buildNewSettings(t);if(yield this.handleDeviceChange(r,i),!this.enabled||ve(this.nativeTrack)){this.settings=r;return}else yield this.pluginsManager.waitForRestart();yield this.handleSettingsChange(r),this.settings=r})}getPlugins(){return this.mediaStreamPluginsManager.getPlugins().length>0?this.mediaStreamPluginsManager.getPlugins():this.pluginsManager.getPlugins()}addPlugin(t,i){return c(this,null,function*(){if(this.mediaStreamPluginsManager.getPlugins().length>0)throw Error(\"Plugins of type HMSVideoPlugin and HMSMediaStreamPlugin cannot be used together\");return this.pluginsManager.addPlugin(t,i)})}removePlugin(t){return c(this,null,function*(){return this.pluginsManager.removePlugin(t)})}validatePlugin(t){return this.pluginsManager.validatePlugin(t)}cleanup(){return c(this,null,function*(){var t;this.eventBus.localAudioUnmutedNatively.unsubscribe(this.handleTrackUnmute),this.removeTrackEventListeners(this.nativeTrack),yield this.mediaStreamPluginsManager.cleanup(),yield this.pluginsManager.cleanup(),ne(a.prototype,this,\"cleanup\").call(this),this.transceiver=void 0,(t=this.processedTrack)==null||t.stop(),this.isPublished=!1,U&&Mt()&&document.removeEventListener(\"visibilitychange\",this.handleVisibilityChange)})}cropTo(t){return c(this,null,function*(){if(t&&this.source===\"screen\")try{this.nativeTrack.cropTo&&(yield this.nativeTrack.cropTo(t))}catch(i){throw l.e(this.TAG,\"failed to crop screenshare capture - \",i),S.TracksErrors.GenericTrack(\"TRACK\",\"failed to crop screenshare capture\")}})}getCaptureHandle(){if(this.nativeTrack.getCaptureHandle)return this.nativeTrack.getCaptureHandle()}setProcessedTrack(t){return c(this,null,function*(){if(!this.nativeTrack.enabled){this.processedTrack=t;return}yield this.removeOrReplaceProcessedTrack(t),this.videoHandler.updateSinks()})}getTrackIDBeingSent(){return this.getTrackBeingSent().id}getTrackBeingSent(){return this.enabled?this.processedTrack||this.nativeTrack:this.nativeTrack}switchCamera(){return c(this,null,function*(){var s;let t=this.getMediaTrackSettings().facingMode;if(!t||this.source!==\"regular\"){l.d(this.TAG,\"facingMode not supported\");return}let i=t===\"environment\"?\"user\":\"environment\";(s=this.nativeTrack)==null||s.stop();let r=yield this.replaceTrackWith(this.buildNewSettings({facingMode:i,deviceId:void 0}));yield this.replaceSender(r,this.enabled),this.nativeTrack=r,yield this.processPlugins(),this.videoHandler.updateSinks(),this.settings=this.buildNewSettings({deviceId:this.nativeTrack.getSettings().deviceId,facingMode:i}),X.updateSelection(\"videoInput\",{deviceId:this.settings.deviceId,groupId:this.nativeTrack.getSettings().groupId})})}replaceTrackWith(t){return c(this,null,function*(){let i=this.nativeTrack;this.removeTrackEventListeners(i),i==null||i.stop();try{let r=yield wr(t);return this.addTrackEventListeners(r),l.d(this.TAG,\"replaceTrack, Previous track stopped\",i,\"newTrack\",r),this.settings.deviceId===\"default\"&&(this.settings=this.buildNewSettings({deviceId:this.nativeTrack.getSettings().deviceId})),r}catch(r){let s=yield wr(this.settings);throw this.addTrackEventListeners(s),yield this.replaceSender(s,this.enabled),this.nativeTrack=s,yield this.processPlugins(),this.videoHandler.updateSinks(),this.isPublished&&this.eventBus.analytics.publish(y.publish({error:r})),r}})}replaceTrackWithBlank(){return c(this,null,function*(){let t=this.nativeTrack,i=be.getEmptyVideoTrack(t);return this.removeTrackEventListeners(t),this.addTrackEventListeners(i),t==null||t.stop(),l.d(this.TAG,\"replaceTrackWithBlank, Previous track stopped\",t,\"newTrack\",i),i})}replaceSender(t,i){return c(this,null,function*(){i?yield this.replaceSenderTrack(this.processedTrack||t):yield this.replaceSenderTrack(t),this.stream.replaceStreamTrack(this.nativeTrack,t)})}addTrackEventListeners(t){t.addEventListener(\"mute\",this.handleTrackMute),t.addEventListener(\"unmute\",this.handleTrackUnmuteNatively)}removeTrackEventListeners(t){t.removeEventListener(\"mute\",this.handleTrackMute),t.removeEventListener(\"unmute\",this.handleTrackUnmuteNatively)}};var rt=\"renegotiation-callback-id\",vi=\"ion-sfu\";var st=\"SUBSCRIBE_ICE_CONNECTION_CALLBACK_ID\";var ea=\"https://event.100ms.live/v2/client/report\",ta=\"https://event-nonprod.100ms.live/v2/client/report\";var Rt=Math.pow(2,31)-1,V={DEVICE_CHANGE:\"device-change\",LOCAL_AUDIO_ENABLED:\"local-audio-enabled\",LOCAL_VIDEO_ENABLED:\"local-video-enabled\",LOCAL_VIDEO_UNMUTED_NATIVELY:\"local-video-unmuted-natively\",LOCAL_AUDIO_UNMUTED_NATIVELY:\"local-audio-unmuted-natively\",STATS_UPDATE:\"stats-update\",RTC_STATS_UPDATE:\"rtc-stats-update\",TRACK_DEGRADED:\"track-degraded\",TRACK_RESTORED:\"track-restored\",TRACK_AUDIO_LEVEL_UPDATE:\"track-audio-level-update\",LOCAL_AUDIO_SILENCE:\"local-audio-silence\",ANALYTICS:\"analytics\",AUDIO_PLUGIN_FAILED:\"audio-plugin-failed\",POLICY_CHANGE:\"policy-change\",LOCAL_ROLE_UPDATE:\"local-role-update\",AUDIO_TRACK_UPDATE:\"audio-track-update\",AUDIO_TRACK_ADDED:\"audio-track-added\",AUDIO_TRACK_REMOVED:\"audio-track-removed\",AUTOPLAY_ERROR:\"autoplay-error\",LEAVE:\"leave\",ERROR:\"error\"},ia=\"2.5\",ra=\"20250115\",Ae=\"_handraise\",$r=1e3,Kr=64,sa=\"https://whiteboard.100ms.live\",aa=\"https://whiteboard-qa.100ms.live\";var O=class a extends et{constructor(t,i,r,s){super(t,i,r);this._degraded=!1;this._degradedAt=null;this._layerDefinitions=[];this.history=new qr;this.preferredLayer=\"high\";this.disableNoneLayerRequest=!1;this.disableNoneLayerRequest=!!s,this.setVideoHandler(new tt(this))}setTrackId(t){this.bizTrackId=t}get trackId(){return this.bizTrackId||super.trackId}get degraded(){return this._degraded}get degradedAt(){return this._degradedAt}setEnabled(t){return c(this,null,function*(){t!==this.enabled&&(ne(a.prototype,this,\"setEnabled\").call(this,t),this.videoHandler.updateSinks(!0))})}setPreferredLayer(t){return c(this,null,function*(){if(t===\"none\"){l.w(\"layer none will be ignored\");return}if(this.preferredLayer=t,!!this.shouldSendVideoLayer(t,\"preferLayer\")){if(!this.hasSinks()){l.d(`[Remote Track] ${this.logIdentifier}\n        streamId=${this.stream.id} \n        trackId=${this.trackId}\n        saving ${t}, source=${this.source}\n        Track does not have any sink`);return}yield this.requestLayer(t,\"preferLayer\"),this.pushInHistory(`uiPreferLayer-${t}`)}})}getSimulcastLayer(){return this.stream.getSimulcastLayer()}getLayer(){return this.stream.getVideoLayer()}getPreferredLayer(){return this.preferredLayer}getPreferredLayerDefinition(){return this._layerDefinitions.find(t=>t.layer===this.preferredLayer)}replaceTrack(t){this.nativeTrack=t.nativeTrack,t.transceiver&&(this.transceiver=t.transceiver,this.stream.updateId(t.stream.id)),this.videoHandler.updateSinks()}addSink(t,i=!0){return c(this,null,function*(){ve(this.nativeTrack)?yield this.requestLayer(this.preferredLayer,\"addSink\"):(ne(a.prototype,this,\"addSink\").call(this,t),i&&(yield this.updateLayer(\"addSink\"))),this.pushInHistory(\"uiSetLayer-high\")})}removeSink(t,i=!0){return c(this,null,function*(){ne(a.prototype,this,\"removeSink\").call(this,t),i&&(yield this.updateLayer(\"removeSink\")),this._degraded=!1,this.pushInHistory(\"uiSetLayer-none\")})}getSimulcastDefinitions(){return[...this._layerDefinitions]}setSimulcastDefinitons(t){this._layerDefinitions=t}setLayerFromServer(t){this._degraded=this.getDegradationValue(t),this._degradedAt=this._degraded?new Date:this._degradedAt;let i=t.current_layer;return l.d(`[Remote Track] ${this.logIdentifier} \n      streamId=${this.stream.id} \n      trackId=${this.trackId}\n      layer update from sfu\n      currLayer=${t.current_layer}\n      preferredLayer=${t.expected_layer}\n      sub_degraded=${t.subscriber_degraded}\n      pub_degraded=${t.publisher_degraded}\n      isDegraded=${this._degraded}`),this.stream.setVideoLayerLocally(i,this.logIdentifier,\"setLayerFromServer\"),this.pushInHistory(`sfuLayerUpdate-${i}`),this._degraded}getDegradationValue(t){return this.enabled&&(t.publisher_degraded||t.subscriber_degraded)&&t.current_layer===\"none\"}updateLayer(t){return c(this,null,function*(){let i=this.preferredLayer;this.enabled&&this.hasSinks()?i=this.preferredLayer:this.disableNoneLayerRequest||(i=\"none\"),this.shouldSendVideoLayer(i,t)&&(yield this.requestLayer(i,t))})}pushInHistory(t){ false&&0}requestLayer(t,i){return c(this,null,function*(){try{let r=yield this.stream.setVideoLayer(t,this.trackId,this.logIdentifier,i);return l.d(`[Remote Track] ${this.logIdentifier} \n      streamId=${this.stream.id}\n      trackId=${this.trackId}\n      Requested layer ${t}, source=${i}`),r}catch(r){throw l.d(`[Remote Track] ${this.logIdentifier} \n      streamId=${this.stream.id}\n      trackId=${this.trackId}\n      Failed to set layer ${t}, source=${i}\n      error=${r.message}`),r}})}shouldSendVideoLayer(t,i){let r=this.getLayer();return this.degraded&&t===\"none\"?!0:r===t?(l.d(`[Remote Track] ${this.logIdentifier}`,`Not sending update, already on layer ${t}, source=${i}`),!1):!0}},qr=class{constructor(){this.history=[]}push(e){e.time=new Date().toISOString().split(\"T\")[1],this.history.push(e)}};var Se=class extends Ye{constructor(){super(...arguments);this.TAG=\"[HMSLocalStream]\";this.connection=null}setConnection(t){this.connection=t}addTransceiver(t,i){let r=this.connection.addTransceiver(t.getTrackBeingSent(),{streams:[this.nativeStream],direction:\"sendonly\",sendEncodings:this.getTrackEncodings(t,i)});return this.setPreferredCodec(r,t.nativeTrack.kind),t.transceiver=r,r}setMaxBitrateAndFramerate(t,i){return c(this,null,function*(){var r;yield(r=this.connection)==null?void 0:r.setMaxBitrateAndFramerate(t,i)})}setPreferredCodec(t,i){}replaceStreamTrack(t,i){this.nativeStream.addTrack(i),this.nativeStream.removeTrack(t)}removeSender(t){var s,o;if(!this.connection||this.connection.connectionState===\"closed\"){l.d(this.TAG,\"publish connection is not initialised or closed\");return}let i=(s=t.transceiver)==null?void 0:s.sender;if(!i){l.w(this.TAG,`No sender found for trackId=${t.trackId}`);return}(o=this.connection)==null||o.removeTrack(i);let r=this.tracks.indexOf(t);r!==-1?this.tracks.splice(r,1):l.w(this.TAG,`Cannot find ${t.trackId} in locally stored tracks`)}getTrackEncodings(t,i){let r=[];if(t instanceof G)if(i.length>0)l.d(this.TAG,\"Simulcast enabled with layers\",i),r.push(...i);else{let s={active:this.nativeStream.active};t.settings.maxBitrate&&!Ge&&(s.maxBitrate=t.settings.maxBitrate),r.push(s)}return r}};var Pe=class extends Ye{constructor(t,i){super(t);this.audio=!0;this.video=\"none\";this.connection=i}setAudio(t,i,r){return c(this,null,function*(){this.audio!==t&&(this.audio=t,l.d(`[Remote stream] ${r||\"\"} \n    streamId=${this.id}\n    trackId=${i}\n    subscribing audio - ${this.audio}`),yield this.connection.sendOverApiDataChannelWithResponse({params:{subscribed:this.audio,track_id:i},method:\"prefer-audio-track-state\"}))})}setVideoLayerLocally(t,i,r){this.video=t,l.d(`[Remote stream] ${i}\n    streamId=${this.id}\n    source: ${r}\n    Setting layer field to=${t}`)}setVideoLayer(t,i,r,s){return l.d(`[Remote stream] ${r} \n      streamId=${this.id}\n      trackId=${i} \n      source: ${s} request ${t} layer`),this.setVideoLayerLocally(t,r,s),this.connection.sendOverApiDataChannelWithResponse({params:{max_spatial_layer:this.video,track_id:i},method:\"prefer-video-track-state\"})}getSimulcastLayer(){return this.video}getVideoLayer(){return this.video}isAudioSubscribed(){return this.audio}};var oa=(a,e,t,i)=>c(void 0,null,function*(){var o;let r,s={};if((o=e.transceiver)!=null&&o.sender.track){try{r=yield e.transceiver.sender.getStats();let n={},d={},u={};r==null||r.forEach(p=>{switch(p.type){case\"outbound-rtp\":d[p.id]=p;break;case\"remote-inbound-rtp\":u[p.ssrc]=p;break;case\"codec\":n[p.id]=p.mimeType;break;default:break}}),Object.keys(m({},d)).forEach(p=>{var v,R;let h=(v=d[p])==null?void 0:v.codecId,T=h?n[h]:void 0,g;T&&(g=T.substring(T.indexOf(\"/\")+1));let f=M(m({},d[p]),{rid:(R=d[p])==null?void 0:R.rid}),E=u[f.ssrc];s[p]=M(m({},f),{bitrate:Ht(\"bytesSent\",f,i==null?void 0:i[p]),packetsLost:E==null?void 0:E.packetsLost,jitter:E==null?void 0:E.jitter,roundTripTime:E==null?void 0:E.roundTripTime,totalRoundTripTime:E==null?void 0:E.totalRoundTripTime,peerName:t,peerID:e.peerId,enabled:e.enabled,codec:g})})}catch(n){a.analytics.publish(y.rtcStatsFailed(S.WebrtcErrors.StatsFailed(\"TRACK\",`Error getting local track stats ${e.trackId} - ${n.message}`))),l.w(\"[HMSWebrtcStats]\",\"Error in getting local track stats\",e,n,n.name)}return s}}),na=(a,e,t,i)=>c(void 0,null,function*(){var d;let r;try{r=yield(d=e.transceiver)==null?void 0:d.receiver.getStats()}catch(u){a.analytics.publish(y.rtcStatsFailed(S.WebrtcErrors.StatsFailed(\"TRACK\",`Error getting remote track stats ${e.trackId} - ${u.message}`))),l.w(\"[HMSWebrtcStats]\",\"Error in getting remote track stats\",e,u)}let s=Uo(r),o=Ht(\"bytesReceived\",s,i),n=jr(\"packetsLost\",s,i);return s!=null&&s.remote&&Object.assign(s.remote,{packetsLostRate:jr(\"packetsLost\",s.remote,i==null?void 0:i.remote)}),s&&M(m({},s),{bitrate:o,packetsLostRate:n,peerID:e.peerId,enabled:e.enabled,peerName:t,codec:s.codec})}),Uo=a=>{let e,t,i={};a==null||a.forEach(o=>{switch(o.type){case\"inbound-rtp\":e=o;break;case\"outbound-rtp\":e=o;break;case\"remote-inbound-rtp\":t=o;break;case\"codec\":i[o.id]=o.mimeType;break;default:break}});let r=e!=null&&e.codecId?i[e.codecId]:void 0,s;return r&&(s=r.substring(r.indexOf(\"/\")+1)),e&&Object.assign(e,{remote:t,codec:s})},Jr=(a,e,t)=>{let i=Bo(e),r=Ht(a===\"publish\"?\"bytesSent\":\"bytesReceived\",i,t&&t[a]);return i&&Object.assign(i,{bitrate:r})},Bo=a=>{let e;return a==null||a.forEach(t=>{t.type===\"transport\"&&(e=a==null?void 0:a.get(t.selectedCandidatePairId))}),e||a==null||a.forEach(t=>{t.type===\"candidate-pair\"&&t.selected&&(e=t)}),e},ca=a=>{let e={packetsLost:0,jitter:0};return a==null||a.forEach(t=>{t.packetsLost&&(e.packetsLost+=t.packetsLost),t.jitter>e.jitter&&(e.jitter=t.jitter)}),e},da=(a,e)=>Array.from(new Set(a.concat(e))),Ht=(a,e,t)=>jr(a,e,t)*8,jr=(a,e,t)=>{let i=e&&e[a],r=t?t[a]:null;return[e,t,he(i),he(r)].every(o=>!!o)?Qr(i,r,e==null?void 0:e.timestamp,t==null?void 0:t.timestamp)*1e3:0},Qr=(a,e,t,i)=>he(a)&&he(e)&&t&&i?(a-e)/(t-i):0;var Mi=class{constructor(e,t,i,r){this.store=e;this.eventBus=t;this.publishConnection=i;this.subscribeConnection=r;this.TAG=\"[HMSWebrtcStats]\";this.peerStats={};this.remoteTrackStats={};this.localTrackStats={};this.getLocalPeerStats=()=>this.peerStats[this.localPeerID];this.getRemoteTrackStats=e=>this.remoteTrackStats[e];this.getAllRemoteTracksStats=()=>this.remoteTrackStats;this.getLocalTrackStats=()=>this.localTrackStats;this.updateStats=()=>c(this,null,function*(){yield this.updateLocalPeerStats(),yield this.updateLocalTrackStats(),yield this.updateRemoteTrackStats()});this.updateLocalPeerStats=()=>c(this,null,function*(){var p,h,T,g;let e=this.getLocalPeerStats(),t;try{t=yield(p=this.publishConnection)==null?void 0:p.getStats()}catch(f){this.eventBus.analytics.publish(y.rtcStatsFailed(S.WebrtcErrors.StatsFailed(\"PUBLISH\",f.message))),l.w(this.TAG,\"Error in getting publish stats\",f)}let i=t&&Jr(\"publish\",t,e),r;try{r=yield(h=this.subscribeConnection)==null?void 0:h.getStats()}catch(f){this.eventBus.analytics.publish(y.rtcStatsFailed(S.WebrtcErrors.StatsFailed(\"SUBSCRIBE\",f.message))),l.w(this.TAG,\"Error in getting subscribe stats\",f)}let s=r&&Jr(\"subscribe\",r,e),{packetsLost:o,jitter:n}=ca(r),d=Qr(o,(T=e==null?void 0:e.subscribe)==null?void 0:T.packetsLost,s==null?void 0:s.timestamp,(g=e==null?void 0:e.subscribe)==null?void 0:g.timestamp),u=s&&Object.assign(s,{packetsLostRate:d,jitter:n,packetsLost:o});this.peerStats[this.localPeerID]={publish:i,subscribe:u}});this.updateRemoteTrackStats=()=>c(this,null,function*(){var i;let e=Array.from(this.store.getTracksMap().values()).filter(r=>r instanceof O||r instanceof ie),t=e.map(r=>r.trackId);Object.keys(this.remoteTrackStats).forEach(r=>{t.includes(r)||delete this.remoteTrackStats[r]});for(let r of e){let s=r.peerId&&((i=this.store.getPeerById(r.peerId))==null?void 0:i.name),o=this.getRemoteTrackStats(r.trackId),n=yield na(this.eventBus,r,s,o);n&&(this.remoteTrackStats[r.trackId]=n)}});this.updateLocalTrackStats=()=>c(this,null,function*(){var i;let e=this.store.getLocalPeerTracks().reduce((r,s)=>(r[s.getTrackIDBeingSent()]=s,r),{}),t=da(Object.keys(this.localTrackStats),Object.keys(e));for(let r of t){let s=e[r];if(s){let o=(i=this.store.getLocalPeer())==null?void 0:i.name,n=yield oa(this.eventBus,s,o,this.localTrackStats[r]);n&&(this.localTrackStats[r]=n)}else delete this.localTrackStats[r]}});var s;this.localPeerID=(s=this.store.getLocalPeer())==null?void 0:s.peerId}setPeerConnections({publish:e,subscribe:t}){this.publishConnection=e,this.subscribeConnection=t}getPublishPeerConnection(){return this.publishConnection}getSubscribePeerConnection(){return this.subscribeConnection}};var yi=class{constructor(e,t){this.store=e;this.eventBus=t;this.TAG=\"[HMSWebrtcInternals]\";this.interval=1e3;this.isMonitored=!1;this.handleStatsUpdate=()=>c(this,null,function*(){var e;yield(e=this.hmsStats)==null?void 0:e.updateStats(),this.hmsStats&&this.eventBus.statsUpdate.publish(this.hmsStats)})}getCurrentStats(){return this.hmsStats}getPublishPeerConnection(){var e;return(e=this.hmsStats)==null?void 0:e.getPublishPeerConnection()}getSubscribePeerConnection(){var e;return(e=this.hmsStats)==null?void 0:e.getSubscribePeerConnection()}onStatsChange(e){return this.eventBus.statsUpdate.subscribe(e),()=>{this.eventBus.statsUpdate.unsubscribe(e)}}setPeerConnections({publish:e,subscribe:t}){this.hmsStats?this.hmsStats.setPeerConnections({publish:e,subscribe:t}):this.hmsStats=new Mi(this.store,this.eventBus,e,t)}start(){return c(this,null,function*(){if(this.isMonitored){l.d(this.TAG,\"Already started\");return}this.stop(),this.isMonitored=!0,l.d(this.TAG,\"Starting Webrtc Stats Monitor\"),this.startLoop().then(()=>l.d(this.TAG,\"Stopping Webrtc Stats Monitor\")).catch(e=>{this.eventBus.analytics.publish(y.rtcStatsFailed(S.WebrtcErrors.StatsFailed(\"PUBLISH\",e.message))),l.e(this.TAG,e.message)})})}stop(){this.isMonitored=!1}startLoop(){return c(this,null,function*(){for(;this.isMonitored;)yield this.handleStatsUpdate(),yield J(this.interval)})}cleanup(){this.stop(),this.eventBus.statsUpdate.removeAllListeners()}};var at=class{constructor({peerId:e,name:t,isLocal:i,customerUserId:r,metadata:s,role:o,joinedAt:n,groups:d,realtime:u,type:p}){this.customerUserId=\"\";this.metadata=\"\";this.auxiliaryTracks=[];this.name=t,this.peerId=e,this.isLocal=i,this.customerUserId=r,this.metadata=s,this.joinedAt=n,this.groups=d,this.realtime=u,this.type=p,o&&(this.role=o)}get isHandRaised(){var e;return!!((e=this.groups)!=null&&e.includes(Ae))}updateRole(e){this.role=e}updateName(e){this.name=e}updateNetworkQuality(e){this.networkQuality=e}updateMetadata(e){this.metadata=e}updateGroups(e){this.groups=e}toString(){var e,t,i,r;return`{\n      name: ${this.name};\n      role: ${(e=this.role)==null?void 0:e.name};\n      peerId: ${this.peerId};\n      customerUserId: ${this.customerUserId};\n      ${this.audioTrack?`audioTrack: ${(t=this.audioTrack)==null?void 0:t.trackId};`:\"\"}\n      ${this.videoTrack?`videoTrack: ${(i=this.videoTrack)==null?void 0:i.trackId};`:\"\"}\n      groups: ${(r=this.groups)==null?void 0:r.join()}\n    }`}};var ot=class{};ot.makePeerId=()=>(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();var qe=class extends at{constructor(t){super(M(m({},t),{peerId:ot.makePeerId(),isLocal:!0}));this.isLocal=!0;this.auxiliaryTracks=[];this.asRole=t.asRole}isInPreview(){return!!this.asRole}toString(){var t,i,r;return`{\n      name: ${this.name};\n      role: ${(t=this.role)==null?void 0:t.name};\n      peerId: ${this.peerId};\n      customerUserId: ${this.customerUserId};\n      ${this.asRole?`asRole: ${this.asRole.name};`:\"\"}\n      ${this.audioTrack?`audioTrack: ${(i=this.audioTrack)==null?void 0:i.trackId};`:\"\"}\n      ${this.videoTrack?`videoTrack: ${(r=this.videoTrack)==null?void 0:r.trackId};`:\"\"}\n    }`}};var Ct=class extends at{constructor(t){super(M(m({},t),{isLocal:!1}));this.isLocal=!1;this.auxiliaryTracks=[];this.fromRoomState=!1;this.fromRoomState=!!t.fromRoomState}};var ye=(a,e)=>new Ct({peerId:a.peer_id,name:a.info.name,role:e.getPolicyForRole(a.role),customerUserId:a.info.user_id,metadata:a.info.data,groups:a.groups,type:a.info.type});var ki=class{constructor(e,t,i){this.transport=e;this.store=t;this.options=i;this.isEnd=!1;this.iterator=null;this.total=0;this.defaultPaginationLimit=10}validateConnection(){if(!this.transport||!this.store)throw Error(\"Use usePaginatedParticipants or hmsActions.getPeerListIterator after preview or join has happened\")}hasNext(){return!this.isEnd}getTotal(){return this.total}findPeers(){return c(this,null,function*(){var t;this.validateConnection();let e=yield this.transport.signal.findPeers(M(m({},this.options||{}),{limit:((t=this.options)==null?void 0:t.limit)||this.defaultPaginationLimit}));return this.updateState(e),this.processPeers(e.peers)})}next(){return c(this,null,function*(){var t;this.validateConnection();let e;return!this.iterator&&!this.isEnd?yield this.findPeers():this.iterator?(e=yield this.transport.signal.peerIterNext({iterator:this.iterator,limit:((t=this.options)==null?void 0:t.limit)||this.defaultPaginationLimit}),this.updateState(e),this.processPeers(e.peers)):[]})}processPeers(e){let t=[];return e.forEach(i=>{let r=ye(i,this.store);t.push(r)}),t}updateState(e){this.isEnd=e.eof,this.total=e.total,e.iterator&&(this.iterator=e.iterator)}};var nt=class{constructor(e){this.TAG=\"[AudioContextManager]\";this.audioContext=new AudioContext,this.source=this.audioContext.createMediaElementSource(e),this.source.connect(this.audioContext.destination)}resumeContext(){return c(this,null,function*(){this.audioContext.state===\"suspended\"&&(yield this.audioContext.resume(),l.d(this.TAG,\"AudioContext is resumed\"))})}getAudioTrack(){return this.destinationNode&&this.source.disconnect(this.destinationNode),this.destinationNode=this.audioContext.createMediaStreamDestination(),this.source.connect(this.destinationNode),this.destinationNode.stream.getAudioTracks()[0]}cleanup(){this.audioContext.state!==\"closed\"&&this.audioContext.close().catch(e=>{l.d(this.TAG,\"AudioContext close error\",e.message)})}};var Ue=class extends eventemitter2__WEBPACK_IMPORTED_MODULE_5__.EventEmitter2{on(e,t){return super.on(e,t)}off(e,t){return super.off(e,t)}emit(e,t){return super.emit(e,t)}listeners(e){return super.listeners(e)}};var Ei=class extends Ue{constructor(){super(...arguments);this.audioElement=null;this.TAG=\"[PlaylistAudioManager]\";this.seeked=!1}play(t){return c(this,null,function*(){return this.audioElement=this.getAudioElement(),new Promise((i,r)=>{this.audioElement=this.getAudioElement(),this.audioElement.src=t,this.seeked=!1,this.audioElement.onerror=()=>{let s=`Error loading ${t}`;l.e(this.TAG,s),this.stop(),r(s)},this.audioElement.oncanplaythrough=()=>c(this,null,function*(){try{if(!this.audioElement)return;if(this.audioContextManager.resumeContext(),this.track)this.seeked?this.seeked=!1:(yield this.audioElement.play(),i([this.track]));else{yield this.audioElement.play();let s=this.audioContextManager.getAudioTrack();this.track=s,i([s])}}catch(s){l.e(this.TAG,\"Error playing audio\",t,s.message),r(s)}}),this.audioElement.onseeked=()=>{this.seeked=!0}})})}getTracks(){return this.track?[this.track.id]:[]}getElement(){return this.audioElement||(this.audioElement=this.getAudioElement()),this.audioElement}stop(){var t,i,r;(t=this.audioElement)==null||t.pause(),(i=this.audioElement)==null||i.removeAttribute(\"src\"),this.audioElement=null,(r=this.audioContextManager)==null||r.cleanup(),this.track=void 0}getAudioElement(){if(this.audioElement)return this.audioElement;let t=document.createElement(\"audio\");return t.crossOrigin=\"anonymous\",t.addEventListener(\"timeupdate\",i=>this.emit(\"progress\",i)),t.addEventListener(\"ended\",()=>{this.emit(\"ended\",null)}),this.audioContextManager=new nt(t),t}};var Pi=class extends Ue{constructor(){super(...arguments);this.TAG=\"[PlaylistVideoManager]\";this.videoElement=null;this.canvasContext=null;this.tracks=[];this.DEFAUL_FPS=24;this.seeked=!1;this.drawImage=()=>{var t,i,r;this.videoElement&&!this.videoElement.paused&&!this.videoElement.ended&&((r=this.canvasContext)==null||r.drawImage(this.videoElement,0,0,(t=this.canvas)==null?void 0:t.width,(i=this.canvas)==null?void 0:i.height),this.timer=setTimeout(()=>{this.drawImage()},1e3/this.DEFAUL_FPS))}}play(t){return this.videoElement=this.getVideoElement(),this.createCanvas(),new Promise((i,r)=>{this.videoElement=this.getVideoElement(),this.videoElement.src=t,this.seeked=!1,this.videoElement.onerror=()=>{let s=`Error loading ${t}`;l.e(this.TAG,s),this.stop(),r(s)},this.videoElement.oncanplaythrough=()=>c(this,null,function*(){var s,o,n;try{if(!this.videoElement)return;if(this.canvas.width=this.videoElement.videoWidth,this.canvas.height=this.videoElement.videoHeight,this.tracks.length===0){this.clearCanvasAndTracks();let d=this.canvas.captureStream();if(!d){l.e(this.TAG,\"Browser does not support captureStream\");return}this.videoElement.onplay=this.drawImage,yield this.audioContextManager.resumeContext(),yield this.videoElement.play();let u=this.audioContextManager.getAudioTrack();d.addTrack(u),d.getTracks().forEach(p=>{this.tracks.push(p)}),i(this.tracks)}else this.seeked?(this.seeked=!1,(n=this.canvasContext)==null||n.drawImage(this.videoElement,0,0,(s=this.canvas)==null?void 0:s.width,(o=this.canvas)==null?void 0:o.height)):(yield this.videoElement.play(),i(this.tracks))}catch(d){l.e(this.TAG,\"Error playing video\",t,d.message),r(d)}}),this.videoElement.onseeked=()=>{this.seeked=!0}})}getTracks(){return this.tracks.map(t=>t.id)}getElement(){return this.videoElement||(this.videoElement=this.getVideoElement()),this.videoElement}stop(){var t,i,r;(t=this.videoElement)==null||t.pause(),(i=this.videoElement)==null||i.removeAttribute(\"src\"),this.videoElement=null,(r=this.audioContextManager)==null||r.cleanup(),this.clearCanvasAndTracks()}clearCanvasAndTracks(){var t;this.tracks=[],(t=this.canvasContext)==null||t.clearRect(0,0,this.canvas.width,this.canvas.height),clearTimeout(this.timer)}getVideoElement(){if(this.videoElement)return this.videoElement;let t=document.createElement(\"video\");return t.crossOrigin=\"anonymous\",t.addEventListener(\"timeupdate\",i=>this.emit(\"progress\",i)),t.addEventListener(\"ended\",()=>{this.emit(\"ended\",null)}),this.audioContextManager=new nt(t),t}createCanvas(){this.canvas||(this.canvas=document.createElement(\"canvas\"),this.canvasContext=this.canvas.getContext(\"2d\"))}};var bi={audio:{list:[],currentIndex:-1,isAutoplayOn:!0},video:{list:[],currentIndex:-1,isAutoplayOn:!0}},Lt=class extends Ue{constructor(t,i){super();this.sdk=t;this.eventBus=i;this.state={audio:m({},bi.audio),video:m({},bi.video)};this.TAG=\"[PlaylistManager]\";this.handlePausePlaylist=r=>c(this,[r],function*({enabled:t,track:i}){var o;if(t)return;let s;i.source===\"audioplaylist\"&&(s=\"audio\"),i.source===\"videoplaylist\"&&(s=\"video\"),s&&((o=this.getElement(s))==null||o.pause())});this.addTrack=(t,i)=>c(this,null,function*(){yield this.sdk.addTrack(t,i),l.d(this.TAG,\"Playlist track added\",ui(t))});this.removeTrack=t=>c(this,null,function*(){yield this.sdk.removeTrack(t,!0),l.d(this.TAG,\"Playlist track removed\",t)});this.audioManager=new Ei,this.videoManager=new Pi,this.addListeners()}getList(t=\"audio\"){return this.state[t].list}setList(t){if(!t||t.length===0){l.w(this.TAG,\"Please pass in a list of HMSPlaylistItem's\");return}t.forEach(i=>{this.state[i.type].list.find(r=>r.id===i.id)||this.state[i.type].list.push(i)})}clearList(t){return c(this,null,function*(){this.isPlaying(t)&&(yield this.stop(t)),this.state[t].list=[]})}removeItem(t,i){return c(this,null,function*(){let{list:r,currentIndex:s}=this.state[i],o=r.findIndex(n=>t===n.id);return o>-1?(s===o&&this.isPlaying(i)&&(yield this.stop(i)),r.splice(o,1),!0):!1})}seek(t,i=\"audio\"){let{currentIndex:r}=this.state[i];if(r===-1)throw S.PlaylistErrors.NoEntryToPlay(\"PLAYLIST\",\"No item is currently playing\");let s=this.getElement(i);if(s){let o=Math.max(s.currentTime+t,0);s.currentTime=Math.min(o,s.duration)}}seekTo(t,i=\"audio\"){let{currentIndex:r}=this.state[i];if(r===-1)throw S.PlaylistErrors.NoEntryToPlay(\"PLAYLIST\",\"No item is currently playing\");if(t<0)throw Error(\"value cannot be negative\");let s=this.getElement(i);s&&(s.currentTime=Math.min(t,s.duration))}setVolume(t,i=\"audio\"){if(t<0||t>100)throw Error(\"Please pass a valid number between 0-100\");let r=this.getElement(i);r&&(r.volume=t*.01)}getVolume(t=\"audio\"){let i=this.getElement(t);return i?Math.floor(i.volume*100):0}getCurrentTime(t=\"audio\"){let i=this.getElement(t);return(i==null?void 0:i.currentTime)||0}getCurrentIndex(t=\"audio\"){return this.state[t].currentIndex}getCurrentProgress(t=\"audio\"){var n;let{list:i,currentIndex:r}=this.state[t],s=(n=i[r])==null?void 0:n.url,o=this.getElement(t);return!s||!o?0:Math.floor(100*(o.currentTime/o.duration))}getCurrentSelection(t=\"audio\"){let{list:i,currentIndex:r}=this.state[t];if(r!==-1)return i[r]}isPlaying(t=\"audio\"){let i=this.getElement(t);return!!i&&!i.paused}setIsAutoplayOn(t=\"audio\",i){this.state[t].isAutoplayOn=i}getPlaybackRate(t=\"audio\"){let i=this.getElement(t);return i?i.playbackRate:1}setPlaybackRate(t=\"audio\",i){if(i<.25||i>2)throw Error(\"Please pass a value between 0.25 and 2.0\");let r=this.getElement(t);r&&(r.playbackRate=i)}setEnabled(s,o){return c(this,arguments,function*(t,{id:i,type:r=\"audio\"}){let d=this.state[r].list.findIndex(p=>p.id===i);if(!i||d===-1){l.w(this.TAG,\"Pass a valid id\");return}let u=this.state[r].list[d].url;t?yield this.play(u,r):yield this.pause(u,r),this.state[r].currentIndex=d,this.setDuration(r)})}playNext(){return c(this,arguments,function*(t=\"audio\"){let{list:i,currentIndex:r}=this.state[t];if(r>=i.length-1)throw S.PlaylistErrors.NoEntryToPlay(\"PLAYLIST\",\"Reached end of playlist\");yield this.play(i[r+1].url,t),this.state[t].currentIndex=r+1,this.setDuration(t)})}playPrevious(){return c(this,arguments,function*(t=\"audio\"){let{list:i,currentIndex:r}=this.state[t];if(r<=0)throw S.PlaylistErrors.NoEntryToPlay(\"PLAYLIST\",\"Reached start of playlist\");yield this.play(i[r-1].url,t),this.state[t].currentIndex=r-1,this.setDuration(t)})}stop(){return c(this,arguments,function*(t=\"audio\"){var r;let i=t===\"audio\"?this.audioManager:this.videoManager;(r=i.getElement())==null||r.pause(),yield this.removeTracks(t),i.stop(),this.state[t].currentIndex=-1})}cleanup(){this.state={audio:m({},bi.audio),video:m({},bi.video)},this.eventBus.localAudioEnabled.unsubscribe(this.handlePausePlaylist),this.eventBus.localVideoEnabled.unsubscribe(this.handlePausePlaylist),this.audioManager.stop(),this.videoManager.stop()}onProgress(t){this.videoManager.on(\"progress\",()=>{try{t({type:\"video\",progress:this.getCurrentProgress(\"video\")})}catch(i){l.e(this.TAG,\"Error in onProgress callback\")}}),this.audioManager.on(\"progress\",()=>{try{t({type:\"audio\",progress:this.getCurrentProgress(\"audio\")})}catch(i){l.e(this.TAG,\"Error in onProgress callback\")}})}onNewTrackStart(t){this.on(\"newTrackStart\",t)}onPlaylistEnded(t){this.on(\"playlistEnded\",t)}onCurrentTrackEnded(t){this.on(\"currentTrackEnded\",t)}getElement(t=\"audio\"){return t===\"audio\"?this.audioManager.getElement():this.videoManager.getElement()}removeTracks(){return c(this,arguments,function*(t=\"audio\"){let r=(t===\"audio\"?this.audioManager:this.videoManager).getTracks();for(let s of r)yield this.removeTrack(s)})}play(r){return c(this,arguments,function*(t,i=\"audio\"){let s=i===\"audio\"?this.audioManager:this.videoManager,o=s.getElement();if(this.isItemCurrentlyPlaying(t,i)){l.w(this.TAG,`The ${i} is currently playing`);return}if(o!=null&&o.src.includes(t))yield o.play();else{o==null||o.pause();let n=yield s.play(t);for(let d of n)yield this.addTrack(d,i===\"audio\"?\"audioplaylist\":\"videoplaylist\")}})}isItemCurrentlyPlaying(t,i){let r=this.getElement(i);return!!(r&&!r.paused&&r.src.includes(t))}setDuration(t=\"audio\"){let i=this.getElement(t),{list:r,currentIndex:s}=this.state[t];r[s]&&(r[s].duration=(i==null?void 0:i.duration)||0),this.emit(\"newTrackStart\",r[s])}pause(r){return c(this,arguments,function*(t,i=\"audio\"){let s=this.getElement(i);s&&!s.paused&&s.src.includes(t)?(s.pause(),l.d(this.TAG,\"paused url\",t)):l.w(this.TAG,\"The passed in url is not currently playing\")})}addListeners(){this.audioManager.on(\"ended\",()=>this.handleEnded(\"audio\")),this.videoManager.on(\"ended\",()=>this.handleEnded(\"video\")),this.eventBus.localAudioEnabled.subscribe(this.handlePausePlaylist),this.eventBus.localVideoEnabled.subscribe(this.handlePausePlaylist)}handleEnded(){return c(this,arguments,function*(t=\"audio\"){let{list:i,currentIndex:r,isAutoplayOn:s}=this.state[t];r===i.length-1?(yield this.stop(t),this.emit(\"playlistEnded\",t)):s?this.playNext(t):yield this.pause(i[r].url,t),this.emit(\"currentTrackEnded\",i[r])})}};var F=a=>a.room,Go=a=>a.errors,Tm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Go,a=>a.length===0?null:a.at(-1)),fm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,a=>a.id),z=a=>a.peers,Ai=a=>a.messages.byID,la=a=>a.messages.allIDs,N=a=>a.tracks,ua=a=>a.settings,zr=a=>a.appData,vm=a=>a.devices,Wo=a=>a.speakers,Mm=a=>a.connectionQualities,Be=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([F],a=>a&&a.isConnected),ym=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([Be,F],(a,e)=>a?e.peerCount!==void 0?e.peerCount||1:e.peers.length:Math.max(e.peerCount!==void 0?e.peerCount:e.peers.length-1,0)),$o=a=>a.hideLocalPeer,ke=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([F,z,$o],(a,e,t)=>t?a.peers.filter(i=>a.localPeer!==i).map(i=>e[i]):a.peers.map(i=>e[i])),Ko=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(N,a=>Object.values(a)),re=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,z,(a,e)=>e[a.localPeer]),Ie=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,a=>a.localPeer),km=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(re,a=>a==null?void 0:a.name),Em=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(re,a=>a==null?void 0:a.roleName),le=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(re,a=>a==null?void 0:a.audioTrack),Z=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(re,a=>a==null?void 0:a.videoTrack),qo=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(re,a=>a==null?void 0:a.auxiliaryTracks),pa=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([le,Z,qo],(a,e,t)=>{let i=t?[...t]:[];return a&&i.unshift(a),e&&i.unshift(e),i}),Pm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(ke,a=>a.filter(e=>!e.isLocal)),bm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(z,Wo,(a,e)=>{let t=Object.entries(e).sort((i,r)=>{var n,d;let s=((n=i[1])==null?void 0:n.audioLevel)||0;return(((d=r[1])==null?void 0:d.audioLevel)||0)>s?1:-1});if(t.length>0&&t[0][1].audioLevel&&t[0][1].audioLevel>0){let i=t[0][1].peerID;if(i in a)return a[i]}return null}),Am=a=>{let e=re(a);return ze(a,e==null?void 0:e.audioTrack)},Yr=a=>{let e=re(a);return ze(a,e==null?void 0:e.videoTrack)},ha=a=>{let e=re(a);return ys(a,e==null?void 0:e.videoTrack)},Xr=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(re,N,(a,e)=>{let{video:t,audio:i}=Fe(e,a);return!!(t||i)}),jo=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(z,N,(a,e)=>{let t;for(let i in a){let r=a[i],{video:s,audio:o}=Fe(e,r);if(s)return r;o&&!t&&(t=r)}return t}),Im=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(jo,a=>!!a),Rm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(z,N,(a,e)=>{for(let t in a){let i=a[t],{audio:r,video:s}=Fe(e,i);if(!s&&r)return i}}),Hm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(z,N,(a,e)=>{let t=[],i=[];for(let r in a){let s=a[r],{video:o,audio:n}=Fe(e,s);o?t.push(s):n&&i.push(s)}return t.concat(i)}),Cm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(z,N,(a,e)=>{for(let t in e){let i=e[t];if(ft(i)&&Tt(i)&&i.peerId)return a[i.peerId]}}),Lm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(z,N,(a,e)=>{for(let t in e){let i=e[t];if(ci(i)&&i.peerId)return a[i.peerId]}}),Dm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Ko,a=>a.filter(Ms)),wm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(la,a=>a.length),_m=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Ai,a=>Object.values(a).filter(e=>!e.read).length),Dt=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(la,Ai,(a,e)=>{let t=[];return a.forEach(i=>{t.push(e[i])}),t}),Jo=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Dt,a=>a.filter(e=>{var t;return!e.recipientPeer&&!(e.recipientRoles&&((t=e.recipientRoles)==null?void 0:t.length)>0)})),Nm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Jo,a=>a.filter(e=>!e.read).length),se=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([F],a=>a&&a.roomState),ma=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(se,a=>a===\"Preview\"),Om=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,a=>a.roomState!==\"Disconnected\"),xm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,a=>!a.transcriptions||a.transcriptions.length<=0?!1:a.transcriptions.some(e=>e.mode===\"caption\"&&e.state===\"started\")),Ee=a=>a.roles,Um=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([Ee],a=>Object.keys(a)),ct=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([re,Ee],(a,e)=>a!=null&&a.roleName?e[a.roleName]:null),Qo=a=>{var e;return(e=a.preview)==null?void 0:e.asRole},Sa=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([Qo,Ee],(a,e)=>a?e[a]:null),Bm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([ct],a=>{var e;return(e=a==null?void 0:a.subscribeParams)!=null&&e.subscribeToRoles?a.subscribeParams.subscribeToRoles.length>0:!1}),ga=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(ct,a=>a==null?void 0:a.permissions),Vm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,a=>a.recording),Fm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,a=>a.rtmp),Gm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,a=>a.hls),Wm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,a=>a.transcriptions),$m=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,a=>a.sessionId),Km=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,a=>a.startedAt),qm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,a=>!!a.isLargeRoom),jm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,a=>!!a.isEffectsEnabled),Jm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,a=>!!a.isVBEnabled),Qm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,a=>a.effectsKey),zm=a=>a.templateAppData,Ym=a=>a.sessionMetadata,Ta=a=>a.polls,Xm=a=>Object.values(a.polls),Zm=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(ke,a=>a.filter(e=>e.isHandRaised)),zo=a=>a.whiteboards,eS=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(zo,a=>Object.values(a)[0]);var va=(a=\"audio\")=>e=>e.playlist[a].list,Zr=(a=\"audio\")=>e=>e.playlist[a].selection,Ma=(a=\"audio\")=>e=>e.playlist[a].progress,ya=(a=\"audio\")=>e=>e.playlist[a].currentTime,ka=(a=\"audio\")=>e=>e.playlist[a].playbackRate,Ea=(a=\"audio\")=>e=>e.playlist[a].volume,Pa=(a=\"audio\")=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(va(a),e=>Object.values(e)),ba=(a=\"audio\")=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(va(a),Zr(a),(e,t)=>{if(t.id)return e[t.id]}),Aa={selection:Zr(\"audio\"),progress:Ma(\"audio\"),currentTime:ya(\"audio\"),playbackRate:ka(\"audio\"),volume:Ea(\"audio\"),list:Pa(\"audio\"),selectedItem:ba(\"audio\")},Ia={selection:Zr(\"video\"),progress:Ma(\"video\"),currentTime:ya(\"video\"),playbackRate:ka(\"video\"),volume:Ea(\"video\"),list:Pa(\"video\"),selectedItem:ba(\"video\")};function H(a){return e=>t=>a(t,e)}var wt=\"HMS-Store:\",b=class{static v(e,...t){this.log(0,e,...t)}static d(...e){this.log(1,...e)}static i(...e){this.log(2,...e)}static w(...e){this.log(3,...e)}static e(...e){this.log(6,...e)}static time(e){this.log(4,\"[HMSPerformanceTiming]\",e)}static timeEnd(e){this.log(5,\"[HMSPerformanceTiming]\",e,e)}static cleanup(){performance.clearMarks(),performance.clearMeasures()}static log(e,...t){if(!(this.level.valueOf()>e.valueOf()))switch(e){case 0:{console.log(wt,...t);break}case 1:{console.debug(wt,...t);break}case 2:{console.info(wt,...t);break}case 3:{console.warn(wt,...t);break}case 6:{console.error(wt,...t);break}case 4:{performance.mark(t[1]);break}case 5:{let i=t[0],r=t[1];try{let s=performance.measure(r,r);this.log(1,i,r,s==null?void 0:s.duration),performance.clearMarks(r),performance.clearMeasures(r)}catch(s){this.log(1,i,r,s)}break}}}};b.level=0;var es=(a,e)=>e,_t=(a,e)=>e,Ra=(a,e)=>e,Yo=(a,e)=>e,Xo=(a,e)=>e,Y=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([z,es],(a,e)=>e?a[e]:null),ts=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([N,_t],(a,e)=>e?a[e]:null),Zo=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([N,_t],(a,e)=>{if(!e)return null;let t=a[e];return(t==null?void 0:t.type)===\"video\"?t:null}),en=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([N,_t],(a,e)=>{if(!e)return null;let t=a[e];return(t==null?void 0:t.type)===\"audio\"?t:null}),tn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([N,_t],(a,e)=>{if(!e)return null;let t=a[e];return(t==null?void 0:t.type)===\"audio\"&&(t==null?void 0:t.source)===\"screen\"?t:null}),rn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([N,_t],(a,e)=>{if(!e)return null;let t=a[e];return(t==null?void 0:t.type)===\"video\"&&(t==null?void 0:t.source)===\"screen\"?t:null}),sn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([Ta,Xo],(a,e)=>e?a[e]:null),ee=H(Y),uS=H((0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([zr,Yo],(a,e)=>{if(a)return e?a[e]:a}));function pS(a){return e=>{if(e.sessionStore)return a?e.sessionStore[a]:e.sessionStore}}var hS=(...a)=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([zr],e=>{if(e){if(a&&a.length>0){let t=e;for(let i of a){if(!i)return t;t=t==null?void 0:t[i]}return t}return e}}),mS=H((0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Y,a=>a==null?void 0:a.name)),SS=H((0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Y,a=>a==null?void 0:a.type)),Ii=H(ts),Ha=H(Zo),gS=H(en),TS=H(tn),fS=H(rn),an=H((a,e)=>{let t=Y(a,e);if(t&&t.videoTrack&&t.videoTrack!==\"\")return a.tracks[t.videoTrack]}),on=H((a,e)=>{let t=Y(a,e);if(t&&t.audioTrack&&t.audioTrack!==\"\")return a.tracks[t.audioTrack]}),vS=an,MS=H((a,e)=>{let t=Y(a,e);return(t==null?void 0:t.auxiliaryTracks.map(i=>a.tracks[i]))||[]}),Ca=(a,e)=>e?a.speakers[e]:null,yS=H((0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Ca,a=>(a==null?void 0:a.audioLevel)||0)),nn=(a,e)=>{let t=on(e)(a);return Ca(a,t==null?void 0:t.id)},kS=H((0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(nn,a=>(a==null?void 0:a.audioLevel)||0)),ES=H((a,e)=>{if(e)return a.connectionQualities[e]}),PS=H((a,e)=>{let t=Y(a,e);if(t){let i=t==null?void 0:t.auxiliaryTracks.find(r=>gt(a.tracks[r]));return i?a.tracks[i]:void 0}}),bS=H((0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(N,Y,(a,e)=>{let t=e==null?void 0:e.auxiliaryTracks.find(i=>{let r=a[i];return ft(r)&&Tt(r)});return t?a[t]:void 0})),AS=H((0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(N,Y,(a,e)=>{let t=e==null?void 0:e.auxiliaryTracks.find(i=>{let r=a[i];return ft(r)&&gt(r)});return t?a[t]:void 0})),IS=H((0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(N,Y,(a,e)=>{let t=e==null?void 0:e.auxiliaryTracks.find(i=>{let r=a[i];return ci(r)&&gt(r)});return t?a[t]:void 0})),La=H((0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(N,Y,(a,e)=>Fe(a,e))),RS=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(La(a),e=>e.video),Da=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(La(a),e=>e.audio),HS=H((a,e)=>{let t=Y(a,e);return ze(a,t==null?void 0:t.audioTrack)}),CS=H((a,e)=>{let t=Y(a,e);return ze(a,t==null?void 0:t.videoTrack)}),wa=H((a,e)=>{if(e&&a.tracks[e])return a.tracks[e].volume===0}),LS=H((a,e)=>{let t=Y(a,e);return wa(t==null?void 0:t.audioTrack)(a)}),DS=H((a,e)=>{let t=Da(e)(a);return wa(t==null?void 0:t.id)(a)}),_a=H((a,e)=>{let t=ts(a,e);if(t){if(t.type!==\"audio\"){b.w(\"Please pass audio track here\");return}return t.volume}}),wS=H((a,e)=>{let t=Y(a,e);return _a(t==null?void 0:t.audioTrack)(a)}),_S=H((a,e)=>{let t=Da(e)(a);return _a(t==null?void 0:t.id)(a)}),NS=H((a,e)=>{let t=ts(a,e);if(t){if(t.type!==\"video\"){b.w(\"Please pass video track here\");return}return t.layer}}),Na=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([Dt,Ie,es],(a,e,t)=>{if(t)return a.filter(i=>{var r;return!i.recipientPeer&&!((r=i.recipientRoles)!=null&&r.length)||i.sender&&![e,t].includes(i.sender)?!1:[e,t].includes(i.recipientPeer)})}),Oa=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([Dt,Ra],(a,e)=>{if(e)return a.filter(t=>{var i,r;return(i=t.recipientRoles)!=null&&i.length?(r=t.recipientRoles)==null?void 0:r.includes(e):!1})}),cn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Dt,a=>a.filter(e=>{var t;return!e.recipientPeer&&!((t=e.recipientRoles)!=null&&t.length)})),dn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([Oa,Ra],a=>a?a.filter(e=>!e.read).length:0),ln=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([Na,es],a=>a?a.filter(e=>!e.read).length:0),OS=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(cn,a=>a.filter(e=>!e.read).length),xS=H(Na),US=H(Oa),BS=H(dn),VS=H(ln),FS=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([ke],e=>e.filter(t=>t.roleName===a)),GS=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([ke],e=>e.filter(t=>t.roleName?a.includes(t.roleName):!1)),WS=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(ee(a),e=>{try{return e!=null&&e.metadata&&e.metadata!==\"\"?JSON.parse(e.metadata):{}}catch(t){return console.error(\"cannot parse peer metadata\",t),{}}}),$S=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(ee(a),e=>!!(e!=null&&e.isHandRaised)),KS=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(ee(a),e=>e==null?void 0:e.name),xa=H(sn),qS=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Ai,e=>e[a]),jS=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(ct,e=>e!=null&&e.permissions.transcriptions?e.permissions.transcriptions[a].length>0:!1);var XS=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([z,N],(a,e)=>Object.values(a).map(i=>{var r;return{peer:i,isAudioEnabled:i.audioTrack?(r=e[i.audioTrack])==null?void 0:r.enabled:!1}})),un=a=>a.roleChangeRequests[0]||null,ZS=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([un,z,Ee],(a,e,t)=>a?{requestedBy:a.requestedBy?e[a.requestedBy]:void 0,role:t[a.roleName],token:a.token}:null),eg=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([ct],a=>vt(a)),tg=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([Sa],a=>vt(a));var pn=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([Ee],e=>e[a]),og=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(pn(a),e=>vt(e)),hn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([Z,N],(a,e)=>{let t=null;return a&&(t=e[a]),(t==null?void 0:t.plugins)||[]}),mn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([le,N],(a,e)=>{let t=null;return a&&(t=e[a]),(t==null?void 0:t.plugins)||[]}),ng=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([hn],e=>e.includes(a)),cg=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([mn],e=>e.includes(a)),dg=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(ke,e=>e.find(a)),lg=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(ke,e=>e.filter(a)),ug=a=>(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(F,e=>e.joinedAt&&Date.now()-e.joinedAt.getTime()<=a);var Hi={0:\"PEER_JOINED\",1:\"PEER_LEFT\",8:\"ROLE_UPDATED\",10:\"NAME_UPDATED\",11:\"METADATA_UPDATED\",12:\"HAND_RAISE_CHANGED\"},Nt={0:\"TRACK_ADDED\",1:\"TRACK_REMOVED\",2:\"TRACK_MUTED\",3:\"TRACK_UNMUTED\",5:\"TRACK_DEGRADED\",6:\"TRACK_RESTORED\",4:\"TRACK_DESCRIPTION_CHANGED\"},Ci={0:\"POLL_CREATED\",1:\"POLL_STARTED\",2:\"POLL_STOPPED\",4:\"POLL_VOTES_UPDATED\",3:\"POLLS_LIST\"},Ua={TRANSCRIPTION_STATE_UPDATED:\"TRANSCRIPTION_STATE_UPDATED\"};var is=\"hmsNotification\",Li=class{constructor(e){this.id=0;this.onNotification=(e,t)=>{let i=r=>{if(t){let s;if(Array.isArray(t)?s=t.includes(r.type):s=t===r.type,!s)return}e(r)};return this.eventEmitter.addListener(is,i),()=>{this.eventEmitter.removeListener(is,i)}};this.store=e,this.eventEmitter=new eventemitter2__WEBPACK_IMPORTED_MODULE_5__.EventEmitter2({maxListeners:Object.keys(Pr).length})}sendPlaylistTrackEnded(e){let t=this.createNotification(\"PLAYLIST_TRACK_ENDED\",e,\"info\");this.emitEvent(t)}sendDeviceChange(e){var i;let t=this.createNotification(\"DEVICE_CHANGE_UPDATE\",e,e.error?\"error\":\"info\",`Selected ${e.type} device - ${(i=e.selection)==null?void 0:i.label}`);this.emitEvent(t)}sendLeaveRoom(e){var r;let t=(r=e.requestedBy)==null?void 0:r.name,i=this.createNotification(e.roomEnded||!t?\"ROOM_ENDED\":\"REMOVED_FROM_ROOM\",e,\"info\",`${e.roomEnded?\"Room ended\":\"Removed from room\"} ${t?`by ${t}`:\"\"}`);this.emitEvent(i)}sendPeerList(e){if(e.length===0)return;let t=this.createNotification(\"PEER_LIST\",e,\"info\");this.emitEvent(t)}sendPeerUpdate(e,t){let i=this.store.getState(ee(t==null?void 0:t.id))||t,r=Hi[e];if(r&&i){let s=this.createNotification(r,i,\"info\");this.emitEvent(s)}}sendTrackUpdate(e,t){let i=this.store.getState(Ii(t)),r=Nt[e];if(r){let s=this.createNotification(r,i,\"info\");this.emitEvent(s)}}sendMessageReceived(e){let t=this.createNotification(\"NEW_MESSAGE\",e,\"info\");this.emitEvent(t)}sendError(e){let t=this.createNotification(\"ERROR\",e,\"error\");this.emitEvent(t)}sendReconnecting(e){let t=this.createNotification(\"RECONNECTING\",e,\"error\");this.emitEvent(t)}sendReconnected(){let e=this.createNotification(\"RECONNECTED\",null,\"info\");this.emitEvent(e)}sendChangeTrackStateRequest(e){let t=this.createNotification(\"CHANGE_TRACK_STATE_REQUEST\",e,\"info\");this.emitEvent(t)}sendChangeMultiTrackStateRequest(e){let t=this.createNotification(\"CHANGE_MULTI_TRACK_STATE_REQUEST\",e,\"info\");this.emitEvent(t)}sendPollUpdate(e,t){let i=Ci[e],r=this.store.getState(xa(t));if(i){let s=this.createNotification(i,r,\"info\");this.emitEvent(s)}}sendTranscriptionUpdate(e){let t=this.createNotification(Ua.TRANSCRIPTION_STATE_UPDATED,e,\"info\");this.emitEvent(t)}emitEvent(e){this.eventEmitter.emit(is,e)}createNotification(e,t,i,r=\"\"){return this.id++,{id:this.id,type:e,message:r,data:t,severity:i}}};var Di=class{constructor(e){this.queuedUpdates={};this.timers={};this.DEFAULT_INTERVAL_MS=50;this.store=e}setState(e,t,i=this.DEFAULT_INTERVAL_MS){this.queuedUpdates[t]=this.queuedUpdates[t]||[],this.queuedUpdates[t].push(e),!this.timers[t]&&(window?this.timers[t]=window.setTimeout(()=>this.setStateBatched(t),i):this.setStateBatched(t))}setStateBatched(e){var t;if(((t=this.queuedUpdates[e])==null?void 0:t.length)>0){let i=r=>{this.queuedUpdates[e].forEach(s=>{try{s(r)}catch(o){b.w(\"failed to update store\",o)}})};console.time(`timed-${e}`),this.store.namedSetState(i,e),console.timeEnd(`timed-${e}`)}delete this.queuedUpdates[e],window&&this.timers[e]&&(window.clearTimeout(this.timers[e]),delete this.timers[e])}};function Ba(a){return a instanceof ie||a instanceof O}var Va=(a,e)=>{let t=Ot(Object.keys(a),Object.keys(e));for(let i of t){let r=a[i],s=e[i];je(r,s)?(ae(r.auxiliaryTracks,s.auxiliaryTracks)&&(s.auxiliaryTracks=r.auxiliaryTracks),r.groups&&ae(r.groups,s.groups)&&(s.groups=r.groups),Object.assign(r,s)):as(r,s)?delete a[i]:wi(r,s)&&(a[i]=s)}},Fa=(a,e)=>{let t=Ot(Object.keys(a),Object.keys(e));for(let i of t){let r=a[i],s=e[i];je(r,s)?(ss(r,s),Object.assign(r,s)):as(r,s)?delete a[i]:wi(r,s)&&(a[i]=s)}},Ga=(a,e)=>{let t=Ot(Object.keys(a),Object.keys(e));for(let i of t){let r=a[i],s=e[i];je(r,s)?(r.questions&&ae(r.questions,s.questions)&&(s.questions=r.questions),Object.assign(r,s)):wi(r,s)&&(a[i]=s)}},rs=(a,e)=>{let t=Ot(Object.keys(a),Object.keys(e));for(let i of t){let r=a[i],s=e[i];je(r,s)?Object.assign(r,s):as(r,s)?delete a[i]:wi(r,s)&&(a[i]=s)}},Wa=(a,e,t)=>{let i=t.reduce((s,o)=>(s[o.firstTrackId]=Object.values(e[o.getTrackIDBeingSent()]||{}).sort((n,d)=>!n.rid||!d.rid?0:n.rid<d.rid?-1:1),s),{}),r=Ot(Object.keys(a),Object.keys(i));for(let s of r){if(!i[s]){delete a[s];continue}a[s]=i[s]}},ss=(a,e)=>{a.plugins&&ae(a.plugins,e.plugins)&&(e.plugins=a.plugins),a.type===\"video\"&&a.layerDefinitions&&ae(a.layerDefinitions,e.layerDefinitions)&&(e.layerDefinitions=a.layerDefinitions)},je=(a,e)=>a&&e,as=(a,e)=>a&&!e,wi=(a,e)=>!a&&e,ae=(a,e)=>{if(a===e||a.length===0&&(e==null?void 0:e.length)===0)return!0;if(!a||!e||a.length!==e.length)return!1;for(let t=0;t<a.length;t++)if(a[t]!==e[t])return!1;return!0},Ot=(a,e)=>{let t=new Set;for(let i of a)t.add(i);for(let i of e)t.add(i);return Array.from(t)};var _=class a{static convertPeer(e){var t,i,r;return{id:e.peerId,name:e.name,roleName:(t=e.role)==null?void 0:t.name,isLocal:e.isLocal,videoTrack:(i=e.videoTrack)==null?void 0:i.trackId,audioTrack:(r=e.audioTrack)==null?void 0:r.trackId,auxiliaryTracks:e.auxiliaryTracks.map(s=>s.trackId),customerUserId:e.customerUserId,metadata:e.metadata,joinedAt:e.joinedAt,groups:e.groups,isHandRaised:e.isHandRaised,type:e.type}}static convertTrack(e,t){let i={id:e.trackId,source:e.source,type:e.type,enabled:e.enabled,displayEnabled:e.enabled,peerId:e.peerId||t};return this.enrichTrack(i,e),i}static enrichTrack(e,t){let i=t.getMediaTrackSettings();t instanceof ie&&(e.volume=t.getVolume()||0),a.updateDeviceID(e,t),a.enrichLocalTrack(e,t),e.type===\"video\"&&(e.source===\"screen\"?(e.displaySurface=i.displaySurface,a.enrichScreenTrack(e,t)):e.source===\"regular\"&&(e.facingMode=i.facingMode),e.height=i.height,e.width=i.width,a.enrichVideoTrack(e,t)),a.enrichPluginsDetails(e,t)}static enrichLocalTrack(e,t){(t instanceof G||t instanceof de)&&(e.isPublished=t.isPublished)}static updateDeviceID(e,t){var i;t instanceof G||t instanceof de?e.deviceID=t.settings.deviceId:e.deviceID=(i=t.getMediaTrackSettings())==null?void 0:i.deviceId}static enrichVideoTrack(e,t){t instanceof O&&(e.layer=t.getLayer(),e.preferredLayer=t.getPreferredLayer(),e.degraded=t.degraded),(t instanceof O||t instanceof G)&&(ae(t.getSimulcastDefinitions(),e.layerDefinitions)||(e.layerDefinitions=t.getSimulcastDefinitions()))}static enrichScreenTrack(e,t){var i,r;if(t instanceof G){let s=(i=t.getCaptureHandle)==null?void 0:i.call(t);(s==null?void 0:s.handle)!==((r=e.captureHandle)==null?void 0:r.handle)&&(e.captureHandle=s),t.isCurrentTab&&(e.displaySurface=\"selfBrowser\")}}static enrichPluginsDetails(e,t){(t instanceof G||t instanceof de)&&(ae(t.getPlugins(),e.plugins)||(e.plugins=t.getPlugins()))}static convertRoom(e,t){let{recording:i,rtmp:r,hls:s,transcriptions:o}=a.convertRecordingStreamingState(e.recording,e.rtmp,e.hls,e.transcriptions);return{id:e.id,name:e.name,localPeer:t,recording:i,rtmp:r,hls:s,transcriptions:o,sessionId:e.sessionId,startedAt:e.startedAt,joinedAt:e.joinedAt,peerCount:e.peerCount,isLargeRoom:e.large_room_optimization,isEffectsEnabled:e.isEffectsEnabled,disableNoneLayerRequest:e.disableNoneLayerRequest,isVBEnabled:e.isVBEnabled,effectsKey:e.effectsKey,isHipaaEnabled:e.isHipaaEnabled,isNoiseCancellationEnabled:e.isNoiseCancellationEnabled}}static convertMessage(e,t){var i,r,s,o;return{sender:(i=e.peer)==null?void 0:i.peer_id,senderName:(r=e.peer)==null?void 0:r.info.name,senderRole:(s=e.peer)==null?void 0:s.role,senderUserId:(o=e.peer)==null?void 0:o.info.user_id,recipientPeer:e.private?t:void 0,recipientRoles:e.roles,time:new Date(e.timestamp),type:e.info.type,message:e.info.message,id:e.message_id}}static convertRoles(e){let t={};return e&&e.forEach(i=>{t[i.name]=i}),t}static convertRoleChangeRequest(e){var t;return{requestedBy:(t=e.requestedBy)==null?void 0:t.peerId,roleName:e.role.name,token:e.token}}static convertException(e){let t=\"trackType\"in e,i={code:e.code,action:e.action,name:e.name,message:e.message,description:e.description,isTerminal:e.isTerminal,nativeError:e.nativeError,timestamp:new Date};return t&&(i.trackType=e==null?void 0:e.trackType),i}static convertDeviceChangeUpdate(e){let t={devices:e.devices,selection:e.selection,type:e.type};return e.error&&(t.error=this.convertException(e.error)),t}static convertPlaylist(e){let t=this.getConvertedPlaylistType(e,\"audio\"),i=this.getConvertedPlaylistType(e,\"video\");return{audio:t,video:i}}static convertPlaylistItem(e,t){let i=t.type,r=e.getCurrentSelection(i),s=e.isPlaying(i),o=t.url===(r==null?void 0:r.url);return M(m({},t),{type:t.type,selected:o,playing:o&&s})}static getConvertedPlaylistType(e,t){let i={},r=e.getCurrentSelection(t),s=e.getCurrentProgress(t),o=e.getVolume(t),n=e.getList(t),d=e.getCurrentIndex(t);return e.getList(t).forEach(u=>{i[u.id]=a.convertPlaylistItem(e,u)}),{list:i,selection:{id:r==null?void 0:r.id,hasPrevious:d>0,hasNext:d<n.length-1},progress:s,volume:o,currentTime:e.getCurrentTime(t),playbackRate:e.getPlaybackRate(t)}}static convertRecordingStreamingState(e,t,i,r){var s;return{recording:{browser:m({running:!1},e==null?void 0:e.browser),server:m({running:!1},e==null?void 0:e.server),hls:m({running:!1},e==null?void 0:e.hls)},rtmp:m({running:!1},t),hls:{variants:((s=i==null?void 0:i.variants)==null?void 0:s.map(o=>o))||[],running:!!(i!=null&&i.running),error:i==null?void 0:i.error},transcriptions:r||[]}}};var xt=class{constructor(e,t,i,r){this.playlistManager=e;this.syncPlaylistState=i;this.store=r;this.type=t}play(e){return c(this,null,function*(){if(!e){b.w(\"Please pass id to play\");return}yield this.playlistManager.setEnabled(!0,{id:e,type:this.type})})}pause(){return c(this,null,function*(){let e=this.type===\"audio\"?Aa:Ia,t=this.store.getState(e.selection);if(!t.id){b.w(\"No item is currently playing to pause\");return}yield this.playlistManager.setEnabled(!1,{id:t.id,type:this.type})})}playNext(){return c(this,null,function*(){yield this.playlistManager.playNext(this.type)})}playPrevious(){return c(this,null,function*(){yield this.playlistManager.playPrevious(this.type)})}seek(e){this.playlistManager.seek(e,this.type),this.syncPlaylistState(`seekOn${this.type}Playlist`)}seekTo(e){this.playlistManager.seekTo(e,this.type),this.syncPlaylistState(`seekToOn${this.type}Playlist`)}setVolume(e){this.playlistManager.setVolume(e,this.type),this.syncPlaylistState(`setVolumeOn${this.type}Playlist`)}setList(e){this.playlistManager.setList(e),this.syncPlaylistState(`setListOn${this.type}Playlist`)}stop(){return c(this,null,function*(){yield this.playlistManager.stop(this.type),this.syncPlaylistState(`stop${this.type}Playlist`)})}setIsAutoplayOn(e){this.playlistManager.setIsAutoplayOn(this.type,e)}setPlaybackRate(e){this.playlistManager.setPlaybackRate(this.type,e),this.syncPlaylistState(`set${this.type}PlaybackRate`)}removeItem(e){return c(this,null,function*(){let t=yield this.playlistManager.removeItem(e,this.type);return t&&this.syncPlaylistState(`remove${this.type}PlaylistItem`),t})}clearList(){return c(this,null,function*(){yield this.playlistManager.clearList(this.type),this.syncPlaylistState(`clear${this.type}Playlist`)})}};var _i=class{constructor(e,t){this.sdk=e;this.setLocally=t}get sdkSessionStore(){return this.sdk.getSessionStore()}set(e,t){return c(this,null,function*(){let{value:i}=yield this.sdkSessionStore.set(String(e),t);this.setLocally({key:e,value:i})})}observe(e){return c(this,null,function*(){let t=Array.isArray(e)?e.map(i=>String(i)):[String(e)];yield this.sdkSessionStore.observe(t)})}unobserve(e){return c(this,null,function*(){let t=Array.isArray(e)?e.map(i=>String(i)):[String(e)];yield this.sdkSessionStore.unobserve(t)})}};var Ni=class{constructor(e,t){this.TAG=\"[BeamSpeakerLabelsLogger]\";this.intervalMs=100,this.shouldMonitor=!1,this.hasStarted=!1,this.unsubs=[],this.analysers={},this.store=e,this.actions=t}start(){return c(this,null,function*(){if(this.hasStarted)return;this.hasStarted=!0,b.d(\"starting audio level monitor for remote peers\",this.store);let e=this.store.getState(Be);b.d(\"starting audio levels is connected to room\",e),e&&(yield this.monitorAudioLevels());let t=this.store.subscribe(this.monitorAudioLevels.bind(this),Be);this.unsubs.push(t)})}stop(){return c(this,null,function*(){this.hasStarted&&(this.hasStarted=!1,this.shouldMonitor=!1,this.unsubs.forEach(e=>e()),b.d(\"stopped audio level monitor for remote peers\"))})}monitorAudioLevels(){return c(this,null,function*(){if(!this.store.getState(Be)){this.shouldMonitor&&(b.i(\"room no longer connected, stopping audio level monitoring for remote\"),this.shouldMonitor=!1);return}if(this.shouldMonitor)return;b.i(\"monitoring audio levels\"),this.shouldMonitor=!0;let t=()=>{this.shouldMonitor?(this.logAllPeersAudioLevels(),setTimeout(t,this.intervalMs)):b.i(\"stopped monitoring audio levels\")};setTimeout(t,1e3)})}logAllPeersAudioLevels(){return c(this,null,function*(){var r;if(!window.__triggerBeamEvent__)return;let e=this.store.getState(ke),t=e.filter(s=>!!s.audioTrack);b.d(this.TAG,\"Peers Without audio track\",e.filter(s=>!s.audioTrack).map(s=>s.id).join(\",\"));let i=[];for(let s of t){let o=this.actions.getTrackById(s.audioTrack||\"\"),n=(r=o==null?void 0:o.stream)==null?void 0:r.nativeStream;if(s.joinedAt&&n){let d=yield this.getAudioLevel(s,n);b.d(this.TAG,s.id,d),d.level>0&&i.push(d)}}if(i.length>0){let s={event:\"app-audio-level\",data:i};b.d(\"logging audio levels\",JSON.stringify(i)),window.__triggerBeamEvent__(JSON.stringify(s))}})}getAudioLevel(e,t){return c(this,null,function*(){this.analysers[t.id]||(this.analysers[t.id]=this.createAnalyserNode(t));let i=this.analysers[t.id],r=this.calculateAudioLevel(i);return{peerId:e.id,peerName:e.name,level:r}})}createAnalyserNode(e){this.audioContext||(this.audioContext=new AudioContext);let t=this.audioContext.createAnalyser();return this.audioContext.createMediaStreamSource(e).connect(t),t}calculateAudioLevel(e){let t=new Uint8Array(e.fftSize);e.getByteTimeDomainData(t);let i=.009,r=i;for(let n of t)r=Math.max(r,(n-128)/128);let s=(Math.log(i)-Math.log(r))/Math.log(i);return Math.ceil(Math.min(Math.max(s*100,0),100))}};var $a=2e4,Ka=1e4,dt={name:\"diagnostics-role\",priority:1,publishParams:{allowed:[\"audio\",\"video\"],audio:{bitRate:32,codec:\"opus\"},video:{bitRate:100,codec:\"vp8\",frameRate:30,height:720,width:1280},screen:{bitRate:100,codec:\"vp8\",frameRate:10,height:1080,width:1920}},subscribeParams:{subscribeToRoles:[],maxSubsBitRate:3200},permissions:{browserRecording:!1,changeRole:!1,endRoom:!1,hlsStreaming:!1,mute:!1,pollRead:!1,pollWrite:!1,removeOthers:!1,rtmpStreaming:!1,unmute:!1}},qa=\"https://100ms.live/test-audio.wav\";var Oi=class{constructor(){this.networkScores=[];this.lastPushedAt=0}pushScore(e){!e||e<0||(this.networkScores.length===0?(this.networkScores.push(e),this.lastPushedAt=Date.now()):this.addPendingCQSTillNow())}addPendingCQSTillNow(){if(this.networkScores.length>0){let e=(Date.now()-this.lastPushedAt)/1e3;for(;e>0;)this.networkScores.push(this.networkScores[this.networkScores.length-1]),e-=1;this.lastPushedAt=Date.now()}}getCQS(){return this.networkScores.reduce((e,t)=>e+t,0)/this.networkScores.length}};var gn=a=>!!a&&!isNaN(a),oe=a=>a[a.length-1],Ve=(a,e)=>{let t=a.filter(i=>gn(e(i)));return t.reduce((i,r)=>i+(e(r)||0),0)/t.length},xi=class{constructor(e){this.sdk=e;this.peerStatsList=[];this.localAudioTrackStatsList=[];this.localVideoTrackStatsList=[];this.remoteAudioTrackStatsList=[];this.remoteVideoTrackStatsList=[]}handleStatsUpdate(e){return c(this,null,function*(){var n,d,u,p,h,T,g,f;let t=e.getLocalPeerStats();t&&this.peerStatsList.push(t);let i=(u=(d=(n=this.sdk.getLocalPeer())==null?void 0:n.audioTrack)==null?void 0:d.nativeTrack)==null?void 0:u.id,r=(T=(h=(p=this.sdk.getLocalPeer())==null?void 0:p.videoTrack)==null?void 0:h.nativeTrack)==null?void 0:T.id,s=e.getLocalTrackStats();s&&(i&&this.localAudioTrackStatsList.push(s[i]),r&&this.localVideoTrackStatsList.push(s[r]));let o=yield(f=(g=this.sdk.getWebrtcInternals())==null?void 0:g.getSubscribePeerConnection())==null?void 0:f.getStats();o==null||o.forEach(E=>{if(E.type===\"inbound-rtp\"){let v=E.kind===\"audio\"?this.remoteAudioTrackStatsList:this.remoteVideoTrackStatsList,R=Ht(\"bytesReceived\",E,oe(v));v.push(M(m({},E),{bitrate:R}))}})})}buildReport(){var E,v,R,$,ue,ge,pe,St,hs,ms;let e=(E=oe(this.peerStatsList))==null?void 0:E.publish,t=(v=oe(this.peerStatsList))==null?void 0:v.subscribe,i=e!=null&&e.responsesReceived?((e==null?void 0:e.totalRoundTripTime)||0)/e.responsesReceived:0,r=t!=null&&t.responsesReceived?((t==null?void 0:t.totalRoundTripTime)||0)/t.responsesReceived:0,s=Number(((i+r)/2*1e3).toFixed(2)),o=((R=oe(this.remoteAudioTrackStatsList))==null?void 0:R.packetsReceived)||0,n=(($=oe(this.remoteVideoTrackStatsList))==null?void 0:$.packetsReceived)||0,d=this.localAudioTrackStatsList.map(B=>B?Ve(Object.values(B),te=>te.bitrate):0),u=this.localVideoTrackStatsList.map(B=>B?Ve(Object.values(B),te=>te.bitrate):0),p=((ue=oe(this.remoteAudioTrackStatsList))==null?void 0:ue.jitter)||0,h=((ge=oe(this.remoteVideoTrackStatsList))==null?void 0:ge.jitter)||0,T=Math.max(p,h),g=oe(this.localAudioTrackStatsList),f=oe(this.localVideoTrackStatsList);return{combined:{roundTripTime:s,packetsReceived:o+n,packetsLost:(t==null?void 0:t.packetsLost)||0,bytesSent:(e==null?void 0:e.bytesSent)||0,bytesReceived:(t==null?void 0:t.bytesReceived)||0,bitrateSent:Ve(this.peerStatsList,B=>{var te;return(te=B.publish)==null?void 0:te.bitrate}),bitrateReceived:Ve(this.peerStatsList,B=>{var te;return(te=B.subscribe)==null?void 0:te.bitrate}),jitter:T},audio:{roundTripTime:s,packetsReceived:o,packetsLost:((pe=oe(this.remoteAudioTrackStatsList))==null?void 0:pe.packetsLost)||0,bytesReceived:((St=oe(this.remoteAudioTrackStatsList))==null?void 0:St.bytesReceived)||0,bitrateSent:Ve(d,B=>B),bitrateReceived:Ve(this.remoteAudioTrackStatsList,B=>B.bitrate),bytesSent:g?Object.values(g).reduce((B,te)=>B+(te.bytesSent||0),0):0,jitter:p},video:{roundTripTime:s,packetsLost:((hs=oe(this.remoteVideoTrackStatsList))==null?void 0:hs.packetsLost)||0,bytesReceived:((ms=oe(this.remoteVideoTrackStatsList))==null?void 0:ms.bytesReceived)||0,packetsReceived:n,bitrateSent:Ve(u,B=>B),bitrateReceived:Ve(this.remoteVideoTrackStatsList,B=>B.bitrate),bytesSent:f?Object.values(f).reduce((B,te)=>B+(te.bytesSent||0),0):0,jitter:h}}}};var Tn=(n=>(n[n.STARTING=0]=\"STARTING\",n[n.INIT_FETCHED=1]=\"INIT_FETCHED\",n[n.SIGNAL_CONNECTED=2]=\"SIGNAL_CONNECTED\",n[n.ICE_ESTABLISHED=3]=\"ICE_ESTABLISHED\",n[n.MEDIA_CAPTURED=4]=\"MEDIA_CAPTURED\",n[n.MEDIA_PUBLISHED=5]=\"MEDIA_PUBLISHED\",n[n.COMPLETED=6]=\"COMPLETED\",n))(Tn||{});var ja,Ja,Ui=class{constructor(e,t,i,r,s=$a){this.sdk=e;this.sdkListener=t;this.progressCallback=i;this.completionCallback=r;this.connectivityDuration=s;this.wsConnected=!1;this.initConnected=!1;this.isPublishICEConnected=!1;this.isSubscribeICEConnected=!1;this.gatheredPublishICECandidates=[];this.gatheredSubscribeICECandidates=[];this.errors=[];this.isAudioTrackCaptured=!1;this.isVideoTrackCaptured=!1;this.isAudioTrackPublished=!1;this.isVideoTrackPublished=!1;this.cqsCalculator=new Oi;this.timestamp=Date.now();this.onRoomUpdate=this.sdkListener.onRoomUpdate.bind(this.sdkListener);this.onPeerUpdate=this.sdkListener.onPeerUpdate.bind(this.sdkListener);this.onMessageReceived=this.sdkListener.onMessageReceived.bind(this.sdkListener);this.onReconnected=this.sdkListener.onReconnected.bind(this.sdkListener);this.onRoleChangeRequest=this.sdkListener.onRoleChangeRequest.bind(this.sdkListener);this.onRoleUpdate=this.sdkListener.onRoleUpdate.bind(this.sdkListener);this.onChangeTrackStateRequest=this.sdkListener.onChangeTrackStateRequest.bind(this.sdkListener);this.onChangeMultiTrackStateRequest=this.sdkListener.onChangeMultiTrackStateRequest.bind(this.sdkListener);this.onRemovedFromRoom=this.sdkListener.onRemovedFromRoom.bind(this.sdkListener);this.onNetworkQuality=(ja=this.sdkListener.onNetworkQuality)==null?void 0:ja.bind(this.sdkListener);this.onPreview=this.sdkListener.onPreview.bind(this.sdkListener);this.onDeviceChange=(Ja=this.sdkListener.onDeviceChange)==null?void 0:Ja.bind(this.sdkListener);this.onSessionStoreUpdate=this.sdkListener.onSessionStoreUpdate.bind(this.sdkListener);this.onPollsUpdate=this.sdkListener.onPollsUpdate.bind(this.sdkListener);this.onWhiteboardUpdate=this.sdkListener.onWhiteboardUpdate.bind(this.sdkListener);this.handleConnectionQualityUpdate=e=>{let t=e.find(i=>{var r,s;return i.peerID===((s=(r=this.sdk)==null?void 0:r.store.getLocalPeer())==null?void 0:s.peerId)});this.cqsCalculator.pushScore(t==null?void 0:t.downlinkQuality)};this.statsCollector=new xi(e),this.state=0}get state(){return this._state}set state(e){var t;e===void 0||this._state!==void 0&&e<this._state||(this._state=e,(t=this.progressCallback)==null||t.call(this,e))}onICESuccess(e){e?this.isPublishICEConnected=!0:this.isSubscribeICEConnected=!0,this.isPublishICEConnected&&this.isSubscribeICEConnected&&(this.state=3)}onSelectedICECandidatePairChange(e,t){t?this.selectedPublishICECandidate=e:this.selectedSubscribeICECandidate=e}onICECandidate(e,t){t?this.gatheredPublishICECandidates.push(e):this.gatheredSubscribeICECandidates.push(e)}onMediaPublished(e){switch(e.type){case\"audio\":this.isAudioTrackPublished=!0;break;case\"video\":this.isVideoTrackPublished=!0;break;default:break}this.isVideoTrackPublished&&this.isAudioTrackPublished&&(this.state=5)}onInitSuccess(e){this.websocketURL=e,this.initConnected=!0,this.state=1}onSignallingSuccess(){this.wsConnected=!0,this.state=2}onJoin(e){var t,i;this.sdkListener.onJoin(e),(t=this.sdk.getWebrtcInternals())==null||t.onStatsChange(r=>this.statsCollector.handleStatsUpdate(r)),(i=this.sdk.getWebrtcInternals())==null||i.start(),this.cleanupTimer=window.setTimeout(()=>{this.cleanupAndReport()},this.connectivityDuration)}onError(e){this.sdkListener.onError(e),this.errors.push(e),e!=null&&e.isTerminal&&this.cleanupAndReport()}onTrackUpdate(e,t,i){if(this.sdkListener.onTrackUpdate(e,t,i),i.isLocal&&e===0){switch(t.type){case\"audio\":this.isAudioTrackCaptured=!0;break;case\"video\":this.isVideoTrackCaptured=!0;break;default:break}this.isVideoTrackCaptured&&this.isAudioTrackCaptured&&(this.state=4)}}onReconnecting(e){this.sdkListener.onReconnecting(e),this.cqsCalculator.addPendingCQSTillNow()}cleanupAndReport(){var e;clearTimeout(this.cleanupTimer),this.cleanupTimer=void 0,this.state===5&&(this.state=6),(e=this.completionCallback)==null||e.call(this,this.buildReport()),this.sdk.leave()}buildReport(){this.cqsCalculator.addPendingCQSTillNow();let e=this.cqsCalculator.getCQS(),t=this.statsCollector.buildReport();return{testTimestamp:this.timestamp,connectivityState:this.state,errors:this.errors,signallingReport:{isConnected:this.wsConnected,isInitConnected:this.initConnected,websocketUrl:this.websocketURL},mediaServerReport:{stats:t,connectionQualityScore:e,isPublishICEConnected:this.isPublishICEConnected,isSubscribeICEConnected:this.isSubscribeICEConnected,publishICECandidatePairSelected:this.selectedPublishICECandidate,subscribeICECandidatePairSelected:this.selectedSubscribeICECandidate,publishIceCandidatesGathered:this.gatheredPublishICECandidates,subscribeIceCandidatesGathered:this.gatheredSubscribeICECandidates}}}};var Je=class{constructor(e){this.recording={server:{running:!1},browser:{running:!1},hls:{running:!1}};this.rtmp={running:!1};this.hls={running:!1,variants:[]};this.transcriptions=[];this.id=e}};var Bi=(a,e,t)=>c(void 0,null,function*(){let r=Error(\"something went wrong during fetch\");for(let s=0;s<4;s++)try{let o=yield fetch(a,e),n=yield o.clone().json();if(t&&t.length&&!o.ok&&t.includes(n.code))throw S.APIErrors.ServerErrors(n.code,\"GET_TOKEN\",n.message,!1);return o}catch(o){r=o}throw[\"Failed to fetch\",\"NetworkError\"].some(s=>r.message.includes(s))?S.APIErrors.EndpointUnreachable(\"GET_TOKEN\",r.message):r});var Ut=class{constructor(e,t){this.sdk=e;this.sdkListener=t;this.recordedAudio=qa;this.sdk.setIsDiagnostics(!0),this.initSdkWithLocalPeer()}get localPeer(){var e;return(e=this.sdk)==null?void 0:e.store.getLocalPeer()}checkBrowserSupport(){kt(),yt()}requestPermission(e){return c(this,null,function*(){try{let t=yield navigator.mediaDevices.getUserMedia(e);return t.getTracks().forEach(i=>i.stop()),yield this.sdk.deviceManager.init(!0),{audio:t.getAudioTracks().length>0,video:t.getVideoTracks().length>0}}catch(t){throw _e(t,this.sdk.localTrackManager.getErrorType(!!e.video,!!e.audio))}})}startCameraCheck(e){return c(this,null,function*(){var s,o,n,d;if(this.initSdkWithLocalPeer(),!this.localPeer)throw new Error(\"Local peer not found\");this.sdk.store.setSimulcastEnabled(!1),this.localPeer.role=M(m({},dt),{publishParams:M(m({},dt.publishParams),{allowed:[\"video\"]})});let t=new xe().video(new q().deviceId(e||\"default\").build()).build(),i=yield(s=this.sdk)==null?void 0:s.localTrackManager.getLocalTracks({audio:!1,video:!0},t),r=i==null?void 0:i.find(u=>u.type===\"video\");if(!r)throw new Error(\"No video track found\");(o=this.sdk)==null||o.deviceManager.init(!0),this.localPeer.videoTrack=r,(d=(n=this.sdk)==null?void 0:n.listener)==null||d.onPeerUpdate(9,[this.localPeer])})}stopCameraCheck(){var e,t;(t=(e=this.localPeer)==null?void 0:e.videoTrack)==null||t.cleanup(),this.localPeer&&(this.localPeer.videoTrack=void 0)}startMicCheck(s){return c(this,arguments,function*({inputDevice:e,onError:t,onStop:i,time:r=Ka}){var u,p,h,T;this.initSdkWithLocalPeer(g=>{this.stopMicCheck(),t==null||t(g)});let o=yield this.getLocalAudioTrack(e);if((u=this.sdk)==null||u.deviceManager.init(!0),!this.localPeer)throw new Error(\"Local peer not found\");if(!o)throw new Error(\"No audio track found\");this.localPeer.audioTrack=o,(p=this.sdk)==null||p.initPreviewTrackAudioLevelMonitor(),(T=(h=this.sdk)==null?void 0:h.listener)==null||T.onPeerUpdate(9,[this.localPeer]),this.mediaRecorder=new MediaRecorder(o.stream.nativeStream);let n=[];this.mediaRecorder.ondataavailable=function(g){n.push(g.data)},this.mediaRecorder.onstop=()=>{var f,E;let g=new Blob(n,{type:(f=this.mediaRecorder)==null?void 0:f.mimeType});this.recordedAudio=URL.createObjectURL(g),(E=this.onStopMicCheck)==null||E.call(this)},this.mediaRecorder.start();let d=setTimeout(()=>{this.stopMicCheck()},r);this.onStopMicCheck=()=>{clearTimeout(d),i==null||i()}})}stopMicCheck(){var e,t,i;(e=this.mediaRecorder)==null||e.stop(),(i=(t=this.localPeer)==null?void 0:t.audioTrack)==null||i.cleanup(),this.localPeer&&(this.localPeer.audioTrack=void 0)}getRecordedAudio(){return this.recordedAudio}startConnectivityCheck(e,t,i,r){return c(this,null,function*(){if(!this.sdk)throw new Error(\"SDK not found\");this.connectivityCheck=new Ui(this.sdk,this.sdkListener,e,t,r);let s=yield this.getAuthToken(i);yield this.sdk.leave(),yield this.sdk.join({authToken:s,userName:\"diagnostics-test\"},this.connectivityCheck),this.sdk.addConnectionQualityListener({onConnectionQualityUpdate:o=>{var n;(n=this.connectivityCheck)==null||n.handleConnectionQualityUpdate(o)}})})}stopConnectivityCheck(){return c(this,null,function*(){var e;return(e=this.connectivityCheck)==null?void 0:e.cleanupAndReport()})}initSdkWithLocalPeer(e){var r,s,o;this.sdkListener&&((r=this.sdk)==null||r.initStoreAndManagers(M(m({},this.sdkListener),{onError:n=>{e==null||e(n),this.sdkListener.onError(n)}})));let t=new qe({name:\"diagnostics-peer\",role:dt,type:\"regular\"});(s=this.sdk)==null||s.store.addPeer(t);let i=new Je(\"diagnostics-room\");this.sdk.store.setRoom(i),this.sdkListener.onRoomUpdate(\"ROOM_PEER_COUNT_UPDATED\",i),(o=this.sdk)==null||o.deviceManager.init(!0)}getAuthToken(e){return c(this,null,function*(){let t=new URL(\"https://api.100ms.live/v2/diagnostics/token\");e&&t.searchParams.append(\"region\",e);let i=yield Bi(t.toString(),{method:\"GET\"},[429,500,501,502,503,504,505,506,507,508,509,510,511]),r=yield i.json();if(!i.ok)throw S.APIErrors.ServerErrors(r.code,\"GET_TOKEN\",r.message,!1);let{token:s}=r;if(!s)throw Error(r.message);return s})}getLocalAudioTrack(e){return c(this,null,function*(){var r;if(!this.localPeer)return;this.localPeer.role=M(m({},dt),{publishParams:M(m({},dt.publishParams),{allowed:[\"audio\"]})});let t=new xe().audio(new Q().deviceId(e||\"default\").build()).build(),i=yield(r=this.sdk)==null?void 0:r.localTrackManager.getLocalTracks({audio:!0,video:!1},t);return i==null?void 0:i.find(s=>s.type===\"audio\")})}};var Vi=class{constructor(e,t,i){this.isRoomJoinCalled=!1;this.ignoredMessageTypes=[];this.setProgress=({type:e,progress:t})=>{this.setState(i=>{i.playlist[e].progress=t,i.playlist[e].currentTime=this.sdk.getPlaylistManager().getCurrentTime(e)},\"playlistProgress\")};this.syncPlaylistState=e=>{this.setState(t=>{Object.assign(t.playlist,_.convertPlaylist(this.sdk.getPlaylistManager()))},e)};this.sendPeerUpdateNotification=(e,t)=>{let i=this.store.getState(ee(t.peerId)),r=Hi[e]||\"peerUpdate\";if(e===8)this.syncRoomState(r),this.updateMidCallPreviewRoomState(e,t);else if([0,1].includes(e))this.syncRoomState(r),i||(i=this.store.getState(ee(t.peerId)));else if([12,13,14].includes(e))this.syncRoomState(r),i||(i=this.store.getState(ee(t.peerId)));else{let s=_.convertPeer(t);this.setState(o=>{let n=o.peers[s.id];je(n,s)&&(ae(n.auxiliaryTracks,s.auxiliaryTracks)&&(n.auxiliaryTracks=s.auxiliaryTracks),Object.assign(n,s)),i=s},r)}this.hmsNotifications.sendPeerUpdate(e,i)};this.getSDKHMSPeer=e=>this.sdk.getPeerMap()[e];this.setState=(e,t)=>this.store.namedSetState(e,t);this.store=e,this.sdk=t,this.hmsNotifications=i,this.sessionStore=new _i(this.sdk,this.setSessionStoreValueLocally.bind(this)),this.actionBatcher=new Di(e)}submitSessionFeedback(e,t){return this.sdk.submitSessionFeedback(e,t)}getLocalTrack(e){return this.sdk.store.getLocalPeerTracks().find(t=>t.trackId===e)}get interactivityCenter(){return this.sdk.getInteractivityCenter()}setPlaylistSettings(e){this.sdk.updatePlaylistSettings(e)}refreshDevices(){return c(this,null,function*(){yield this.sdk.refreshDevices()})}unblockAudio(){return c(this,null,function*(){yield this.sdk.getAudioOutput().unblockAutoplay()})}setVolume(e,t){return c(this,null,function*(){t?yield this.setTrackVolume(e,t):(yield this.sdk.getAudioOutput().setVolume(e),this.syncRoomState(\"setOutputVolume\"))})}setAudioOutputDevice(e){return c(this,null,function*(){(yield this.sdk.getAudioOutput().setDevice(e))&&this.setState(i=>{i.settings.audioOutputDeviceId=e},\"setAudioOutputDevice\")})}setPreferredLayer(e,t){return c(this,null,function*(){var r;let i=this.getTrackById(e);if(i)if(i instanceof O){if(t===\"none\"){b.d(\"layer none will be ignored\");return}if(((r=this.store.getState(Ha(e)))==null?void 0:r.preferredLayer)===t){b.d(`preferred layer is already ${t}`);return}this.setState(o=>{let n=o.tracks[e];n&&(n.preferredLayer=t)},\"setPreferredLayer\"),yield i.setPreferredLayer(t)}else b.d(`track ${e} is not a remote video track`);else this.logPossibleInconsistency(`track ${e} not present, unable to set preffer layer`)})}getNativeTrackById(e){var t;return(t=this.sdk.store.getTrackById(e))==null?void 0:t.nativeTrack}getTrackById(e){return this.sdk.store.getTrackById(e)}getAuthTokenByRoomCode(e,t){return this.sdk.getAuthTokenByRoomCode(e,t)}preview(e){return c(this,null,function*(){let t=this.store.getState(se);if(t===\"Preview\"||t===\"Connecting\"){this.logPossibleInconsistency(\"attempting to call preview while room is in preview/connecting\");return}try{t!==\"Connected\"&&this.setState(i=>{i.room.roomState=\"Connecting\"},\"connecting\"),yield this.sdkPreviewWithListeners(e)}catch(i){throw b.e(\"Cannot show preview. Failed to connect to room - \",i),i}})}cancelMidCallPreview(){return c(this,null,function*(){return this.sdk.cancelMidCallPreview()})}join(e){return c(this,null,function*(){if(this.isRoomJoinCalled){this.logPossibleInconsistency(\"room join is called again\");return}try{this.isRoomJoinCalled=!0,this.setState(t=>{t.room.roomState=\"Connecting\"},\"join\"),yield this.sdkJoinWithListeners(e)}catch(t){throw this.isRoomJoinCalled=!1,b.e(\"Failed to connect to room - \",t),t}})}leave(){return c(this,null,function*(){let e=this.store.getState(Be),t=!0;e||(t=!1,this.logPossibleInconsistency(\"room leave is called when no room is connected\"));let i=this.store.getState(se);return this.setState(r=>{r.room.roomState=\"Disconnecting\"},\"leaving\"),this.sdk.leave(t).then(()=>{this.resetState(\"leave\"),this.beamSpeakerLabelsLogger&&this.beamSpeakerLabelsLogger.stop().catch(b.e),b.i(\"left room\")}).catch(r=>{b.e(\"error in leaving room - \",r),this.setState(s=>{s.room.roomState=i},\"revertLeave\")})})}setScreenShareEnabled(e,t){return c(this,null,function*(){typeof t==\"boolean\"&&(t={audioOnly:t});try{e?yield this.startScreenShare(t):yield this.stopScreenShare()}catch(i){throw this.hmsNotifications.sendError(_.convertException(i)),i}})}addTrack(e,t=\"regular\"){return c(this,null,function*(){yield this.sdk.addTrack(e,t),this.syncRoomState(\"addTrack\")})}removeTrack(e){return c(this,null,function*(){yield this.sdk.removeTrack(e),this.syncRoomState(\"removeTrack\")})}setLocalAudioEnabled(e){return c(this,null,function*(){let t=this.store.getState(le);t&&(yield this.setEnabledTrack(t,e))})}setLocalVideoEnabled(e){return c(this,null,function*(){let t=this.store.getState(Z);t&&(yield this.setEnabledTrack(t,e))})}setEnabledTrack(e,t){return c(this,null,function*(){var s;if(((s=this.store.getState().tracks[e])==null?void 0:s.enabled)===t){this.logPossibleInconsistency(`local track[${e}] enabled state - ${t}`);return}this.setState(o=>{o.tracks[e]?o.tracks[e].displayEnabled=t:this.logPossibleInconsistency(\"track id not found for setEnabled\")},\"displayEnabled\");try{yield this.setEnabledSDKTrack(e,t),this.syncRoomState(\"setEnabled\")}catch(o){throw this.setState(n=>{n.tracks[e].displayEnabled=!t},\"rollbackDisplayEnabled\"),this.hmsNotifications.sendError(_.convertException(o)),o}let r=t?3:2;this.hmsNotifications.sendTrackUpdate(r,e)})}autoSelectAudioOutput(e){return c(this,null,function*(){yield this.sdk.autoSelectAudioOutput(e)})}setAudioSettings(e){return c(this,null,function*(){let t=this.store.getState(le);t&&(yield this.setSDKLocalAudioTrackSettings(t,e),this.syncRoomState(\"setAudioSettings\"))})}setVideoSettings(e){return c(this,null,function*(){let t=this.store.getState(Z);t&&(yield this.setSDKLocalVideoTrackSettings(t,e),this.syncRoomState(\"setVideoSettings\"))})}switchCamera(){return c(this,null,function*(){let e=this.store.getState(Z);if(e){let t=this.sdk.store.getLocalPeerTracks().find(i=>i.trackId===e);t&&(yield t.switchCamera(),this.syncRoomState(\"switchCamera\"))}})}sendMessage(e){this.sendBroadcastMessage(e)}sendBroadcastMessage(e,t){return c(this,null,function*(){let{message_id:i,timestamp:r}=yield this.sdk.sendBroadcastMessage(e,t);this.updateMessageInStore({message:e,type:t,id:i,time:r})})}sendGroupMessage(e,t,i){return c(this,null,function*(){let r=this.store.getState(Ee),s=t.map(d=>r[d]),{message_id:o,timestamp:n}=yield this.sdk.sendGroupMessage(e,s,i);this.updateMessageInStore({message:e,recipientRoles:t,type:i,id:o,time:n})})}sendDirectMessage(e,t,i){return c(this,null,function*(){let{message_id:r,timestamp:s}=yield this.sdk.sendDirectMessage(e,t,i);this.updateMessageInStore({message:e,recipientPeer:t,type:i,id:r,time:s})})}updateMessageInStore(e){var s;if(!e.message)throw b.w(\"sendMessage\",\"Failed to send message\",e),Error(`sendMessage Failed - ${JSON.stringify(e)}`);if(!!e.type&&this.ignoredMessageTypes.includes(e.type))return;let i=this.sdk.getLocalPeer(),r={read:!0,id:e.id,time:new Date(e.time),message:e.message,type:e.type||\"chat\",recipientPeer:e.recipientPeer,recipientRoles:e.recipientRoles,senderName:i==null?void 0:i.name,sender:i==null?void 0:i.peerId,senderRole:(s=i==null?void 0:i.role)==null?void 0:s.name,ignored:!1};this.setState(o=>{o.messages.byID[r.id]=r,o.messages.allIDs.push(r.id)},\"newMessage\")}setMessageRead(e,t){this.setState(i=>{t?i.messages.byID[t]?i.messages.byID[t].read=e:this.logPossibleInconsistency(\"no message with id is found\"):i.messages.allIDs.forEach(r=>{i.messages.byID[r].read=e})},\"setMessageRead\")}attachVideo(e,t){return c(this,null,function*(){if(this.localAndVideoUnmuting(e))return new Promise(i=>{let r=this.store.subscribe(s=>c(this,null,function*(){s&&(yield this.attachVideoInternal(e,t),r(),i())}),Yr)});yield this.attachVideoInternal(e,t)})}detachVideo(e,t){return c(this,null,function*(){let i=this.getTrackById(e);(i==null?void 0:i.type)===\"video\"?yield this.sdk.detachVideo(i,t):(t&&(t.srcObject=null),b.d(\"possible inconsistency detected - no video track found to remove sink\"))})}addPluginToVideoTrack(e,t){return c(this,null,function*(){return this.addRemoveVideoPlugin(e,\"add\",t)})}addPluginsToVideoStream(e){return c(this,null,function*(){return this.addRemoveMediaStreamVideoPlugins(e,\"add\")})}removePluginsFromVideoStream(e){return c(this,null,function*(){return this.addRemoveMediaStreamVideoPlugins(e,\"remove\")})}addPluginToAudioTrack(e){return c(this,null,function*(){return this.addRemoveAudioPlugin(e,\"add\")})}validateVideoPluginSupport(e){let t={};if(t.isSupported=!1,!e)return b.w(\"no plugin passed in for checking support\"),t.errMsg=\"no plugin passed in for checking support\",t;let i=this.store.getState(Z);if(!i)return b.w(\"video Track not added to local peer yet\"),t.errMsg=\"call this function only after local peer has video track\",t;let r=this.getTrackById(i);return r?t=r.validatePlugin(e):(b.w(`track ${i} not present, unable to validate plugin`),t.errMsg=`track ${i} not present, unable to validate plugin`),t}validateAudioPluginSupport(e){let t={};if(t.isSupported=!1,!e)return b.w('no plugin passed in for checking support\"'),t.errMsg='no plugin passed in for checking support\"',t;let i=this.store.getState(le);if(!i)return b.w(\"audio track not added to local peer yet\"),t.errMsg=\"call this function only after local peer has audio track\",t;let r=this.getTrackById(i);return r?t=r.validatePlugin(e):(b.w(`track ${i} not present, unable to validate plugin`),t.errMsg=`track ${i} not present, unable to validate plugin`),t}removePluginFromVideoTrack(e){return c(this,null,function*(){return this.addRemoveVideoPlugin(e,\"remove\")})}removePluginFromAudioTrack(e){return c(this,null,function*(){return this.addRemoveAudioPlugin(e,\"remove\")})}changeRole(e,t,i=!1){return c(this,null,function*(){yield this.sdk.changeRoleOfPeer(e,t,i)})}changeRoleOfPeer(e,t,i=!1){return c(this,null,function*(){yield this.sdk.changeRoleOfPeer(e,t,i)})}changeRoleOfPeersWithRoles(e,t){return c(this,null,function*(){let i=this.sdk.getRoles().filter(r=>e.includes(r.name));yield this.sdk.changeRoleOfPeersWithRoles(i,t)})}acceptChangeRole(e){return c(this,null,function*(){let t=e.requestedBy?this.getSDKHMSPeer(e.requestedBy.id):void 0;t||b.w(`peer for which role change is requested no longer available - ${e.requestedBy}`);let i={requestedBy:t,role:e.role,token:e.token};yield this.sdk.acceptChangeRole(i),this.removeRoleChangeRequest(e)})}raiseLocalPeerHand(){return c(this,null,function*(){yield this.sdk.raiseLocalPeerHand()})}lowerLocalPeerHand(){return c(this,null,function*(){yield this.sdk.lowerLocalPeerHand()})}raiseRemotePeerHand(e){return c(this,null,function*(){yield this.sdk.raiseRemotePeerHand(e)})}lowerRemotePeerHand(e){return c(this,null,function*(){yield this.sdk.lowerRemotePeerHand(e)})}getPeer(e){return c(this,null,function*(){let t=yield this.sdk.getPeer(e);if(t)return _.convertPeer(t)})}findPeerByName(e){return c(this,null,function*(){let{offset:t,peers:i,eof:r}=yield this.sdk.findPeerByName(e);return{offset:t,eof:r,peers:i.map(s=>_.convertPeer(s))}})}getPeerListIterator(e){let t=this.sdk.getPeerListIterator(e);return{hasNext:()=>t.hasNext(),next:()=>c(this,null,function*(){return(yield t.next()).map(r=>_.convertPeer(r))}),findPeers:()=>c(this,null,function*(){return(yield t.findPeers()).map(r=>_.convertPeer(r))}),getTotal:()=>t.getTotal()}}initAppData(e){this.setState(t=>{t.appData=e},\"initAppData\")}setAppData(e,t,i){let r=(t==null?void 0:t.constructor.name)===\"Object\";this.setState(s=>{if(s.appData)i&&r?Object.assign(s.appData[e],t):s.appData[e]=t;else{let o={[e]:t};s.appData=o}},`setAppData-${e}`)}rejectChangeRole(e){this.removeRoleChangeRequest(e)}endRoom(e,t){return c(this,null,function*(){let i=this.store.getState(ga);if(!(i!=null&&i.endRoom)){b.w(\"You are not allowed to perform this action - endRoom\");return}let r=this.store.getState(se);this.setState(s=>{s.room.roomState=\"Disconnecting\"},\"endingRoom\");try{yield this.sdk.endRoom(e,t),this.resetState(\"endRoom\")}catch(s){b.e(\"error in ending room - \",s),this.setState(o=>{o.room.roomState=r},\"revertEndRoom\")}})}removePeer(e,t){return c(this,null,function*(){var r;let i=(r=this.sdk.getLocalPeer())==null?void 0:r.peerId;e!==i&&(yield this.sdk.removePeer(e,t))})}startRTMPOrRecording(e){return c(this,null,function*(){yield this.sdk.startRTMPOrRecording(e)})}stopRTMPAndRecording(){return c(this,null,function*(){yield this.sdk.stopRTMPAndRecording()})}startHLSStreaming(e){return c(this,null,function*(){yield this.sdk.startHLSStreaming(e)})}stopHLSStreaming(e){return c(this,null,function*(){yield this.sdk.stopHLSStreaming(e)})}startTranscription(e){return c(this,null,function*(){yield this.sdk.startTranscription(e)})}stopTranscription(e){return c(this,null,function*(){yield this.sdk.stopTranscription(e)})}sendHLSTimedMetadata(e){return c(this,null,function*(){yield this.sdk.sendHLSTimedMetadata(e)})}changeName(e){return c(this,null,function*(){yield this.sdk.changeName(e)})}changeMetadata(e){return c(this,null,function*(){typeof e!=\"string\"&&(e=JSON.stringify(e)),yield this.sdk.changeMetadata(e)})}setSessionMetadata(e){return c(this,null,function*(){yield this.sdk.setSessionMetadata(e),this.setState(t=>{t.sessionMetadata=e},\"setSessionMetadata\"),this.setSessionStoreValueLocally({key:\"default\",value:e},\"setSessionMetadata\")})}populateSessionMetadata(){return c(this,null,function*(){let e=yield this.sdk.getSessionMetadata();this.setState(t=>{t.sessionMetadata=e},\"populateSessionMetadata\"),this.setSessionStoreValueLocally({key:\"default\",value:e},\"populateSessionmetadata\")})}setRemoteTrackEnabled(e,t){return c(this,null,function*(){if(typeof e==\"string\"){let i=this.getTrackById(e);i&&Ba(i)?yield this.sdk.changeTrackState(i,t):this.logPossibleInconsistency(`No remote track with ID ${e} found for change track state`)}else Array.isArray(e)&&e.forEach(i=>this.setRemoteTrackEnabled(i,t))})}setRemoteTracksEnabled(e){return c(this,null,function*(){let t={enabled:e.enabled,type:e.type,source:e.source};if(e.roles){let i=this.store.getState(Ee);t.roles=e.roles.map(r=>i[r])}yield this.sdk.changeMultiTrackState(t)})}setLogLevel(e){b.level=e,this.sdk.setLogLevel(e)}setFrameworkInfo(e){this.sdk.setFrameworkInfo(e)}ignoreMessageTypes(e,t=!1){if(t)this.ignoredMessageTypes=e;else for(let i of e)this.ignoredMessageTypes.includes(i)||this.ignoredMessageTypes.push(i)}enableBeamSpeakerLabelsLogging(){return c(this,null,function*(){this.beamSpeakerLabelsLogger||(b.i(\"enabling beam speaker labels logging\"),this.beamSpeakerLabelsLogger=new Ni(this.store,this),yield this.beamSpeakerLabelsLogger.start())})}initDiagnostics(){let e=new Ut(this.sdk,{onJoin:this.onJoin.bind(this),onPreview:this.onPreview.bind(this),onRoomUpdate:this.onRoomUpdate.bind(this),onPeerUpdate:this.onPeerUpdate.bind(this),onTrackUpdate:this.onTrackUpdate.bind(this),onMessageReceived:this.onMessageReceived.bind(this),onError:this.onError.bind(this),onReconnected:this.onReconnected.bind(this),onReconnecting:this.onReconnecting.bind(this),onRoleChangeRequest:this.onRoleChangeRequest.bind(this),onRoleUpdate:this.onRoleUpdate.bind(this),onDeviceChange:this.onDeviceChange.bind(this),onChangeTrackStateRequest:this.onChangeTrackStateRequest.bind(this),onChangeMultiTrackStateRequest:this.onChangeMultiTrackStateRequest.bind(this),onRemovedFromRoom:this.onRemovedFromRoom.bind(this),onNetworkQuality:this.onNetworkQuality.bind(this),onSessionStoreUpdate:this.onSessionStoreUpdate.bind(this),onPollsUpdate:this.onPollsUpdate.bind(this),onWhiteboardUpdate:this.onWhiteboardUpdate.bind(this)});return this.sdk.addAudioListener({onAudioLevelUpdate:this.onAudioLevelUpdate.bind(this)}),this.sdk.addConnectionQualityListener({onConnectionQualityUpdate:this.onConnectionQualityUpdate.bind(this)}),e}resetState(e=\"resetState\"){this.isRoomJoinCalled=!1,b.cleanup(),this.setState(t=>{Object.assign(t,oi())},e)}getDebugInfo(){return this.sdk.getDebugInfo()}sdkJoinWithListeners(e){return c(this,null,function*(){yield this.sdk.join(e,{onJoin:this.onJoin.bind(this),onPreview:this.onPreview.bind(this),onRoomUpdate:this.onRoomUpdate.bind(this),onPeerUpdate:this.onPeerUpdate.bind(this),onTrackUpdate:this.onTrackUpdate.bind(this),onMessageReceived:this.onMessageReceived.bind(this),onError:this.onError.bind(this),onReconnected:this.onReconnected.bind(this),onReconnecting:this.onReconnecting.bind(this),onRoleChangeRequest:this.onRoleChangeRequest.bind(this),onRoleUpdate:this.onRoleUpdate.bind(this),onDeviceChange:this.onDeviceChange.bind(this),onChangeTrackStateRequest:this.onChangeTrackStateRequest.bind(this),onChangeMultiTrackStateRequest:this.onChangeMultiTrackStateRequest.bind(this),onRemovedFromRoom:this.onRemovedFromRoom.bind(this),onNetworkQuality:this.onNetworkQuality.bind(this),onSessionStoreUpdate:this.onSessionStoreUpdate.bind(this),onPollsUpdate:this.onPollsUpdate.bind(this),onWhiteboardUpdate:this.onWhiteboardUpdate.bind(this),onSFUMigration:this.onSFUMigration.bind(this)}),this.sdk.addAudioListener({onAudioLevelUpdate:this.onAudioLevelUpdate.bind(this)}),this.sdk.addConnectionQualityListener({onConnectionQualityUpdate:this.onConnectionQualityUpdate.bind(this)})})}onSFUMigration(){this.syncRoomState(\"SFUMigration\")}onRemovedFromRoom(e){var r;let t=this.store.getState(ee((r=e.requestedBy)==null?void 0:r.peerId));this.hmsNotifications.sendLeaveRoom(M(m({},e),{requestedBy:t||void 0}));let i=e.roomEnded||!t?\"roomEnded\":\"removedFromRoom\";b.i(`resetting state after peer removed ${i}`,e),this.resetState(i)}onDeviceChange(e){let t=e.devices;if(!t)return;let i=this.store.getState(re);if(this.setState(r=>{ae(r.devices.audioInput,t.audioInput)||(r.devices.audioInput=t.audioInput),ae(r.devices.videoInput,t.videoInput)||(r.devices.videoInput=t.videoInput),ae(r.devices.audioOutput,t.audioOutput)||(r.devices.audioOutput=t.audioOutput);let s=this.sdk.getLocalPeer();i!=null&&i.id&&s&&Object.assign(r.settings,this.getMediaSettings(s))},\"deviceChange\"),e.selection&&!e.internal){let r=_.convertDeviceChangeUpdate(e);this.hmsNotifications.sendDeviceChange(r)}}sdkPreviewWithListeners(e){return c(this,null,function*(){yield this.sdk.preview(e,{onPreview:this.onPreview.bind(this),onError:this.onError.bind(this),onReconnected:this.onReconnected.bind(this),onReconnecting:this.onReconnecting.bind(this),onDeviceChange:this.onDeviceChange.bind(this),onRoomUpdate:this.onRoomUpdate.bind(this),onPeerUpdate:this.onPeerUpdate.bind(this),onNetworkQuality:this.onNetworkQuality.bind(this),onTrackUpdate:this.onTrackUpdate.bind(this)}),this.sdk.addAudioListener({onAudioLevelUpdate:this.onAudioLevelUpdate.bind(this)})})}onNetworkQuality(e){this.setState(t=>{var r;let i=t.room.localPeer||((r=this.sdk.getLocalPeer())==null?void 0:r.peerId);i&&(t.connectionQualities[i]={peerID:i,downlinkQuality:e})},\"ConnectionQuality\")}onSessionStoreUpdate(e){this.setSessionStoreValueLocally(e,\"sessionStoreUpdate\")}onPollsUpdate(e,t){let i=Ci[e];this.setState(r=>{let s=t.reduce((o,n)=>{var d;return o[n.id]=M(m({},n),{questions:(d=n.questions)==null?void 0:d.map(u=>{var p,h;return M(m({},u),{answer:u.answer?m({},u.answer):void 0,options:(p=u.options)==null?void 0:p.map(T=>m({},T)),responses:(h=u.responses)==null?void 0:h.map(T=>m({},T))})})}),o},{});Ga(r.polls,s)},i),t.forEach(r=>this.hmsNotifications.sendPollUpdate(e,r.id))}onWhiteboardUpdate(e){this.setState(t=>{t.whiteboards[e.id]=e},\"whiteboardUpdate\")}startScreenShare(e){return c(this,null,function*(){this.store.getState(Xr)?this.logPossibleInconsistency(\"start screenshare is called while it's on\"):(yield this.sdk.startScreenShare(()=>this.syncRoomState(\"screenshareStopped\"),e),this.syncRoomState(\"startScreenShare\"))})}stopScreenShare(){return c(this,null,function*(){this.store.getState(Xr)?(yield this.sdk.stopScreenShare(),this.syncRoomState(\"stopScreenShare\")):this.logPossibleInconsistency(\"stop screenshare is called while it's not on\")})}attachVideoInternal(e,t){return c(this,null,function*(){let i=this.getTrackById(e);i||(i=this.getLocalTrack(e)),i&&i.type===\"video\"?yield this.sdk.attachVideo(i,t):this.logPossibleInconsistency(\"no video track found to add sink\")})}syncRoomState(e){e=`${e}_fullSync`,b.time(`store-sync-${e}`);let t={},i=[],r={},s={},o={},n,d=this.sdk.getPeers();for(let g of d){let f=_.convertPeer(g);t[f.id]=f,i.push(f.id),o[f.id]={peerID:f.id,downlinkQuality:g.networkQuality||-1};let E=[g.audioTrack,g.videoTrack,...g.auxiliaryTracks];for(let v of E){if(!v)continue;let R=_.convertTrack(v);r[R.id]=R}if(g.isLocal){let v=g;n=this.getPreviewFields(v),Object.assign(s,this.getMediaSettings(v))}}let u=this.sdk.getRecordingState(),p=this.sdk.getRTMPState(),h=this.sdk.getHLSState(),T=this.sdk.getTranscriptionState();this.setState(g=>{var v;g.room.peers=i;let f=g.peers,E=g.tracks;Va(f,t),Fa(E,r),Object.assign(g.settings,s),g.room.isConnected&&Object.assign(g.connectionQualities,o),(v=g.preview)!=null&&v.localPeer&&(n!=null&&n.localPeer)?Object.assign(g.preview,n):g.preview=n,Object.assign(g.roles,_.convertRoles(this.sdk.getRoles())),Object.assign(g.playlist,_.convertPlaylist(this.sdk.getPlaylistManager())),Object.assign(g.room,_.convertRecordingStreamingState(u,p,h,T)),Object.assign(g.templateAppData,this.sdk.getTemplateAppData())},e),b.timeEnd(`store-sync-${e}`)}onPreview(e){this.setState(t=>{var i;Object.assign(t.room,_.convertRoom(e,(i=this.sdk.getLocalPeer())==null?void 0:i.peerId)),t.room.roomState=\"Preview\"},\"previewStart\"),this.syncRoomState(\"previewSync\")}onJoin(e){let t=this.sdk.getPlaylistManager();this.audioPlaylist=new xt(t,\"audio\",this.syncPlaylistState.bind(this),this.store),this.videoPlaylist=new xt(t,\"video\",this.syncRoomState.bind(this),this.store),this.syncRoomState(\"joinSync\"),this.setState(i=>{var r;Object.assign(i.room,_.convertRoom(e,(r=this.sdk.getLocalPeer())==null?void 0:r.peerId)),i.room.isConnected=!0,i.room.roomState=\"Connected\"},\"joined\"),t.onProgress(this.setProgress),t.onNewTrackStart(i=>{this.syncPlaylistState(`${i.type}PlaylistUpdate`)}),t.onPlaylistEnded(i=>{this.syncPlaylistState(`${i}PlaylistEnded`)}),t.onCurrentTrackEnded(i=>{this.hmsNotifications.sendPlaylistTrackEnded(_.convertPlaylistItem(t,i)),this.syncPlaylistState(`${i.type}PlaylistItemEnded`)})}onRoomUpdate(e,t){this.setState(i=>{var r;Object.assign(i.room,_.convertRoom(t,(r=this.sdk.getLocalPeer())==null?void 0:r.peerId))},e),e===\"TRANSCRIPTION_STATE_UPDATED\"&&this.hmsNotifications.sendTranscriptionUpdate(t.transcriptions)}onPeerUpdate(e,t){if(![4,5].includes(e)){if(Array.isArray(t)){let i=this.store.getState(z),r=t.filter(o=>!i[o.peerId]);if(this.syncRoomState(\"peersJoined\"),this.store.getState(Be)){let o=[];for(let n of t){let d=this.store.getState(ee(n.peerId));d&&o.push(d)}this.hmsNotifications.sendPeerList(o)}else r.forEach(o=>{let n=this.store.getState(ee(o.peerId));n&&this.hmsNotifications.sendPeerUpdate(0,n)});return}this.sendPeerUpdateNotification(e,t)}}onTrackUpdate(e,t,i){if(e===1)this.hmsNotifications.sendTrackUpdate(e,t.trackId),this.handleTrackRemove(t,i);else if([0,1].includes(e)){let r=Nt[e];this.syncRoomState(r),this.hmsNotifications.sendTrackUpdate(e,t.trackId)}else{let r=Nt[e]||\"trackUpdate\",s=_.convertTrack(t);this.setState(o=>{let n=o.tracks[s.id];je(n,s)&&(ss(n,s),Object.assign(n,s))},r),this.hmsNotifications.sendTrackUpdate(e,t.trackId)}}onMessageReceived(e){let t=_.convertMessage(e,this.store.getState(Ie));t.read=!1,t.ignored=this.ignoredMessageTypes.includes(t.type),t.type===\"hms_transcript\"&&(t.ignored=!0),this.putMessageInStore(t),this.hmsNotifications.sendMessageReceived(t)}putMessageInStore(e){e.ignored||this.actionBatcher.setState(t=>{t.messages.byID[e.id]=e,t.messages.allIDs.push(e.id)},\"newMessage\",150)}onAudioLevelUpdate(e){this.setState(t=>{let i={};e.forEach(s=>{if(!s.track||!s.peer)return;let o=s.track.trackId;i[o]=s.audioLevel,t.speakers[o]||(t.speakers[o]={audioLevel:s.audioLevel,peerID:s.peer.peerId,trackID:o})});let r=Object.entries(t.speakers);for(let[s,o]of r)o.audioLevel=i[s]||0,o.audioLevel===0&&delete t.speakers[s]},\"audioLevel\")}onConnectionQualityUpdate(e){this.setState(t=>{e.forEach(i=>{let r=i.peerID;r&&(t.connectionQualities[r]?Object.assign(t.connectionQualities[r],i):t.connectionQualities[r]=i)})},\"connectionQuality\")}onChangeTrackStateRequest(e){var s;let t=this.store.getState(ee((s=e.requestedBy)==null?void 0:s.peerId)),i=this.getStoreLocalTrackIDfromSDKTrack(e.track),r=this.store.getState(Ii(i));if(!r)return this.logPossibleInconsistency(`Not found track for which track state change was requested, ${e.track}`);e.enabled||this.syncRoomState(\"changeTrackStateRequest\"),this.hmsNotifications.sendChangeTrackStateRequest({requestedBy:t||void 0,track:r,enabled:e.enabled})}onChangeMultiTrackStateRequest(e){var s;let t=this.store.getState(ee((s=e.requestedBy)==null?void 0:s.peerId));e.enabled||this.syncRoomState(\"changeMultiTrackStateRequest\");let i=[],r=this.store.getState(N);for(let o of e.tracks){let n=this.getStoreLocalTrackIDfromSDKTrack(o);n&&r[n]&&i.push(r[n])}this.hmsNotifications.sendChangeMultiTrackStateRequest({requestedBy:t||void 0,tracks:i,enabled:e.enabled,type:e.type,source:e.source})}onReconnected(){this.syncRoomState(\"reconnectedSync\"),this.hmsNotifications.sendReconnected(),this.setState(e=>{e.room.roomState=e.room.isConnected?\"Connected\":\"Preview\"},\"reconnected\")}onReconnecting(e){let t=_.convertException(e);b.e(\"Reconnection: received error from sdk\",t),this.hmsNotifications.sendReconnecting(t),this.setState(i=>{i.room.roomState=\"Reconnecting\",i.errors.push(t)},\"reconnecting\")}onError(e){let t=_.convertException(e);t.isTerminal?(this.leave().then(()=>b.e(\"error from SDK, left room.\")),this.setState(i=>{i.room.roomState=\"Failed\",i.errors.push(t)},\"errorTerminal\")):this.store.getState().errors.length<50&&this.setState(r=>{r.errors.push(t)},\"error\"),this.syncRoomState(\"errorSync\"),this.hmsNotifications.sendError(t),b.e(\"received error from sdk\",t instanceof k?`${t}`:t)}handleTrackRemove(e,t){this.setState(i=>{let r=i.peers[t.peerId],s=i.tracks,o=e.trackId;if(r)if(o===r.audioTrack)delete r.audioTrack;else if(o===r.videoTrack)delete r.videoTrack;else{let n=r.auxiliaryTracks.indexOf(o);n>-1&&r.auxiliaryTracks.splice(n,1)}delete s[o]},\"trackRemoved\")}setEnabledSDKTrack(e,t){return c(this,null,function*(){let i=this.getLocalTrack(e);i?yield i.setEnabled(t):this.logPossibleInconsistency(`track ${e} not present, unable to enabled/disable`)})}setSDKLocalVideoTrackSettings(e,t){return c(this,null,function*(){let i=this.getLocalTrack(e);i?yield i.setSettings(t):this.logPossibleInconsistency(`local track ${e} not present, unable to set settings`)})}setSDKLocalAudioTrackSettings(e,t){return c(this,null,function*(){let i=this.getLocalTrack(e);i?yield i.setSettings(t):this.logPossibleInconsistency(`local track ${e} not present, unable to set settings`)})}getMediaSettings(e){var s;let t=this.store.getState(ua),i=e.audioTrack,r=e.videoTrack;return{audioInputDeviceId:(i==null?void 0:i.settings.deviceId)||t.audioInputDeviceId,videoInputDeviceId:(r==null?void 0:r.settings.deviceId)||t.videoInputDeviceId,audioOutputDeviceId:(s=this.sdk.getAudioOutput().getDevice())==null?void 0:s.deviceId,audioMode:(i==null?void 0:i.settings.audioMode)||\"voice\"}}getPreviewFields(e){var i,r;if(!e.isInPreview())return;let t=_.convertPeer(e);return{localPeer:t.id,audioTrack:t.audioTrack,videoTrack:t.videoTrack,asRole:((i=e.asRole)==null?void 0:i.name)||((r=e.role)==null?void 0:r.name)}}setTrackVolume(e,t){return c(this,null,function*(){let i=this.getTrackById(t);i?i instanceof we?(yield i.setVolume(e),this.setState(r=>{let s=r.tracks[t];s&&s.type===\"audio\"&&(s.volume=e)},\"trackVolume\")):b.w(`track ${t} is not an audio track`):this.logPossibleInconsistency(`track ${t} not present, unable to set volume`)})}localAndVideoUnmuting(e){let t=this.store.getState(re);if((t==null?void 0:t.videoTrack)!==e)return!1;let i=this.store.getState(ha),r=this.store.getState(Yr);return i&&!r}logPossibleInconsistency(e){b.w(\"possible inconsistency detected - \",e)}addRemoveVideoPlugin(e,t,i){return c(this,null,function*(){if(!e){b.w(\"Invalid plugin received in store\");return}let r=this.store.getState(Z);if(r){let s=this.getLocalTrack(r);s?(t===\"add\"?yield s.addPlugin(e,i):t===\"remove\"&&(yield s.removePlugin(e)),this.syncRoomState(`${t}VideoPlugin`)):this.logPossibleInconsistency(`track ${r} not present, unable to ${t} plugin`)}})}addRemoveMediaStreamVideoPlugins(e,t){return c(this,null,function*(){if(e.length===0){b.w(\"Invalid plugin received in store\");return}let i=this.store.getState(Z);if(i){let r=this.getLocalTrack(i);r?(t===\"add\"?yield r.addStreamPlugins(e):t===\"remove\"&&(yield r.removeStreamPlugins(e)),this.syncRoomState(`${t}MediaStreamPlugin`)):this.logPossibleInconsistency(`track ${i} not present, unable to ${t} plugin`)}})}addRemoveAudioPlugin(e,t){return c(this,null,function*(){try{if(!e){b.w(\"Invalid plugin received in store\");return}let i=this.store.getState(le);if(i){let r=this.getLocalTrack(i);r?(t===\"add\"?yield r.addPlugin(e):t===\"remove\"&&(yield r.removePlugin(e)),this.syncRoomState(`${t}AudioPlugin`)):this.logPossibleInconsistency(`track ${i} not present, unable to ${t} plugin`)}}catch(i){console.error(i)}})}onRoleChangeRequest(e){this.setState(t=>{t.roleChangeRequests.length===0&&t.roleChangeRequests.push(_.convertRoleChangeRequest(e))},\"roleChangeRequest\")}removeRoleChangeRequest(e){this.setState(t=>{let i=t.roleChangeRequests.findIndex(r=>r.token===e.token);i!==-1&&t.roleChangeRequests.splice(i,1)},\"removeRoleChangeRequest\")}onRoleUpdate(){this.syncRoomState(\"roleUpdate\")}getStoreLocalTrackIDfromSDKTrack(e){return this.store.getState(pa).find(i=>{var r;return((r=this.getTrackById(i))==null?void 0:r.trackId)===e.trackId})}updateMidCallPreviewRoomState(e,t){t.isLocal&&e===8&&this.store.getState(ma)&&this.setState(i=>{i.room.roomState=\"Connected\"},\"midCallPreviewCompleted\")}setSessionStoreValueLocally(e,t=\"setSessionStore\"){let i=Array.isArray(e)?e:[e];this.setState(r=>{i.forEach(s=>{r.sessionStore[s.key]=s.value})},t)}hasActiveElements(e){let t=Object.keys(this.store.getState().whiteboards).length>0,i=Object.keys(this.store.getState().polls).length>0,r=Object.keys(this.store.getState().peers).length>0,s=e.getState().remoteTrackStats;return r&&(t||i||Object.values(s).some(o=>o&&typeof o.bitrate==\"number\"&&o.bitrate>0))}};var Fi=a=>U?`${a} ${document.title}`:a;var Gi=class{constructor(e,t){this.eventBus=e;this.listener=t;this.TAG=\"[NetworkTestManager]\";this.controller=new AbortController;this.start=e=>c(this,null,function*(){var u;if(!e)return;let{url:t,timeout:i,scoreMap:r}=e,s=this.controller.signal,o=Date.now(),n=0,d=J(i).then(()=>{this.controller.abort()});try{let h=(u=(yield fetch(`${t}?${Date.now()}`,{signal:s})).body)==null?void 0:u.getReader();if(!h)throw Error(\"unable to process request\");let T=()=>c(this,null,function*(){if(h)try{let g=!1;for(;!g;){let{value:f,done:E}=yield h.read();g=E,f&&(n+=f.byteLength,this.sendScore({scoreMap:r,downloadedSize:n,startTime:o}))}}catch(g){g.name!==\"AbortError\"&&l.d(this.TAG,g)}});return Promise.race([T(),d]).then(()=>{this.sendScore({scoreMap:r,downloadedSize:n,startTime:o,finished:!0})}).catch(g=>{l.d(this.TAG,g),this.updateScoreToListener(0),this.eventBus.analytics.publish(y.previewNetworkQuality({error:g.message}))})}catch(p){p.name!==\"AbortError\"?(l.d(this.TAG,p),this.updateScoreToListener(0),this.eventBus.analytics.publish(y.previewNetworkQuality({error:p.message}))):l.d(this.TAG,p)}});this.stop=()=>{this.controller.signal.aborted||this.controller.abort()};this.sendScore=({scoreMap:e,downloadedSize:t,startTime:i,finished:r=!1})=>{let s=(Date.now()-i)/1e3,n=t/1024/s*8,d=-1;for(let u in e){let p=e[u];n>=p.low&&(!p.high||n<=p.high)&&(d=Number(u))}this.updateScoreToListener(d),r&&this.eventBus.analytics.publish(y.previewNetworkQuality({score:d,downLink:n.toFixed(2)}))}}updateScoreToListener(e){var t,i;e!==this.score&&(this.score=e,(i=(t=this.listener)==null?void 0:t.onNetworkQuality)==null||i.call(t,e))}};var Bt=class{constructor(e,t,i,r,s,o){this.store=e;this.transport=t;this.deviceManager=i;this.publish=r;this.removeAuxiliaryTrack=s;this.listener=o;this.handleLocalPeerRoleUpdate=i=>c(this,[i],function*({oldRole:e,newRole:t}){var s;let r=this.store.getLocalPeer();r&&(yield this.diffRolesAndPublishTracks({oldRole:e,newRole:t}),(s=this.listener)==null||s.onPeerUpdate(8,r))});this.diffRolesAndPublishTracks=i=>c(this,[i],function*({oldRole:e,newRole:t}){var g,f,E,v,R,$;let r=new Set(e.publishParams.allowed),s=new Set(t.publishParams.allowed),o=this.removeTrack(r,s,\"video\"),n=this.removeTrack(r,s,\"audio\"),d=this.removeTrack(r,s,\"screen\"),u=this.hasSimulcastDifference((g=e.publishParams.simulcast)==null?void 0:g.video,(f=t.publishParams.simulcast)==null?void 0:f.video),p=this.hasSimulcastDifference((E=e.publishParams.simulcast)==null?void 0:E.screen,(v=t.publishParams.simulcast)==null?void 0:v.screen),h=($=(R=this.store.getLocalPeer())==null?void 0:R.videoTrack)==null?void 0:$.enabled;yield this.removeAudioTrack(n),yield this.removeVideoTracks(o||u),yield this.removeScreenTracks(d||p);let T=this.getSettings();u&&(T.isVideoMuted=!h),yield this.publish(T),yield this.syncDevices(T,t)})}syncDevices(e,t){return c(this,null,function*(){(!e.isAudioMuted||!e.isVideoMuted)&&t.publishParams.allowed.length>0&&(yield this.deviceManager.init(!0))})}removeVideoTracks(e){return c(this,null,function*(){var i;if(!e)return;let t=this.store.getLocalPeer();t!=null&&t.videoTrack&&(t.videoTrack.isPublished?yield this.transport.unpublish([t.videoTrack]):yield t.videoTrack.cleanup(),(i=this.listener)==null||i.onTrackUpdate(1,t.videoTrack,t),t.videoTrack=void 0),yield this.removeAuxTracks(r=>r.source!==\"screen\"&&r.type===\"video\")})}removeAudioTrack(e){return c(this,null,function*(){var i;if(!e)return;let t=this.store.getLocalPeer();t!=null&&t.audioTrack&&(t.audioTrack.isPublished?yield this.transport.unpublish([t.audioTrack]):yield t.audioTrack.cleanup(),(i=this.listener)==null||i.onTrackUpdate(1,t.audioTrack,t),t.audioTrack=void 0),yield this.removeAuxTracks(r=>r.source!==\"screen\"&&r.type===\"audio\")})}removeScreenTracks(e){return c(this,null,function*(){e&&(yield this.removeAuxTracks(t=>t.source===\"screen\"))})}removeAuxTracks(e){return c(this,null,function*(){let t=this.store.getLocalPeer();if(t!=null&&t.auxiliaryTracks){let i=[...t.auxiliaryTracks];for(let r of i)e(r)&&(yield this.removeAuxiliaryTrack(r.trackId))}})}removeTrack(e,t,i){return e.has(i)&&!t.has(i)}hasSimulcastDifference(e,t){var i,r,s;return!e&&!t?!1:((i=e==null?void 0:e.layers)==null?void 0:i.length)!==((r=t==null?void 0:t.layers)==null?void 0:r.length)?!0:!!((s=e==null?void 0:e.layers)!=null&&s.some(o=>{var d;let n=(d=t==null?void 0:t.layers)==null?void 0:d.find(u=>u.rid===o.rid);return(n==null?void 0:n.maxBitrate)!==o.maxBitrate||(n==null?void 0:n.maxFramerate)!==o.maxFramerate}))}getSettings(){let{isAudioMuted:e,isVideoMuted:t}=this.getMutedStatus(),{audioInputDeviceId:i,audioOutputDeviceId:r}=this.getAudioDeviceSettings(),s=this.getVideoInputDeviceId();return{isAudioMuted:e,isVideoMuted:t,audioInputDeviceId:i,audioOutputDeviceId:r,videoDeviceId:s}}getMutedStatus(){var t,i,r;let e=(t=this.store.getConfig())==null?void 0:t.settings;return{isAudioMuted:(i=e==null?void 0:e.isAudioMuted)!=null?i:!0,isVideoMuted:(r=e==null?void 0:e.isVideoMuted)!=null?r:!0}}getAudioDeviceSettings(){var r,s,o;let e=(r=this.store.getConfig())==null?void 0:r.settings,t=((s=this.deviceManager.currentSelection.audioInput)==null?void 0:s.deviceId)||(e==null?void 0:e.audioInputDeviceId)||\"default\",i=((o=this.deviceManager.currentSelection.audioOutput)==null?void 0:o.deviceId)||(e==null?void 0:e.audioOutputDeviceId)||\"default\";return{audioInputDeviceId:t,audioOutputDeviceId:i}}getVideoInputDeviceId(){var t,i;let e=(t=this.store.getConfig())==null?void 0:t.settings;return((i=this.deviceManager.currentSelection.videoInput)==null?void 0:i.deviceId)||(e==null?void 0:e.videoDeviceId)||\"default\"}};var os=class{constructor(){this.TAG=\"[HTTPAnalyticsTransport]\";this.failedEvents=new fe(\"client-events\");this.isConnected=!0;this.env=null;this.websocketURL=\"\"}setEnv(e){this.env=e,this.flushFailedEvents()}setWebsocketEndpoint(e){this.websocketURL=e}sendEvent(e){if(!this.env){this.addEventToStorage(e);return}let t={event:e.name,payload:e.properties,event_id:String(e.timestamp),peer:e.metadata.peer,timestamp:e.timestamp,device_id:e.device_id,cluster:{websocket_url:this.websocketURL}},i=this.env===\"prod\"?ea:ta;fetch(i,{method:\"POST\",headers:{\"Content-Type\":\"application/json\",Authorization:`Bearer ${e.metadata.token}`,user_agent_v2:e.metadata.userAgent},body:JSON.stringify(t)}).then(r=>{if(r.status===401){this.removeFromStorage(e);return}if(r.status!==200)throw Error(r.statusText);this.removeFromStorage(e)}).catch(r=>{l.v(this.TAG,\"Failed to send event\",r,e),this.addEventToStorage(e)})}flushFailedEvents(){let e=this.failedEvents.get();e==null||e.forEach(t=>this.sendEvent(t))}addEventToStorage(e){let t=this.failedEvents.get()||[];t.find(i=>i.timestamp===e.timestamp)||(t.length===100&&t.shift(),t.push(e),this.failedEvents.set(t))}removeFromStorage(e){let t=this.failedEvents.get()||[],i=t.findIndex(r=>r.timestamp===e.timestamp);i>-1&&(t.splice(i,1),this.failedEvents.set(t))}},He=new os;var Vt=class{constructor(e){this.type=e.type,this.source=e.source||\"regular\",this.description=\"\",e instanceof De?(this.mute=!e.enabled,this.track_id=e.publishedTrackId,this.stream_id=e.stream.id):(this.mute=e.mute,this.track_id=e.track_id,this.stream_id=e.stream_id)}};var Ft=class{constructor(){this.TAG=\"[Store]:\";this.knownRoles={};this.peers={};this.tracks=new Map;this.peerTrackStates={};this.speakers=[];this.roleDetailsArrived=!1;this.env=\"prod\";this.simulcastEnabled=!1;this.userAgent=Et(this.env);this.polls=new Map;this.whiteboards=new Map;this.addPermissionToRole=(e,t,i,r)=>{var o;if(!this.knownRoles[e]){l.d(this.TAG,`role ${e} is not present in given roles`,this.knownRoles);return}let s=this.knownRoles[e].permissions;t===\"transcriptions\"&&r?s[t]=M(m({},s[t]),{[r]:[i]}):t===\"whiteboard\"&&(s[t]||(s[t]=[]),(o=s[t])==null||o.push(i))};this.addWhiteboardPluginToRole=e=>{var i,r,s;let t=e==null?void 0:e.permissions;(i=t==null?void 0:t.admin)==null||i.forEach(o=>this.addPermissionToRole(o,\"whiteboard\",\"admin\")),(r=t==null?void 0:t.reader)==null||r.forEach(o=>this.addPermissionToRole(o,\"whiteboard\",\"read\")),(s=t==null?void 0:t.writer)==null||s.forEach(o=>this.addPermissionToRole(o,\"whiteboard\",\"write\"))};this.addTranscriptionsPluginToRole=(e=[])=>{var t,i;for(let r of e)(i=(t=r.permissions)==null?void 0:t.admin)==null||i.forEach(s=>this.addPermissionToRole(s,\"transcriptions\",\"admin\",r.mode))};this.handleNoiseCancellationPlugin=e=>{this.room&&(this.room.isNoiseCancellationEnabled=!!(e!=null&&e.enabled)&&!!this.room.isNoiseCancellationEnabled)}}getConfig(){return this.config}setSimulcastEnabled(e){this.simulcastEnabled=e}removeRemoteTracks(){this.tracks.forEach(e=>{(e instanceof ie||e instanceof O)&&(this.removeTrack(e),delete this.peerTrackStates[e.trackId])})}getEnv(){return this.env}getPublishParams(){let e=this.getLocalPeer(),t=(e==null?void 0:e.asRole)||(e==null?void 0:e.role);return t==null?void 0:t.publishParams}getRoom(){return this.room}getPolicyForRole(e){return this.knownRoles[e]}getKnownRoles(){return this.knownRoles}getTemplateAppData(){return this.templateAppData}getLocalPeer(){if(this.localPeerId&&this.peers[this.localPeerId])return this.peers[this.localPeerId]}getRemotePeers(){return Object.values(this.peers).filter(e=>!e.isLocal)}getPeers(){return Object.values(this.peers)}getPeerMap(){return this.peers}getPeerById(e){if(this.peers[e])return this.peers[e]}getTracksMap(){return this.tracks}getTracks(){return Array.from(this.tracks.values())}getVideoTracks(){return this.getTracks().filter(e=>e.type===\"video\")}getRemoteVideoTracks(){return this.getTracks().filter(e=>e instanceof O)}getAudioTracks(){return this.getTracks().filter(e=>e.type===\"audio\")}getPeerTracks(e){let t=e?this.peers[e]:void 0,i=[];return t!=null&&t.videoTrack&&i.push(t.videoTrack),t!=null&&t.audioTrack&&i.push(t.audioTrack),i.concat((t==null?void 0:t.auxiliaryTracks)||[])}getLocalPeerTracks(){return this.getPeerTracks(this.localPeerId)}hasTrack(e){return this.tracks.has(e)}getTrackById(e){var r,s;let t=Array.from(this.tracks.values()).find(o=>o.trackId===e);if(t)return t;let i=this.getLocalPeer();if(i){if((r=i.audioTrack)!=null&&r.isPublishedTrackId(e))return i.audioTrack;if((s=i.videoTrack)!=null&&s.isPublishedTrackId(e))return i.videoTrack}}getPeerByTrackId(e){let t=Array.from(this.tracks.values()).find(i=>i.trackId===e);return t!=null&&t.peerId?this.peers[t.peerId]:void 0}getSpeakers(){return this.speakers}getSpeakerPeers(){return this.speakers.map(e=>e.peer)}getUserAgent(){return this.userAgent}createAndSetUserAgent(e){this.userAgent=Et(this.env,e)}setRoom(e){this.room=e}setKnownRoles(e){var i,r;if(this.knownRoles=e.known_roles,this.addPluginsToRoles(e.plugins),this.roleDetailsArrived=!0,this.templateAppData=e.app_data,!this.simulcastEnabled)return;let t=(i=this.knownRoles[e.name])==null?void 0:i.publishParams;this.videoLayers=this.convertSimulcastLayers((r=t.simulcast)==null?void 0:r.video),this.updatePeersPolicy()}hasRoleDetailsArrived(){return this.roleDetailsArrived}setConfig(e){var t,i,r;if(X.rememberDevices(!!e.rememberDeviceSelection),e.rememberDeviceSelection){let s=X.getSelection();s&&(e.settings||(e.settings={}),(t=s.audioInput)!=null&&t.deviceId&&(e.settings.audioInputDeviceId=e.settings.audioInputDeviceId||s.audioInput.deviceId),(i=s.audioOutput)!=null&&i.deviceId&&(e.settings.audioOutputDeviceId=e.settings.audioOutputDeviceId||s.audioOutput.deviceId),(r=s.videoInput)!=null&&r.deviceId&&(e.settings.videoDeviceId=e.settings.videoDeviceId||s.videoInput.deviceId))}e.autoManageVideo=e.autoManageVideo!==!1,e.autoManageWakeLock=e.autoManageWakeLock!==!1,this.config=e,this.setEnv()}addPeer(e){this.peers[e.peerId]=e,e.isLocal&&(this.localPeerId=e.peerId)}addTrack(e){this.tracks.set(e,e)}getTrackState(e){return this.peerTrackStates[e]}setTrackState(e){this.peerTrackStates[e.trackInfo.track_id]=e}removeTrackState(e){delete this.peerTrackStates[e]}removePeer(e){this.localPeerId===e&&(this.localPeerId=void 0),delete this.peers[e]}removeTrack(e){this.tracks.delete(e)}updateSpeakers(e){this.speakers=e}updateAudioOutputVolume(e){return c(this,null,function*(){for(let t of this.getAudioTracks())yield t.setVolume(e)})}updateAudioOutputDevice(e){return c(this,null,function*(){let t=[];this.getAudioTracks().forEach(i=>{i instanceof ie&&t.push(i.setOutputDevice(e))}),yield Promise.all(t)})}getSimulcastLayers(e){var t;return!this.simulcastEnabled||![\"screen\",\"regular\"].includes(e)?[]:e===\"screen\"?[]:((t=this.videoLayers)==null?void 0:t.layers)||[]}convertSimulcastLayers(e){if(e)return M(m({},e),{layers:(e.layers||[]).map(t=>M(m({},t),{maxBitrate:t.maxBitrate*1e3}))})}getSimulcastDefinitionsForPeer(e,t){var n,d,u;if([!e||!e.role,t===\"screen\",!this.simulcastEnabled].some(p=>!!p))return[];let i=this.getPolicyForRole(e.role.name).publishParams,r,s,o;return t===\"regular\"?(r=(n=i.simulcast)==null?void 0:n.video,s=i.video.width,o=i.video.height):t===\"screen\"&&(r=(d=i.simulcast)==null?void 0:d.screen,s=i.screen.width,o=i.screen.height),((u=r==null?void 0:r.layers)==null?void 0:u.map(p=>{let h=We[p.rid],T={width:Math.floor(s/p.scaleResolutionDownBy),height:Math.floor(o/p.scaleResolutionDownBy)};return{layer:h,resolution:T}}))||[]}setPoll(e){this.polls.set(e.id,e)}getPoll(e){return this.polls.get(e)}setWhiteboard(e){this.whiteboards.set(e.id,e)}getWhiteboards(){return this.whiteboards}getWhiteboard(e){return e?this.whiteboards.get(e):this.whiteboards.values().next().value}getErrorListener(){return this.errorListener}cleanup(){let e=this.getTracks();for(let t of e)t.cleanup();this.room=void 0,this.config=void 0,this.localPeerId=void 0,this.roleDetailsArrived=!1}setErrorListener(e){this.errorListener=e}updatePeersPolicy(){this.getPeers().forEach(e=>{var t;if(!e.role){(t=this.errorListener)==null||t.onError(S.GenericErrors.InvalidRole(\"VALIDATION\",\"\"));return}e.role=this.getPolicyForRole(e.role.name)})}addPluginsToRoles(e){e&&Object.keys(e).forEach(t=>{let i=t;switch(i){case\"whiteboard\":{this.addWhiteboardPluginToRole(e[i]);break}case\"transcriptions\":{this.addTranscriptionsPluginToRole(e[i]);break}case\"noiseCancellation\":{this.handleNoiseCancellationPlugin(e[i]);break}default:break}})}setEnv(){var r;let t=((r=this.config)==null?void 0:r.initEndpoint).split(\"https://\")[1],i=\"prod\";t.startsWith(\"prod\")?i=\"prod\":t.startsWith(\"qa\")?i=\"qa\":t.startsWith(\"dev\")&&(i=\"dev\"),this.env=i,He.setEnv(i)}};var Wi=class{constructor(){this.TAG=\"[WakeLockManager]\";this.wakeLock=null;this.acquireLock=()=>c(this,null,function*(){yield this.requestWakeLock(),document==null||document.addEventListener(\"visibilitychange\",this.visibilityHandler)});this.cleanup=()=>c(this,null,function*(){if(this.wakeLock&&!this.wakeLock.released)try{yield this.wakeLock.release(),l.d(this.TAG,\"Wake lock released\")}catch(e){let t=e;l.w(this.TAG,\"Error while releasing wake lock\",`name=${t.name}, message=${t.message}`)}document==null||document.removeEventListener(\"visibilitychange\",this.visibilityHandler),this.wakeLock=null});this.visibilityHandler=()=>c(this,null,function*(){(document==null?void 0:document.visibilityState)===\"visible\"&&(!this.wakeLock||this.wakeLock.released)&&(l.d(this.TAG,\"Re-acquiring wake lock due to visibility change\"),yield this.requestWakeLock())});this.requestWakeLock=()=>c(this,null,function*(){try{if(!(\"wakeLock\"in navigator)){l.d(this.TAG,\"Wake lock feature not supported\");return}this.wakeLock=yield navigator.wakeLock.request(\"screen\"),l.d(this.TAG,\"Wake lock acquired\")}catch(e){let t=e;l.w(this.TAG,\"Error acquiring wake lock\",`name=${t.name}, message=${t.message}`)}})}};var $i=class{constructor(e){this.store=e;this.bufferSize=100;this.TAG=\"[AnalyticsEventsService]\";this.transport=null;this.pendingEvents=[];this.level=1}setTransport(e){this.transport=e}reset(){this.transport=null,this.pendingEvents=[]}queue(e){if(e.level>=this.level&&(this.pendingEvents.push(e),this.pendingEvents.length>this.bufferSize)){let t=this.pendingEvents.shift();l.d(this.TAG,\"Max buffer size reached\",\"Removed event to accommodate new events\",t)}return this}flushFailedClientEvents(){He.flushFailedEvents()}flush(){var e;try{for(;this.pendingEvents.length>0;){let t=this.pendingEvents.shift();t&&(t.metadata.peer.peer_id=(e=this.store.getLocalPeer())==null?void 0:e.peerId,t.metadata.userAgent=this.store.getUserAgent(),this.transport&&this.transport.transportProvider.isConnected?this.transport.sendEvent(t):this.sendClientEventOnHTTP(t))}}catch(t){l.w(this.TAG,\"Flush Failed\",t)}}sendClientEventOnHTTP(e){var r,s,o,n;let t=this.store.getRoom(),i=this.store.getLocalPeer();e.metadata.token=(r=this.store.getConfig())==null?void 0:r.authToken,e.metadata.peer={session_id:t==null?void 0:t.sessionId,room_id:t==null?void 0:t.id,room_name:t==null?void 0:t.name,template_id:t==null?void 0:t.templateId,joined_at:(s=t==null?void 0:t.joinedAt)==null?void 0:s.getTime(),session_started_at:(o=t==null?void 0:t.startedAt)==null?void 0:o.getTime(),role:(n=i==null?void 0:i.role)==null?void 0:n.name,user_name:i==null?void 0:i.name,user_data:i==null?void 0:i.metadata,peer_id:i==null?void 0:i.peerId},He.sendEvent(e)}};var Qa={autoplayFailed:void 0,initialized:!1,autoplayCheckPromise:void 0},Gt=class{constructor(e,t,i){this.store=e;this.deviceManager=t;this.eventBus=i;this.autoPausedTracks=new Set;this.TAG=\"[AudioSinkManager]:\";this.volume=100;this.state=m({},Qa);this.handleAudioPaused=e=>c(this,null,function*(){l.d(this.TAG,\"Audio Paused\",e.target.id);let t=this.store.getTrackById(e.target.id);t&&this.autoPausedTracks.add(t)});this.handleTrackUpdate=({track:e})=>{l.d(this.TAG,\"Track updated\",`${e}`)};this.handleTrackAdd=r=>c(this,[r],function*({track:e,peer:t,callListener:i=!0}){var o,n;let s=document.createElement(\"audio\");s.style.display=\"none\",s.id=e.trackId,s.addEventListener(\"pause\",this.handleAudioPaused),s.onerror=()=>c(this,null,function*(){var u,p;l.e(this.TAG,\"error on audio element\",s.error);let d=S.TracksErrors.AudioPlaybackError(`Audio playback error for track - ${e.trackId} code - ${(u=s==null?void 0:s.error)==null?void 0:u.code}`);this.eventBus.analytics.publish(y.audioPlaybackError(d)),((p=s==null?void 0:s.error)==null?void 0:p.code)===MediaError.MEDIA_ERR_DECODE&&(this.removeAudioElement(s,e),yield J(500),yield this.handleTrackAdd({track:e,peer:t,callListener:!1}),this.state.autoplayFailed||this.eventBus.analytics.publish(y.audioRecovered(\"Audio recovered after media decode error\")))}),e.setAudioElement(s),yield e.setVolume(this.volume),l.d(this.TAG,\"Audio track added\",`${e}`),this.init(),(o=this.audioSink)==null||o.append(s),this.outputDevice&&(yield e.setOutputDevice(this.outputDevice)),s.srcObject=new MediaStream([e.nativeTrack]),i&&((n=this.listener)==null||n.onTrackUpdate(0,e,t)),yield this.handleAutoplayError(e)});this.handleAutoplayError=e=>c(this,null,function*(){if(this.state.autoplayFailed===void 0&&(this.state.autoplayCheckPromise||(this.state.autoplayCheckPromise=new Promise(t=>{this.playAudioFor(e).then(t)})),yield this.state.autoplayCheckPromise),this.state.autoplayFailed){this.autoPausedTracks.add(e);return}yield this.playAudioFor(e)});this.handleAudioDeviceChange=e=>c(this,null,function*(){e.isUserSelection||e.error||!e.selection||e.type===\"video\"||(yield this.unpauseAudioTracks())});this.handleTrackRemove=e=>{this.autoPausedTracks.delete(e);let t=document.getElementById(e.trackId);t&&this.removeAudioElement(t,e),this.audioSink&&this.audioSink.childElementCount===0&&(this.state.autoplayCheckPromise=void 0,this.state.autoplayFailed=void 0),l.d(this.TAG,\"Audio track removed\",`${e}`)};this.unpauseAudioTracks=()=>c(this,null,function*(){let e=[];this.autoPausedTracks.forEach(t=>{e.push(this.playAudioFor(t))}),yield Promise.all(e)});this.removeAudioElement=(e,t)=>{e&&(l.d(this.TAG,\"removing audio element\",`${t}`),e.removeEventListener(\"pause\",this.handleAudioPaused),e.srcObject=null,e.remove(),t.setAudioElement(null))};this.eventBus.audioTrackAdded.subscribe(this.handleTrackAdd),this.eventBus.audioTrackRemoved.subscribe(this.handleTrackRemove),this.eventBus.audioTrackUpdate.subscribe(this.handleTrackUpdate),this.eventBus.deviceChange.subscribe(this.handleAudioDeviceChange),this.eventBus.localVideoUnmutedNatively.subscribe(this.unpauseAudioTracks),this.eventBus.localAudioUnmutedNatively.subscribe(this.unpauseAudioTracks)}setListener(e){this.listener=e}get outputDevice(){return this.deviceManager.outputDevice}getVolume(){return this.volume}setVolume(e){return c(this,null,function*(){yield this.store.updateAudioOutputVolume(e),this.volume=e})}unblockAutoplay(){return c(this,null,function*(){this.autoPausedTracks.size>0&&(yield this.unpauseAudioTracks()),yield ce.resumeContext()})}init(e){if(this.state.initialized||this.audioSink)return;this.state.initialized=!0;let t=document.createElement(\"div\");t.id=`HMS-SDK-audio-sink-${(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])()}`,(e&&document.getElementById(e)||document.body).append(t),this.audioSink=t,l.d(this.TAG,\"audio sink created\",this.audioSink)}cleanup(){var e;(e=this.audioSink)==null||e.remove(),this.audioSink=void 0,this.eventBus.audioTrackAdded.unsubscribe(this.handleTrackAdd),this.eventBus.audioTrackRemoved.unsubscribe(this.handleTrackRemove),this.eventBus.audioTrackUpdate.unsubscribe(this.handleTrackUpdate),this.eventBus.deviceChange.unsubscribe(this.handleAudioDeviceChange),this.eventBus.localVideoUnmutedNatively.unsubscribe(this.unpauseAudioTracks),this.eventBus.localAudioUnmutedNatively.unsubscribe(this.unpauseAudioTracks),this.autoPausedTracks=new Set,this.state=m({},Qa)}playAudioFor(e){return c(this,null,function*(){let t=e.getAudioElement();if(!t){l.w(this.TAG,\"No audio element found on track\",e.trackId);return}try{yield t.play(),this.state.autoplayFailed=!1,this.autoPausedTracks.delete(e),l.d(this.TAG,\"Played track\",`${e}`)}catch(i){this.autoPausedTracks.add(e),l.w(this.TAG,\"Failed to play track\",`${e}`,i);let r=i;if(!this.state.autoplayFailed&&r.name===\"NotAllowedError\"){this.state.autoplayFailed=!0;let s=S.TracksErrors.AutoplayBlocked(\"AUTOPLAY\",\"\");s.addNativeError(r),this.eventBus.analytics.publish(y.autoplayError()),this.eventBus.autoplayError.publish(s)}}})}};var Ki=class{constructor(e){this.eventBus=e;this.pluginUsage=new Map;this.pluginLastAddedAt=new Map;this.getPluginUsage=e=>{if(this.pluginUsage.has(e)||this.pluginUsage.set(e,0),this.pluginLastAddedAt.has(e)){let i=this.pluginLastAddedAt.get(e)||0,r=i?Date.now()-i:0;this.pluginUsage.set(e,(this.pluginUsage.get(e)||0)+r),this.pluginLastAddedAt.delete(e)}return this.pluginUsage.get(e)};this.updatePluginUsageData=e=>{var i;let t=((i=e.properties)==null?void 0:i.plugin_name)||\"\";switch(e.name){case\"mediaPlugin.toggled.on\":case\"mediaPlugin.added\":{let r=e.properties.added_at||Date.now();this.pluginLastAddedAt.set(t,r);break}case\"mediaPlugin.toggled.off\":case\"mediaPlugin.stats\":{if(this.pluginLastAddedAt.has(t)){let r=e.properties.duration||(Date.now()-(this.pluginLastAddedAt.get(t)||0))/1e3;this.pluginUsage.set(t,(this.pluginUsage.get(t)||0)+Math.max(r,0)*1e3),this.pluginLastAddedAt.delete(t)}break}default:}};this.cleanup=()=>{this.pluginLastAddedAt.clear(),this.pluginUsage.clear()};this.eventBus.analytics.subscribe(t=>this.updatePluginUsageData(t))}};var Wt=class{constructor(e,t){this.store=e;this.eventBus=t;this.audioInput=[];this.audioOutput=[];this.videoInput=[];this.hasWebcamPermission=!1;this.hasMicrophonePermission=!1;this.currentSelection={audioInput:void 0,videoInput:void 0,audioOutput:void 0};this.TAG=\"[Device Manager]:\";this.initialized=!1;this.videoInputChanged=!1;this.audioInputChanged=!1;this.earpieceSelected=!1;this.timer=null;this.updateOutputDevice=(e,t)=>c(this,null,function*(){let i=this.audioOutput.find(r=>r.deviceId===e);return i&&(this.outputDevice=i,yield this.store.updateAudioOutputDevice(i),this.eventBus.analytics.publish(y.deviceChange({isUserSelection:t,selection:{audioOutput:i},devices:this.getDevices(),type:\"audioOutput\"})),X.updateSelection(\"audioOutput\",{deviceId:i.deviceId,groupId:i.groupId})),i});this.getCurrentSelection=()=>{var o,n;let e=this.store.getLocalPeer(),t=this.createIdentifier((o=e==null?void 0:e.audioTrack)==null?void 0:o.getMediaTrackSettings()),i=this.createIdentifier((n=e==null?void 0:e.videoTrack)==null?void 0:n.getMediaTrackSettings()),r=this.audioInput.find(d=>this.createIdentifier(d)===t),s=this.videoInput.find(d=>this.createIdentifier(d)===i);return{audioInput:r,videoInput:s,audioOutput:this.outputDevice}};this.computeChange=(e,t)=>e.length!==t.length?!0:t.some(i=>!e.includes(this.createIdentifier(i)));this.enumerateDevices=()=>c(this,null,function*(){try{let e=yield navigator.mediaDevices.enumerateDevices(),t=this.videoInput.map(this.createIdentifier),i=this.audioInput.map(this.createIdentifier);this.audioInput=[],this.audioOutput=[],this.videoInput=[],e.forEach(r=>{r.kind===\"audioinput\"&&r.label?(this.hasMicrophonePermission=!0,this.audioInput.push(r)):r.kind===\"audiooutput\"?this.audioOutput.push(r):r.kind===\"videoinput\"&&r.label&&(this.hasWebcamPermission=!0,this.videoInput.push(r))}),this.videoInputChanged=this.computeChange(t,this.videoInput),this.audioInputChanged=this.computeChange(i,this.audioInput),X.setDevices({videoInput:[...this.videoInput],audioInput:[...this.audioInput],audioOutput:[...this.audioOutput]}),this.logDevices(\"Enumerate Devices\")}catch(e){l.e(this.TAG,\"Failed enumerating devices\",e)}});this.updateToActualDefaultDevice=()=>c(this,null,function*(){var r,s,o,n,d;let e=this.store.getLocalPeer();if(!((s=(r=this.store.getConfig())==null?void 0:r.settings)==null?void 0:s.videoDeviceId)&&(e!=null&&e.videoTrack)&&(yield e.videoTrack.setSettings({deviceId:(o=this.videoInput[0])==null?void 0:o.deviceId},!0)),!((d=(n=this.store.getConfig())==null?void 0:n.settings)==null?void 0:d.audioInputDeviceId)&&(e!=null&&e.audioTrack)){let u=()=>{var T;let h=this.audioInput.find(g=>!g.label.toLowerCase().includes(\"iphone\"));return Hs()&&h?h==null?void 0:h.deviceId:(T=this.getNewAudioInputDevice())==null?void 0:T.deviceId};u()&&(yield e.audioTrack.setSettings({deviceId:u()},!0))}});this.handleDeviceChange=mi(()=>c(this,null,function*(){yield this.enumerateDevices(),this.logDevices(\"After Device Change\");let e=this.store.getLocalPeer();yield this.setOutputDevice(!0),yield this.handleAudioInputDeviceChange(e==null?void 0:e.audioTrack),yield this.handleVideoInputDeviceChange(e==null?void 0:e.videoTrack),this.eventBus.analytics.publish(y.deviceChange({selection:this.getCurrentSelection(),type:\"change\",devices:this.getDevices()}))}),500).bind(this);this.handleAudioInputDeviceChange=e=>c(this,null,function*(){if(!e){l.d(this.TAG,\"No Audio track on local peer\");return}if(!this.audioInputChanged){l.d(this.TAG,\"No Change in AudioInput Device\");return}let t=this.getNewAudioInputDevice();if(!t||!t.deviceId){this.eventBus.analytics.publish(y.deviceChange({selection:{audioInput:t},error:S.TracksErrors.SelectedDeviceMissing(\"audio\"),devices:this.getDevices(),type:\"audioInput\"})),l.e(this.TAG,\"Audio device not found\");return}let{settings:i}=e,r=new Q().codec(i.codec).maxBitrate(i.maxBitrate).deviceId(t.deviceId).audioMode(i.audioMode).build();try{yield e.setSettings(r,!0),this.eventBus.deviceChange.publish({devices:this.getDevices(),selection:t,type:\"audioInput\"}),this.logDevices(\"Audio Device Change Success\")}catch(s){l.e(this.TAG,\"[Audio Device Change]\",s),this.eventBus.analytics.publish(y.deviceChange({selection:{audioInput:t},devices:this.getDevices(),type:\"audioInput\",error:s})),this.eventBus.deviceChange.publish({error:s,selection:t,type:\"audioInput\",devices:this.getDevices()})}});this.handleVideoInputDeviceChange=e=>c(this,null,function*(){if(!e){l.d(this.TAG,\"No video track on local peer\");return}if(!this.videoInputChanged){l.d(this.TAG,\"No Change in VideoInput Device\");return}let t=this.videoInput[0];if(!t||!t.deviceId){this.eventBus.analytics.publish(y.deviceChange({selection:{videoInput:t},error:S.TracksErrors.SelectedDeviceMissing(\"video\"),devices:this.getDevices(),type:\"video\"})),l.e(this.TAG,\"Video device not found\");return}let{settings:i}=e,r=new q().codec(i.codec).maxBitrate(i.maxBitrate).maxFramerate(i.maxFramerate).setWidth(i.width).setHeight(i.height).deviceId(t.deviceId).build();try{yield e.setSettings(r,!0),this.eventBus.deviceChange.publish({devices:this.getDevices(),selection:t,type:\"video\"}),this.logDevices(\"Video Device Change Success\")}catch(s){l.e(this.TAG,\"[Video Device Change]\",s),this.eventBus.analytics.publish(y.deviceChange({selection:{videoInput:t},devices:this.getDevices(),type:\"video\",error:s})),this.eventBus.deviceChange.publish({error:s,type:\"video\",selection:t,devices:this.getDevices()})}});this.startPollingForDevices=()=>c(this,null,function*(){let{earpiece:e}=this.categorizeAudioInputDevices();e&&(this.timer=setTimeout(()=>{c(this,null,function*(){yield this.enumerateDevices(),yield this.autoSelectAudioOutput(),this.startPollingForDevices()})},5e3))});this.autoSelectAudioOutput=e=>c(this,null,function*(){var u,p;let{bluetoothDevice:t,earpiece:i,speakerPhone:r,wired:s}=this.categorizeAudioInputDevices(),o=(u=this.store.getLocalPeer())==null?void 0:u.audioTrack;if(!o||!i)return;let n=this.getManuallySelectedAudioDevice(),d=(n==null?void 0:n.deviceId)||(t==null?void 0:t.deviceId)||(s==null?void 0:s.deviceId)||(r==null?void 0:r.deviceId);if(!(!e&&o.settings.deviceId===d&&this.earpieceSelected))try{(!this.earpieceSelected||e)&&((t==null?void 0:t.deviceId)===d?this.earpieceSelected=!0:(l.d(this.TAG,\"selecting earpiece\"),yield o.setSettings({deviceId:i==null?void 0:i.deviceId},!0),e&&(yield J(e)),this.earpieceSelected=!0)),yield o.setSettings({deviceId:d},!0);let h=(p=this.audioInput.find(T=>T.deviceId===d))==null?void 0:p.groupId;this.eventBus.deviceChange.publish({isUserSelection:!1,type:\"audioInput\",selection:{deviceId:d,groupId:h},devices:this.getDevices(),internal:!0})}catch(h){this.eventBus.error.publish(h)}});let i=({enabled:r,track:s})=>r&&s.source===\"regular\";this.eventBus.localVideoEnabled.waitFor(i).then(()=>{this.videoInput.length===0&&this.init(!0)}),this.eventBus.localAudioEnabled.waitFor(i).then(()=>{this.audioInput.length===0&&this.init(!0)}),this.eventBus.deviceChange.subscribe(({type:r,isUserSelection:s,selection:o})=>{if(s){let n=r===\"video\"?\"videoInput\":r,d=this[n].find(u=>this.createIdentifier(u)===this.createIdentifier(o));this.eventBus.analytics.publish(y.deviceChange({selection:{[n]:d},devices:this.getDevices(),type:r,isUserSelection:s}))}})}init(e=!1,t=!0){return c(this,null,function*(){this.initialized&&!e||(!this.initialized&&navigator.mediaDevices.addEventListener(\"devicechange\",this.handleDeviceChange),this.initialized=!0,yield this.enumerateDevices(),e||(yield this.updateToActualDefaultDevice(),this.startPollingForDevices()),yield this.autoSelectAudioOutput(),this.logDevices(\"Init\"),yield this.setOutputDevice(),this.eventBus.deviceChange.publish({devices:this.getDevices()}),t&&this.eventBus.analytics.publish(y.deviceChange({selection:this.getCurrentSelection(),type:\"list\",devices:this.getDevices()})))})}getDevices(){return{audioInput:this.audioInput,audioOutput:this.audioOutput,videoInput:this.videoInput}}cleanup(){this.timer&&(clearTimeout(this.timer),this.timer=null),this.initialized=!1,this.earpieceSelected=!1,this.audioInput=[],this.audioOutput=[],this.videoInput=[],this.outputDevice=void 0,navigator.mediaDevices.removeEventListener(\"devicechange\",this.handleDeviceChange)}createIdentifier(e){return e?`${e.deviceId}${e.groupId}`:\"\"}getNewAudioInputDevice(){var i,r;let e=this.getManuallySelectedAudioDevice();if(e)return e;(r=(i=this.store.getLocalPeer())==null?void 0:i.audioTrack)==null||r.resetManuallySelectedDeviceId();let t=this.audioInput.find(s=>s.deviceId===\"default\");return t?this.audioInput.find(o=>o.deviceId!==\"default\"&&t.label.includes(o.label)):this.audioInput[0]}setOutputDevice(e=!1){return c(this,null,function*(){let t=this.getNewAudioInputDevice(),i=this.createIdentifier(this.outputDevice);this.outputDevice=this.getAudioOutputDeviceMatchingInput(t),this.outputDevice||(this.outputDevice=this.audioOutput.find(r=>this.createIdentifier(r)===i),this.outputDevice||(this.outputDevice=this.audioOutput.find(r=>r.deviceId===\"default\")||this.audioOutput[0])),yield this.store.updateAudioOutputDevice(this.outputDevice),e&&i!==this.createIdentifier(this.outputDevice)&&(this.eventBus.analytics.publish(y.deviceChange({selection:{audioOutput:this.outputDevice},devices:this.getDevices(),type:\"audioOutput\"})),this.eventBus.deviceChange.publish({selection:this.outputDevice,type:\"audioOutput\",devices:this.getDevices()}))})}getManuallySelectedAudioDevice(){let e=this.store.getLocalPeer(),t=e==null?void 0:e.audioTrack;return this.audioInput.find(i=>i.deviceId===(t==null?void 0:t.getManuallySelectedDeviceId()))}categorizeAudioInputDevices(){let e=null,t=null,i=null,r=null;for(let s of this.audioInput){let o=Nr(s.label);o===\"SPEAKERPHONE\"?t=s:o===\"WIRED\"?i=s:o===\"BLUETOOTH\"?e=s:o===\"EARPIECE\"&&(r=s)}return{bluetoothDevice:e,speakerPhone:t,wired:i,earpiece:r}}getAudioOutputDeviceMatchingInput(e){var o,n;let t=((n=(o=this.store.getConfig())==null?void 0:o.settings)==null?void 0:n.speakerAutoSelectionBlacklist)||[];if(t===\"all\"||!e)return;let i=e.label.toLowerCase()||\"\";if(t.some(d=>i.includes(d.toLowerCase())))return;let r=this.audioOutput.find(d=>e.deviceId!==\"default\"&&d.label===e.label);if(r)return r;let s=this.audioOutput.find(d=>d.groupId===e.groupId);if(s&&this.audioOutput[0].deviceId===\"default\"&&s.groupId===this.audioOutput[0].groupId)return s}logDevices(e=\"\"){l.d(this.TAG,e,JSON.stringify({videoInput:[...this.videoInput],audioInput:[...this.audioInput],audioOutput:[...this.audioOutput],selected:this.getCurrentSelection()},null,4))}};var qi=class{constructor(e,t){this.deviceManager=e;this.audioSinkManager=t}getVolume(){return this.audioSinkManager.getVolume()}setVolume(e){if(e<0||e>100)throw Error(\"Please pass a valid number between 0-100\");this.audioSinkManager.setVolume(e)}getDevice(){return this.deviceManager.outputDevice}setDevice(e){return this.deviceManager.updateOutputDevice(e,!0)}unblockAutoplay(){return c(this,null,function*(){yield this.audioSinkManager.unblockAutoplay(),yield ce.resumeContext()})}};var $t=class{static handleError(e){if(e.status===404)throw S.APIErrors.EndpointUnreachable(\"FEEDBACK\",e.statusText);if(e.status>=400)throw S.APIErrors.ServerErrors(e.status,\"FEEDBACK\",e==null?void 0:e.statusText)}static sendFeedback(s){return c(this,arguments,function*({token:e,eventEndpoint:t=\"https://event.100ms.live\",info:i,feedback:r}){l.d(this.TAG,`sendFeedback: feedbackEndpoint=${t} peerId=${i.peer.peer_id} session=${i.peer.session_id} `);let o=new URL(\"v2/client/feedback\",t),n=M(m({},i),{payload:r});try{let d=yield fetch(o,{headers:{Authorization:`Bearer ${e}`},body:JSON.stringify(n),method:\"POST\"});try{this.handleError(d);return}catch(u){throw l.e(this.TAG,\"error\",u.message,d.status),u instanceof k?u:S.APIErrors.ServerErrors(d.status,\"FEEDBACK\",u.message)}}catch(d){let u=d;throw[\"Failed to fetch\",\"NetworkError\",\"ECONNRESET\"].some(p=>u.message.includes(p))?S.APIErrors.EndpointUnreachable(\"FEEDBACK\",u.message):u}})}};$t.TAG=\"[FeedbackService]\";var x=class{constructor(e,t){this.eventName=e;this.eventEmitter=t;this.publish=e=>{this.eventEmitter.emit(this.eventName,e)};this.subscribe=e=>{this.eventEmitter.on(this.eventName,e)};this.subscribeOnce=e=>{this.eventEmitter.once(this.eventName,e)};this.unsubscribe=e=>{this.eventEmitter.off(this.eventName,e)};this.waitFor=e=>this.eventEmitter.waitFor(this.eventName,{filter:e});this.removeAllListeners=()=>{this.eventEmitter.removeAllListeners(this.eventName)}}};var Kt=class{constructor(){this.eventEmitter=new eventemitter2__WEBPACK_IMPORTED_MODULE_5__.EventEmitter2;this.analytics=new x(V.ANALYTICS,this.eventEmitter);this.deviceChange=new x(V.DEVICE_CHANGE,this.eventEmitter);this.localAudioEnabled=new x(V.LOCAL_AUDIO_ENABLED,this.eventEmitter);this.localVideoEnabled=new x(V.LOCAL_VIDEO_ENABLED,this.eventEmitter);this.localVideoUnmutedNatively=new x(V.LOCAL_VIDEO_UNMUTED_NATIVELY,this.eventEmitter);this.localAudioUnmutedNatively=new x(V.LOCAL_AUDIO_UNMUTED_NATIVELY,this.eventEmitter);this.statsUpdate=new x(V.STATS_UPDATE,this.eventEmitter);this.trackDegraded=new x(V.TRACK_DEGRADED,this.eventEmitter);this.trackRestored=new x(V.TRACK_RESTORED,this.eventEmitter);this.trackAudioLevelUpdate=new x(V.TRACK_AUDIO_LEVEL_UPDATE,this.eventEmitter);this.audioPluginFailed=new x(V.AUDIO_PLUGIN_FAILED,this.eventEmitter);this.localAudioSilence=new x(V.LOCAL_AUDIO_SILENCE,this.eventEmitter);this.policyChange=new x(V.POLICY_CHANGE,this.eventEmitter);this.localRoleUpdate=new x(V.LOCAL_ROLE_UPDATE,this.eventEmitter);this.audioTrackUpdate=new x(V.AUDIO_TRACK_UPDATE,this.eventEmitter);this.audioTrackAdded=new x(V.AUDIO_TRACK_ADDED,this.eventEmitter);this.audioTrackRemoved=new x(V.AUDIO_TRACK_REMOVED,this.eventEmitter);this.autoplayError=new x(V.AUTOPLAY_ERROR,this.eventEmitter);this.leave=new x(V.LEAVE,this.eventEmitter);this.error=new x(V.ERROR,this.eventEmitter)}};var ji=class{constructor(e,t,i){this.store=e;this.listener=t;this.audioListener=i}handleActiveSpeakers(e){var s,o,n;let t=e[\"speaker-list\"],i=t.map(d=>({audioLevel:d.level,peer:this.store.getPeerById(d.peer_id),track:this.store.getTrackById(d.track_id)}));(s=this.audioListener)==null||s.onAudioLevelUpdate(i),this.store.updateSpeakers(i);let r=t[0];if(r){let d=this.store.getPeerById(r.peer_id);(o=this.listener)==null||o.onPeerUpdate(4,d)}else(n=this.listener)==null||n.onPeerUpdate(5,null)}};var Ji=class{constructor(e){this.listener=e;this.TAG=\"[BroadcastManager]\"}handleNotification(e,t){e===\"on-broadcast\"&&this.handleBroadcast(t)}handleBroadcast(e){var t,i;l.d(this.TAG,`Received Message from sender=${(t=e==null?void 0:e.peer)==null?void 0:t.peer_id}: ${e}`),(i=this.listener)==null||i.onMessageReceived(e)}};var Qi=class{constructor(e,t){this.store=e;this.listener=t}handleQualityUpdate(e){var r;let i=e.peers.map(s=>{let o=this.store.getPeerById(s.peer_id);return o&&o.updateNetworkQuality(s.downlink_score),{peerID:s.peer_id,downlinkQuality:s.downlink_score}});(r=this.listener)==null||r.onConnectionQualityUpdate(i)}};var lt=class{constructor(e,t,i){this.store=e;this.eventBus=t;this.listener=i;this.TAG=\"[TrackManager]\";this.tracksToProcess=new Map;this.handleTrackAdd=e=>{l.d(this.TAG,\"ONTRACKADD\",`${e}`),this.tracksToProcess.set(e.trackId,e),this.processPendingTracks()};this.handleTrackRemovedPermanently=e=>{l.d(this.TAG,\"ONTRACKREMOVE permanently\",e),Object.keys(e.tracks).forEach(i=>{var n;let r=this.store.getTrackState(i);if(!r)return;let s=this.store.getTrackById(i);if(!s){l.d(this.TAG,\"Track not found in store\");return}s.type===\"audio\"&&this.eventBus.audioTrackRemoved.publish(s),this.store.removeTrack(s);let o=this.store.getPeerById(r.peerId);o&&(this.removePeerTracks(o,s),(n=this.listener)==null||n.onTrackUpdate(1,s,o))})};this.handleTrackLayerUpdate=e=>{for(let t in e.tracks){let i=e.tracks[t],r=this.store.getTrackById(t);!r||!this.store.getPeerByTrackId(t)||r instanceof O&&this.setLayer(r,i)}};this.handleTrackUpdate=(e,t=!0)=>{var s,o;let i=this.store.getPeerById(e.peer.peer_id),r=e.peer;if(!i&&!r){l.d(this.TAG,\"Track Update ignored - Peer not added to store\");return}i||(i=ye(r,this.store),this.store.addPeer(i));for(let n in e.tracks){let d=Object.assign({},(s=this.store.getTrackState(n))==null?void 0:s.trackInfo),u=e.tracks[n],p=this.store.getTrackById(n);if(this.store.setTrackState({peerId:e.peer.peer_id,trackInfo:m(m({},d),u)}),!p||this.tracksToProcess.has(n))this.processTrackInfo(u,e.peer.peer_id,t),this.processPendingTracks();else{p.setEnabled(!u.mute);let h=this.processTrackUpdate(p,d,u);h&&((o=this.listener)==null||o.onTrackUpdate(h,p,i))}}};this.processTrackInfo=(e,t,i)=>{};this.processPendingTracks=()=>{new Map(this.tracksToProcess).forEach(t=>{var s;let i=this.store.getTrackState(t.trackId);if(!i){l.d(this.TAG,\"TrackState not added to store\",`peerId - ${t.peerId}`,`trackId -${t.trackId}`);return}let r=this.store.getPeerById(i.peerId);if(!r){l.d(this.TAG,\"Peer not added to store, peerId\",i.peerId);return}t.source=i.trackInfo.source,t.peerId=r.peerId,t.logIdentifier=r.name,t.setEnabled(!i.trackInfo.mute),this.addAudioTrack(r,t),this.addVideoTrack(r,t),t.type===\"audio\"?this.eventBus.audioTrackAdded.publish({track:t,peer:r}):(s=this.listener)==null||s.onTrackUpdate(0,t,r),this.tracksToProcess.delete(t.trackId)})}}handleTrackMetadataAdd(e){l.d(this.TAG,\"TRACK_METADATA_ADD\",JSON.stringify(e,null,2));for(let t in e.tracks){let i=e.tracks[t];this.store.setTrackState({peerId:e.peer.peer_id,trackInfo:i})}this.processPendingTracks()}handleTrackRemove(e,t=!0){var s;l.d(this.TAG,\"ONTRACKREMOVE\",`${e}`);let i=this.store.getTrackState(e.trackId);if(!i)return;if(!this.store.hasTrack(e)){l.d(this.TAG,\"Track not found in store\");return}if(t){this.store.removeTrack(e);let o=this.store.getPeerById(i.peerId);if(!o)return;this.removePeerTracks(o,e),(s=this.listener)==null||s.onTrackUpdate(1,e,o),e.type===\"audio\"&&this.eventBus.audioTrackRemoved.publish(e)}}setLayer(e,t){var s,o;let i=this.store.getPeerByTrackId(e.trackId);if(!i)return;e.setLayerFromServer(t)?(s=this.listener)==null||s.onTrackUpdate(5,e,i):(o=this.listener)==null||o.onTrackUpdate(6,e,i)}removePeerTracks(e,t){let i=e.auxiliaryTracks.indexOf(t);i>-1?(e.auxiliaryTracks.splice(i,1),l.d(this.TAG,\"auxiliary track removed\",`${t}`)):t.type===\"audio\"&&e.audioTrack===t?(e.audioTrack=void 0,l.d(this.TAG,\"audio track removed\",`${t}`)):t.type===\"video\"&&e.videoTrack===t&&(e.videoTrack=void 0,l.d(this.TAG,\"video track removed\",`${t}`))}addAudioTrack(e,t){var i;t.type===\"audio\"&&(t.source===\"regular\"&&(!e.audioTrack||((i=e.audioTrack)==null?void 0:i.trackId)===t.trackId)?e.audioTrack=t:e.auxiliaryTracks.push(t),this.store.addTrack(t),l.d(this.TAG,\"audio track added\",`${t}`))}addVideoTrack(e,t){if(t.type!==\"video\")return;let i=t,r=this.store.getSimulcastDefinitionsForPeer(e,i.source);if(i.setSimulcastDefinitons(r),this.addAsPrimaryVideoTrack(e,i))e.videoTrack?e.videoTrack.replaceTrack(i):e.videoTrack=i,this.store.addTrack(e.videoTrack);else{let s=e.auxiliaryTracks.findIndex(o=>o.trackId===i.trackId);s===-1?(e.auxiliaryTracks.push(i),this.store.addTrack(i)):(e.auxiliaryTracks[s].replaceTrack(i),this.store.addTrack(e.auxiliaryTracks[s]))}l.d(this.TAG,\"video track added\",`${t}`)}addAsPrimaryVideoTrack(e,t){var i;return t.source===\"regular\"&&(!e.videoTrack||((i=e.videoTrack)==null?void 0:i.trackId)===t.trackId)}processTrackUpdate(e,t,i){let r;return t.mute!==i.mute?(r=i.mute?2:3,e.type===\"audio\"&&this.eventBus.audioTrackUpdate.publish({track:e,enabled:!i.mute})):t.description!==i.description&&(r=4),r}};var zi=class extends lt{constructor(t,i,r,s){super(t,i,s);this.transport=r;this.TAG=\"[OnDemandTrackManager]\";this.processTrackInfo=(t,i,r=!0)=>{var u,p;if(t.type!==\"video\")return;let s=this.store.getPeerById(i);if(!s||!this.isPeerRoleSubscribed(i)){l.d(this.TAG,`no peer in store for peerId: ${i}`);return}let o=new Pe(new MediaStream,this.transport.getSubscribeConnection()),n=be.getEmptyVideoTrack();n.enabled=!t.mute;let d=new O(o,n,t.source,(u=this.store.getRoom())==null?void 0:u.disableNoneLayerRequest);d.setTrackId(t.track_id),d.peerId=s.peerId,d.logIdentifier=s.name,this.addVideoTrack(s,d),r&&((p=this.listener)==null||p.onTrackUpdate(0,s.videoTrack,s))}}handleTrackMetadataAdd(t){super.handleTrackMetadataAdd(t);for(let i in t.tracks)t.tracks[i].type===\"video\"&&this.processTrackInfo(t.tracks[i],t.peer.peer_id)}handleTrackRemove(t){let i=t.type===\"video\"&&t.source===\"regular\";super.handleTrackRemove(t,!i),i&&this.processTrackInfo({track_id:t.trackId,mute:!t.enabled,type:t.type,source:t.source,stream_id:t.stream.id},t.peerId,!1)}addAsPrimaryVideoTrack(t,i){return i.source!==\"regular\"?!1:!t.videoTrack||t.videoTrack.trackId===i.trackId?!0:t.videoTrack.enabled&&ve(t.videoTrack.nativeTrack)}isPeerRoleSubscribed(t){var s,o,n,d;if(!t)return!0;let i=this.store.getLocalPeer(),r=this.store.getPeerById(t);return r&&((d=(o=(s=i==null?void 0:i.role)==null?void 0:s.subscribeParams)==null?void 0:o.subscribeToRoles)==null?void 0:d.includes((n=r.role)==null?void 0:n.name))}};var Yi=class{constructor(e,t,i,r){this.store=e;this.peerManager=t;this.trackManager=i;this.listener=r;this.TAG=\"[PeerListManager]\";this.handleInitialPeerList=e=>{let t=Object.values(e.peers);this.peerManager.handlePeerList(t)};this.handleReconnectPeerList=e=>{this.handleRepeatedPeerList(e.peers)};this.handlePreviewRoomState=e=>{if(!this.store.hasRoleDetailsArrived())return;let t=e.peers;if(t==null){e.peer_count===0&&this.handleRepeatedPeerList({});return}Object.keys(t).forEach(i=>{t[i].tracks={},t[i].is_from_room_state=!0}),this.handleRepeatedPeerList(t)};this.handleRepeatedPeerList=e=>{let t=this.store.getRemotePeers(),i=Object.values(e),r=t.filter(o=>!e[o.peerId]);r.length>0&&l.d(this.TAG,`${r}`),r.forEach(o=>{var d;let n={peer_id:o.peerId,role:((d=o.role)==null?void 0:d.name)||\"\",info:{name:o.name,data:o.metadata||\"\",user_id:o.customerUserId||\"\",type:o.type},tracks:{},groups:[],realtime:o.realtime};this.peerManager.handlePeerLeave(n)});let s=[];i.forEach(o=>{let n=this.store.getPeerById(o.peer_id),d=Object.values(o.tracks);n&&(this.store.getPeerTracks(n.peerId).forEach(p=>{var h;o.tracks[p.trackId]||(this.removePeerTrack(n,p.trackId),(h=this.listener)==null||h.onTrackUpdate(1,p,n))}),d.forEach(p=>{this.store.getTrackById(p.track_id)||this.store.setTrackState({peerId:n.peerId,trackInfo:p})}),this.trackManager.handleTrackUpdate({peer:o,tracks:o.tracks},!1),this.peerManager.handlePeerUpdate(o)),s.push(o)}),s.length>0&&this.peerManager.handlePeerList(s)}}handleNotification(e,t,i){if(e===\"peer-list\"){let r=t;i?(l.d(this.TAG,\"RECONNECT_PEER_LIST event\",JSON.stringify(r,null,2)),this.handleReconnectPeerList(r)):(l.d(this.TAG,\"PEER_LIST event\",JSON.stringify(r,null,2)),this.handleInitialPeerList(r))}else if(e===\"room-state\"){let r=t;this.handlePreviewRoomState(r)}}removePeerTrack(e,t){var i,r;if(l.d(this.TAG,`removing track - ${t} from ${e}`),((i=e.audioTrack)==null?void 0:i.trackId)===t)e.audioTrack=void 0;else if(((r=e.videoTrack)==null?void 0:r.trackId)===t)e.videoTrack=void 0;else{let s=e.auxiliaryTracks.findIndex(o=>o.trackId===t);s>=0&&e.auxiliaryTracks.splice(s,1)}}};var L=a=>a?new Date(a):void 0;var Xi=class{constructor(e,t,i){this.store=e;this.trackManager=t;this.listener=i;this.TAG=\"[PeerManager]\";this.handlePeerList=e=>{var r,s;if(e.length===0){(r=this.listener)==null||r.onPeerUpdate(9,[]);return}let t=[],i=new Set(e.map(o=>o.peer_id));this.store.getRemotePeers().forEach(({peerId:o,fromRoomState:n})=>{!i.has(o)&&n&&this.store.removePeer(o)});for(let o of e)t.push(this.makePeer(o));(s=this.listener)==null||s.onPeerUpdate(9,t),this.trackManager.processPendingTracks()};this.handlePeerJoin=e=>{var i;let t=this.makePeer(e);(i=this.listener)==null||i.onPeerUpdate(0,t),this.trackManager.processPendingTracks()};this.handlePeerLeave=e=>{var i,r,s,o;let t=this.store.getPeerById(e.peer_id);this.store.removePeer(e.peer_id),l.d(this.TAG,\"PEER_LEAVE\",e.peer_id,`remainingPeers=${this.store.getPeers().length}`),t&&(t.audioTrack&&((i=this.listener)==null||i.onTrackUpdate(1,t.audioTrack,t)),t.videoTrack&&((r=this.listener)==null||r.onTrackUpdate(1,t.videoTrack,t)),(s=t.auxiliaryTracks)==null||s.forEach(n=>{var d;(d=this.listener)==null||d.onTrackUpdate(1,n,t)}),(o=this.listener)==null||o.onPeerUpdate(1,t))}}handleNotification(e,t){switch(e){case\"on-peer-join\":{let i=t;this.handlePeerJoin(i);break}case\"on-peer-leave\":{let i=t;this.handlePeerLeave(i);break}case\"on-peer-update\":this.handlePeerUpdate(t);break;default:break}}handlePeerUpdate(e){var s,o,n,d,u;let t=this.store.getPeerById(e.peer_id);if(!t&&e.realtime){t=this.makePeer(e),(s=this.listener)==null||s.onPeerUpdate(t.isHandRaised?12:14,t);return}if(t&&!t.isLocal&&!e.realtime){this.store.removePeer(t.peerId),(o=this.listener)==null||o.onPeerUpdate(13,t);return}if(!t){l.d(this.TAG,`peer ${e.peer_id} not found`);return}if(t.role&&t.role.name!==e.role){let p=this.store.getPolicyForRole(e.role);t.updateRole(p),this.updateSimulcastLayersForPeer(t),(n=this.listener)==null||n.onPeerUpdate(8,t)}let i=t.isHandRaised;t.updateGroups(e.groups);let r=(d=e.groups)==null?void 0:d.includes(Ae);i!==r&&((u=this.listener)==null||u.onPeerUpdate(12,t)),this.handlePeerInfoUpdate(m({peer:t},e.info))}handlePeerInfoUpdate({peer:e,name:t,data:i}){var r,s;e&&(t&&e.name!==t&&(e.updateName(t),(r=this.listener)==null||r.onPeerUpdate(10,e)),i&&e.metadata!==i&&(e.updateMetadata(i),(s=this.listener)==null||s.onPeerUpdate(11,e)))}makePeer(e){let t=this.store.getPeerById(e.peer_id);t||(t=ye(e,this.store),t.realtime=e.realtime,t.joinedAt=L(e.joined_at),t.fromRoomState=!!e.is_from_room_state,this.store.addPeer(t),l.d(this.TAG,\"adding to the peerList\",`${t}`));for(let i in e.tracks){let r=e.tracks[i];this.store.setTrackState({peerId:e.peer_id,trackInfo:r}),r.type===\"video\"&&this.trackManager.processTrackInfo(r,e.peer_id,!1)}return t}updateSimulcastLayersForPeer(e){this.store.getPeerTracks(e.peerId).forEach(t=>{if(t.type===\"video\"&&[\"regular\",\"screen\"].includes(t.source)){let i=t,r=this.store.getSimulcastDefinitionsForPeer(e,i.source);i.setSimulcastDefinitons(r)}})}};var Zi=class{constructor(e,t){this.store=e;this.eventBus=t}handlePolicyChange(e){let t=this.store.getLocalPeer();if(t&&!t.role){let r=e.known_roles[e.name];t.updateRole(r)}this.store.setKnownRoles(e);let i=this.store.getRoom();i?i.templateId=e.template_id:l.w(\"[PolicyChangeManager]\",\"on policy change - room not present\"),this.updateLocalPeerRole(e),this.eventBus.policyChange.publish(e)}updateLocalPeerRole(e){var i;let t=this.store.getLocalPeer();if(t!=null&&t.role&&t.role.name!==e.name){let r=this.store.getPolicyForRole(e.name),s=t.role;t.updateRole(r),r.name===((i=t.asRole)==null?void 0:i.name)&&delete t.asRole,this.eventBus.localRoleUpdate.publish({oldRole:s,newRole:r})}}};var ns=(f=>(f.FLAG_SERVER_SUB_DEGRADATION=\"subscribeDegradation\",f.FLAG_SERVER_SIMULCAST=\"simulcast\",f.FLAG_NON_WEBRTC_DISABLE_OFFER=\"nonWebRTCDisableOffer\",f.FLAG_PUBLISH_STATS=\"publishStats\",f.FLAG_SUBSCRIBE_STATS=\"subscribeStats\",f.FLAG_ON_DEMAND_TRACKS=\"onDemandTracks\",f.FLAG_DISABLE_VIDEO_TRACK_AUTO_UNSUBSCRIBE=\"disableVideoTrackAutoUnsubscribe\",f.FLAG_WHITEBOARD_ENABLED=\"whiteboardEnabled\",f.FLAG_EFFECTS_SDK_ENABLED=\"effectsSDKEnabled\",f.FLAG_VB_ENABLED=\"vb\",f.FLAG_HIPAA_ENABLED=\"hipaa\",f.FLAG_NOISE_CANCELLATION=\"noiseCancellation\",f.FLAG_SCALE_SCREENSHARE_BASED_ON_PIXELS=\"scaleScreenshareBasedOnPixels\",f.FLAG_DISABLE_NONE_LAYER_REQUEST=\"disableNoneLayerRequest\",f))(ns||{});var qt=(a,e,t)=>{let i=t===\"qa\"?aa:sa,r=new URL(i);return r.searchParams.set(\"endpoint\",`https://${e}`),r.searchParams.set(\"token\",a),r.toString()};var er=class{constructor(e,t,i){this.transport=e;this.store=t;this.listener=i;this.TAG=\"[HMSWhiteboardInteractivityCenter]\"}get isEnabled(){return this.transport.isFlagEnabled(\"whiteboardEnabled\")}open(e){return c(this,null,function*(){var o;if(!this.isEnabled)return l.w(this.TAG,\"Whiteboard is not enabled for customer\");let t=this.store.getWhiteboard(e==null?void 0:e.id),i=t==null?void 0:t.id;if(t||(i=(yield this.transport.signal.createWhiteboard(this.getCreateOptionsWithDefaults(e))).id),!i)throw new Error(`Whiteboard ID: ${i} not found`);let r=yield this.transport.signal.getWhiteboard({id:i}),s=M(m({},t),{title:e==null?void 0:e.title,attributes:e==null?void 0:e.attributes,id:r.id,url:qt(r.token,r.addr,this.store.getEnv()),token:r.token,addr:r.addr,owner:r.owner,permissions:r.permissions||[],open:!0});this.store.setWhiteboard(s),(o=this.listener)==null||o.onWhiteboardUpdate(s)})}close(e){return c(this,null,function*(){var r;if(!this.isEnabled)return l.w(this.TAG,\"Whiteboard is not enabled for customer\");let t=this.store.getWhiteboard(e);if(!t)throw new Error(`Whiteboard ID: ${e} not found`);let i={id:t.id,title:t.title,open:!1};this.store.setWhiteboard(i),(r=this.listener)==null||r.onWhiteboardUpdate(i)})}setListener(e){this.listener=e}handleLocalRoleUpdate(){return c(this,null,function*(){var t,i,r;let e=this.store.getWhiteboards();for(let s of e.values())if(s.url){let o=yield this.transport.signal.getWhiteboard({id:s.id}),n=this.store.getLocalPeer(),u=(n==null?void 0:n.customerUserId)===o.owner?(i=(t=n.role)==null?void 0:t.permissions.whiteboard)==null?void 0:i.includes(\"admin\"):o.permissions.length>0,p=M(m({},s),{id:o.id,url:qt(o.token,o.addr,this.store.getEnv()),token:o.token,addr:o.addr,owner:o.owner,permissions:o.permissions,open:u});this.store.setWhiteboard(p),(r=this.listener)==null||r.onWhiteboardUpdate(p)}})}getCreateOptionsWithDefaults(e){var o;let t=Object.values(this.store.getKnownRoles()),i=[],r=[],s=[];return t.forEach(n=>{var d,u,p;(d=n.permissions.whiteboard)!=null&&d.includes(\"read\")&&i.push(n.name),(u=n.permissions.whiteboard)!=null&&u.includes(\"write\")&&r.push(n.name),(p=n.permissions.whiteboard)!=null&&p.includes(\"admin\")&&s.push(n.name)}),{title:(e==null?void 0:e.title)||`${(o=this.store.getRoom())==null?void 0:o.id} Whiteboard`,reader:(e==null?void 0:e.reader)||i,writer:(e==null?void 0:e.writer)||r,admin:(e==null?void 0:e.admin)||s}}};var jt=class{constructor(e,t,i){this.transport=e;this.store=t;this.listener=i;this.whiteboard=new er(e,t,i)}setListener(e){this.listener=e,this.whiteboard.setListener(e)}createPoll(e){return c(this,null,function*(){var o,n;let t={customerID:\"userid\",peerID:\"peerid\",userName:\"username\"},{poll_id:i}=yield this.transport.signal.setPollInfo(M(m({},e),{mode:e.mode?t[e.mode]:void 0,poll_id:e.id,vote:e.rolesThatCanVote,responses:e.rolesThatCanViewResponses}));e.id||(e.id=i),Array.isArray(e.questions)&&(yield this.addQuestionsToPoll(e.id,e.questions));let r=yield this.transport.signal.getPollQuestions({poll_id:e.id,index:0,count:50}),s=tr(M(m({},e),{poll_id:e.id,state:\"created\",created_by:(o=this.store.getLocalPeer())==null?void 0:o.peerId}));s.questions=r.questions.map(({question:d,options:u,answer:p})=>M(m({},d),{options:u,answer:p})),(n=this.listener)==null||n.onPollsUpdate(0,[s])})}startPoll(e){return c(this,null,function*(){typeof e==\"string\"?yield this.transport.signal.startPoll({poll_id:e}):(yield this.createPoll(e),yield this.transport.signal.startPoll({poll_id:e.id}))})}addQuestionsToPoll(e,t){return c(this,null,function*(){t.length>0&&(yield this.transport.signal.setPollQuestions({poll_id:e,questions:t.map((i,r)=>this.createQuestionSetParams(i,r))}))})}stopPoll(e){return c(this,null,function*(){yield this.transport.signal.stopPoll({poll_id:e})})}addResponsesToPoll(e,t){return c(this,null,function*(){let i=this.store.getPoll(e);if(!i)throw new Error(\"Invalid poll ID - Poll not found\");let r=t.map(s=>{var n,d;let o=this.getQuestionInPoll(i,s.questionIndex);return o.type===\"single-choice\"?(s.option=s.option||((n=s.options)==null?void 0:n[0])||-1,delete s.text,delete s.options):o.type===\"multiple-choice\"?((d=s.options)==null||d.sort(),delete s.text,delete s.option):(delete s.option,delete s.options),s.skipped&&(delete s.option,delete s.options,delete s.text),m({duration:0,type:o.type,question:s.questionIndex},s)});yield this.transport.signal.setPollResponses({poll_id:e,responses:r})})}fetchLeaderboard(e,t,i){return c(this,null,function*(){var p,h;let r=this.store.getPoll(e);if(!r)throw new Error(\"Invalid poll ID - Poll not found\");let s=(h=(p=this.store.getLocalPeer())==null?void 0:p.role)==null?void 0:h.permissions,o=!!(s!=null&&s.pollRead||s!=null&&s.pollWrite);if(r.anonymous||r.state!==\"stopped\"||!o)return{entries:[],hasNext:!1};let n=yield this.transport.signal.fetchPollLeaderboard({poll_id:r.id,count:i,offset:t}),d={avgScore:n.avg_score,avgTime:n.avg_time,votedUsers:n.voted_users,totalUsers:n.total_users,correctUsers:n.correct_users};return{entries:n.questions.map(T=>({position:T.position,totalResponses:T.total_responses,correctResponses:T.correct_responses,duration:T.duration,peer:T.peer,score:T.score})),hasNext:!n.last,summary:d}})}getPollResponses(e,t){return c(this,null,function*(){var s,o;let i=yield this.transport.signal.getPollResponses({poll_id:e.id,index:0,count:50,self:t}),r=JSON.parse(JSON.stringify(e));(s=i.responses)==null||s.forEach(({response:n,peer:d,final:u})=>{var h,T;let p=(h=e==null?void 0:e.questions)==null?void 0:h.find(g=>g.index===n.question);if(p){let g={id:n.response_id,questionIndex:n.question,option:n.option,options:n.options,text:n.text,responseFinal:u,peer:{peerid:d.peerid,userHash:d.hash,userid:d.userid,username:d.username},skipped:n.skipped,type:n.type,update:n.update},f=p.responses&&!t?[...p.responses]:[];(T=r.questions)!=null&&T[n.question-1]&&(r.questions[n.question-1].responses=[...f,g])}}),this.store.setPoll(r),(o=this.listener)==null||o.onPollsUpdate(4,[r])})}getPolls(){return c(this,null,function*(){var s,o,n;let e=yield this.transport.signal.getPollsList({count:50,state:\"started\"}),t=[],i=(o=(s=this.store.getLocalPeer())==null?void 0:s.role)==null?void 0:o.permissions.pollWrite,r=[...e.polls];if(i){let d=yield this.transport.signal.getPollsList({count:50,state:\"created\"}),u=yield this.transport.signal.getPollsList({count:50,state:\"stopped\"});r=[...d.polls,...r,...u.polls]}for(let d of r){let u=yield this.transport.signal.getPollQuestions({poll_id:d.poll_id,index:0,count:50}),p=tr(d),h=this.store.getPoll(d.poll_id);p.questions=u.questions.map(({question:T,options:g,answer:f},E)=>{var v,R;return M(m({},T),{options:g,answer:f,responses:(R=(v=h==null?void 0:h.questions)==null?void 0:v[E])==null?void 0:R.responses})}),t.push(p),this.store.setPoll(p)}return(n=this.listener)==null||n.onPollsUpdate(3,t),t})}createQuestionSetParams(e,t){var o,n;if(e.index){let d=(o=e.options)==null?void 0:o.map((u,p)=>M(m({},u),{index:p+1}));return{question:M(m({},e),{index:t+1}),options:d,answer:e.answer}}let i=M(m({},e),{index:t+1}),r,s=e.answer||{hidden:!1};return Array.isArray(e.options)&&[\"single-choice\",\"multiple-choice\"].includes(e.type)?(r=(n=e.options)==null?void 0:n.map((d,u)=>({index:u+1,text:d.text,weight:d.weight})),e.type===\"single-choice\"?s.option=e.options.findIndex(d=>d.isCorrectAnswer)+1||void 0:s.options=e.options.map((d,u)=>d.isCorrectAnswer?u+1:void 0).filter(d=>!!d)):(s==null||delete s.options,s==null||delete s.option),{question:i,options:r,answer:s}}getQuestionInPoll(e,t){var r;let i=(r=e==null?void 0:e.questions)==null?void 0:r.find(s=>s.index===t);if(!i)throw new Error(\"Invalid question index - Question not found in poll\");return i}},tr=a=>{let e={userid:\"customerID\",peerid:\"peerID\",username:\"userName\"};return{id:a.poll_id,title:a.title,startedBy:a.started_by,createdBy:a.created_by,anonymous:a.anonymous,type:a.type,duration:a.duration,locked:a.locked,mode:a.mode?e[a.mode]:void 0,visibility:a.visibility,rolesThatCanVote:a.vote||[],rolesThatCanViewResponses:a.responses||[],state:a.state,stoppedBy:a.stopped_by,startedAt:L(a.started_at),stoppedAt:L(a.stopped_at),createdAt:L(a.created_at)}};var ir=class{constructor(e,t,i){this.store=e;this.transport=t;this.listener=i}handleNotification(e,t){switch(e){case\"on-poll-start\":{this.handlePollStart(t);break}case\"on-poll-stop\":{this.handlePollStop(t);break}case\"on-poll-stats\":this.handlePollStats(t);break;default:break}}handlePollStart(e){return c(this,null,function*(){var i,r;let t=[];for(let s of e.polls){let o=this.store.getPoll(s.poll_id);if(o&&o.state===\"started\"){(i=this.listener)==null||i.onPollsUpdate(1,[o]);return}let n=yield this.transport.signal.getPollQuestions({poll_id:s.poll_id,index:0,count:50}),d=tr(s);d.questions=n.questions.map(({question:u,options:p,answer:h})=>M(m({},u),{options:p,answer:h})),yield this.updatePollResponses(d,!0),t.push(d),this.store.setPoll(d)}(r=this.listener)==null||r.onPollsUpdate(1,t)})}handlePollStop(e){return c(this,null,function*(){var i;let t=[];for(let r of e.polls){let s=this.store.getPoll(r.poll_id);if(s){s.state=\"stopped\",s.stoppedAt=L(r.stopped_at),s.stoppedBy=r.stopped_by;let o=yield this.transport.signal.getPollResult({poll_id:r.poll_id});this.updatePollResult(s,o),t.push(s)}}t.length>0&&((i=this.listener)==null||i.onPollsUpdate(2,t))})}handlePollStats(e){return c(this,null,function*(){var i;let t=[];for(let r of e.polls){let s=this.store.getPoll(r.poll_id);if(!s)return;this.updatePollResult(s,r),t.push(s)}t.length>0&&((i=this.listener)==null||i.onPollsUpdate(4,t))})}updatePollResult(e,t){var i;e.result=m({},e.result),e.result.totalUsers=t.user_count,e.result.maxUsers=t.max_user,e.result.totalResponses=t.total_response,(i=t.questions)==null||i.forEach(r=>{var o,n;let s=(o=e.questions)==null?void 0:o.find(d=>d.index===r.question);s&&(s.result=m({},s.result),s.result.correctResponses=r.correct,s.result.skippedCount=r.skipped,s.result.totalResponses=r.total,(n=r.options)==null||n.forEach((d,u)=>{var h;let p=(h=s.options)==null?void 0:h[u];p&&p.voteCount!==d&&(p.voteCount=d)}))})}updatePollResponses(e,t){return c(this,null,function*(){var r;(r=(yield this.transport.signal.getPollResponses({poll_id:e.id,index:0,count:50,self:t})).responses)==null||r.forEach(({response:s,peer:o,final:n})=>{var p;let d=(p=e==null?void 0:e.questions)==null?void 0:p.find(h=>h.index===s.question);if(!d)return;let u={id:s.response_id,questionIndex:s.question,option:s.option,options:s.options,text:s.text,responseFinal:n,peer:{peerid:o.peerid,userHash:o.hash,userid:o.userid,username:o.username},skipped:s.skipped,type:s.type,update:s.update};Array.isArray(d.responses)&&d.responses.length>0?d.responses.find(({id:h})=>h===u.id)||d.responses.push(u):d.responses=[u]})})}};var rr=class{constructor(e,t){this.store=e;this.listener=t}handleNotification(e,t){switch(e){case\"on-role-change-request\":this.handleRoleChangeRequest(t);break;case\"on-track-update-request\":this.handleTrackUpdateRequest(t);break;case\"on-change-track-mute-state-request\":this.handleChangeTrackStateRequest(t);break;default:return}}handleRoleChangeRequest(e){var i;let t={requestedBy:e.requested_by?this.store.getPeerById(e.requested_by):void 0,role:this.store.getPolicyForRole(e.role),token:e.token};(i=this.listener)==null||i.onRoleChangeRequest(t)}handleTrackUpdateRequest(e){let{requested_by:t,track_id:i,mute:r}=e,s=t?this.store.getPeerById(t):void 0,o=this.store.getLocalPeerTracks().find(d=>d.publishedTrackId===i);if(!o)return;let n=()=>{var d;(d=this.listener)==null||d.onChangeTrackStateRequest({requestedBy:s,track:o,enabled:!r})};if(r){if(o.enabled===!r)return;o.setEnabled(!r).then(n)}else n()}handleChangeTrackStateRequest(e){var u;let{type:t,source:i,value:r,requested_by:s}=e,o=s?this.store.getPeerById(s):void 0,n=!r,d=this.getTracksToBeUpdated({type:t,source:i,enabled:n});if(d.length!==0)if(n)(u=this.listener)==null||u.onChangeMultiTrackStateRequest({requestedBy:o,tracks:d,type:t,source:i,enabled:!0});else{let p=[];for(let h of d)p.push(h.setEnabled(!1));Promise.all(p).then(()=>{var h;(h=this.listener)==null||h.onChangeMultiTrackStateRequest({requestedBy:o,tracks:d,enabled:!1})})}}getTracksToBeUpdated({type:e,source:t,enabled:i}){let s=this.store.getLocalPeerTracks();return e&&(s=s.filter(o=>o.type===e)),t&&(s=s.filter(o=>o.source===t)),s.filter(o=>o.enabled!==i)}};var sr=class{constructor(e,t){this.store=e;this.listener=t;this.TAG=\"[RoomUpdateManager]\"}handleNotification(e,t){switch(e){case\"peer-list\":this.onRoomState(t.room);break;case\"on-rtmp-update\":this.updateRTMPStatus(t);break;case\"on-record-update\":this.updateRecordingStatus(t);break;case\"room-state\":this.handlePreviewRoomState(t);break;case\"room-info\":this.handleRoomInfo(t);break;case\"session-info\":this.handleSessionInfo(t);break;case\"on-hls-update\":this.updateHLSStatus(t);break;case\"on-transcription-update\":this.handleTranscriptionStatus([t]);break;default:break}}handleRoomInfo(e){let t=this.store.getRoom();if(!t){l.w(this.TAG,\"on session info - room not present\");return}t.description=e.description,t.large_room_optimization=e.large_room_optimization,t.max_size=e.max_size,t.name=e.name}handleSessionInfo(e){var i;let t=this.store.getRoom();if(!t){l.w(this.TAG,\"on session info - room not present\");return}t.sessionId=e.session_id,t.peerCount!==e.peer_count&&(t.peerCount=e.peer_count,(i=this.listener)==null||i.onRoomUpdate(\"ROOM_PEER_COUNT_UPDATED\",t))}handlePreviewRoomState(e){let{room:t}=e;this.onRoomState(t)}onRoomState(e){var u,p,h,T;let{recording:t,streaming:i,transcriptions:r,session_id:s,started_at:o,name:n}=e,d=this.store.getRoom();if(!d){l.w(this.TAG,\"on room state - room not present\");return}d.name=n,d.rtmp.running=this.isStreamingRunning((u=i==null?void 0:i.rtmp)==null?void 0:u.state),d.rtmp.startedAt=L((p=i==null?void 0:i.rtmp)==null?void 0:p.started_at),d.rtmp.state=(h=i==null?void 0:i.rtmp)==null?void 0:h.state,d.recording.server=this.getPeerListSFURecording(t),d.recording.browser=this.getPeerListBrowserRecording(t),d.recording.hls=this.getPeerListHLSRecording(t),d.hls=this.convertHls(i==null?void 0:i.hls),d.transcriptions=this.addTranscriptionDetail(r),d.sessionId=s,d.startedAt=L(o),(T=this.listener)==null||T.onRoomUpdate(\"RECORDING_STATE_UPDATED\",d)}addTranscriptionDetail(e){return e?e.map(t=>({state:t.state,mode:t.mode,initialised_at:L(t.initialised_at),started_at:L(t.started_at),stopped_at:L(t.stopped_at),updated_at:L(t.updated_at),error:this.toSdkError(t==null?void 0:t.error)})):[]}isRecordingRunning(e){return e?![\"none\",\"paused\",\"stopped\",\"failed\"].includes(e):!1}isStreamingRunning(e){return e?![\"none\",\"stopped\",\"failed\"].includes(e):!1}initHLS(e){let t=this.store.getRoom(),i={running:!0,variants:[]};return t?(e!=null&&e.variants&&e.variants.forEach((r,s)=>{var o,n,d;r.state!==\"initialised\"?i.variants.push({meetingURL:r==null?void 0:r.meetingURL,url:r==null?void 0:r.url,metadata:r==null?void 0:r.metadata,playlist_type:r==null?void 0:r.playlist_type,startedAt:L((o=e==null?void 0:e.variants)==null?void 0:o[s].started_at),initialisedAt:L((n=e==null?void 0:e.variants)==null?void 0:n[s].initialised_at),state:r.state,stream_type:r==null?void 0:r.stream_type}):i.variants.push({initialisedAt:L((d=e==null?void 0:e.variants)==null?void 0:d[s].initialised_at),url:\"\"})}),i):(l.w(this.TAG,\"on hls - room not present\"),i)}updateHLSStatus(e){var r;let t=this.store.getRoom(),i=e.variants&&e.variants.length>0?e.variants.some(s=>this.isStreamingRunning(s.state)):!1;if(!t){l.w(this.TAG,\"on hls - room not present\");return}e.enabled=i,t.hls=this.convertHls(e),(r=this.listener)==null||r.onRoomUpdate(\"HLS_STREAMING_STATE_UPDATED\",t)}handleTranscriptionStatus(e){var i;let t=this.store.getRoom();if(!t){l.w(this.TAG,\"on transcription - room not present\");return}t.transcriptions=this.addTranscriptionDetail(e)||[],(i=this.listener)==null||i.onRoomUpdate(\"TRANSCRIPTION_STATE_UPDATED\",t)}convertHls(e){var r;if(e!=null&&e.variants&&e.variants.length>0?e.variants.some(s=>s.state===\"initialised\"):!1)return this.initHLS(e);let i={running:!!(e!=null&&e.enabled),variants:[],error:this.toSdkError(e==null?void 0:e.error)};return(r=e==null?void 0:e.variants)==null||r.forEach(s=>{i.variants.push({meetingURL:s==null?void 0:s.meeting_url,url:s==null?void 0:s.url,metadata:s==null?void 0:s.metadata,playlist_type:s==null?void 0:s.playlist_type,startedAt:L(s==null?void 0:s.started_at),initialisedAt:L(s==null?void 0:s.initialised_at),state:s.state,stream_type:s==null?void 0:s.stream_type})}),i}getHLSRecording(e){var r,s;let t={running:!1},i=this.isRecordingRunning(e==null?void 0:e.state);return(i||(e==null?void 0:e.state)===\"paused\")&&(t={running:i,singleFilePerLayer:!!((r=e==null?void 0:e.hls_recording)!=null&&r.single_file_per_layer),hlsVod:!!((s=e==null?void 0:e.hls_recording)!=null&&s.hls_vod),startedAt:L(e==null?void 0:e.started_at),initialisedAt:L(e==null?void 0:e.initialised_at),state:e==null?void 0:e.state,error:this.toSdkError(e==null?void 0:e.error)}),t}getPeerListHLSRecording(e){var r,s;let t=e==null?void 0:e.hls;return{running:this.isRecordingRunning(t==null?void 0:t.state),startedAt:L(t==null?void 0:t.started_at),initialisedAt:L(t==null?void 0:t.initialised_at),state:t==null?void 0:t.state,singleFilePerLayer:(r=t==null?void 0:t.config)==null?void 0:r.single_file_per_layer,hlsVod:(s=t==null?void 0:t.config)==null?void 0:s.hls_vod}}getPeerListBrowserRecording(e){let t=e==null?void 0:e.browser;return{running:this.isRecordingRunning(t==null?void 0:t.state),startedAt:L(t==null?void 0:t.started_at),state:t==null?void 0:t.state}}getPeerListSFURecording(e){let t=e==null?void 0:e.sfu;return{running:this.isRecordingRunning(t==null?void 0:t.state),startedAt:L(t==null?void 0:t.started_at),state:t==null?void 0:t.state}}updateRecordingStatus(e){var s;let t=this.store.getRoom(),i=this.isRecordingRunning(e.state);if(!t){l.w(this.TAG,`set recording status running=${i} - room not present`);return}let r;e.type===\"sfu\"?(t.recording.server={running:i,startedAt:i?L(e.started_at):void 0,error:this.toSdkError(e.error),state:e.state},r=\"SERVER_RECORDING_STATE_UPDATED\"):e.type===\"HLS\"?(t.recording.hls=this.getHLSRecording(e),r=\"RECORDING_STATE_UPDATED\"):(t.recording.browser={running:i,startedAt:i?L(e.started_at):void 0,error:this.toSdkError(e.error),state:e==null?void 0:e.state},r=\"BROWSER_RECORDING_STATE_UPDATED\"),(s=this.listener)==null||s.onRoomUpdate(r,t)}updateRTMPStatus(e){var r,s;let t=this.store.getRoom(),i=this.isStreamingRunning(e.state);if(!t){l.w(this.TAG,\"on policy change - room not present\");return}if(!i){t.rtmp={running:i,state:e.state,error:this.toSdkError(e.error)},(r=this.listener)==null||r.onRoomUpdate(\"RTMP_STREAMING_STATE_UPDATED\",t);return}t.rtmp={running:i,startedAt:i?L(e.started_at):void 0,state:e.state,error:this.toSdkError(e.error)},(s=this.listener)==null||s.onRoomUpdate(\"RTMP_STREAMING_STATE_UPDATED\",t)}toSdkError(e){if(!(e!=null&&e.code))return;let t=e.message||\"error in streaming/recording\",i=new k(e.code,\"ServerErrors\",\"NONE\",t,t);return l.e(this.TAG,\"error in streaming/recording\",i),i}};var ar=class{constructor(e,t){this.store=e;this.listener=t}handleNotification(e,t){e===\"on-metadata-change\"&&this.handleMetadataChange(t)}handleMetadataChange(e){var i;let t=e.values.map(r=>({key:r.key,value:r.data,updatedAt:L(r.updated_at),updatedBy:r.updated_by?this.store.getPeerById(r.updated_by):void 0}));(i=this.listener)==null||i.onSessionStoreUpdate(t)}};var or=class{constructor(e,t,i){this.store=e;this.transport=t;this.listener=i}handleNotification(e,t){switch(e){case\"on-whiteboard-update\":{this.handleWhiteboardUpdate(t);break}default:break}}handleWhiteboardUpdate(e){return c(this,null,function*(){var n;let t=this.store.getLocalPeer(),i=this.store.getWhiteboard(e.id),r=e.owner===(t==null?void 0:t.peerId)||e.owner===(t==null?void 0:t.customerUserId),s=e.state===\"open\",o={id:e.id,title:e.title,attributes:e.attributes};if(o.open=r?i==null?void 0:i.open:s,o.owner=o.open?e.owner:void 0,o.open)if(r)o.url=i==null?void 0:i.url,o.token=i==null?void 0:i.token,o.addr=i==null?void 0:i.addr,o.permissions=i==null?void 0:i.permissions;else{let d=yield this.transport.signal.getWhiteboard({id:e.id});o.url=qt(d.token,d.addr,this.store.getEnv()),o.token=d.token,o.addr=d.addr,o.permissions=d.permissions,o.open=d.permissions.length>0}this.store.setWhiteboard(o),(n=this.listener)==null||n.onWhiteboardUpdate(o)})}};var nr=class{constructor(e,t,i,r,s,o){this.store=e;this.transport=i;this.listener=r;this.audioListener=s;this.connectionQualityListener=o;this.TAG=\"[HMSNotificationManager]\";this.hasConsistentRoomStateArrived=!1;this.ignoreNotification=e=>{if(e===\"peer-list\")this.hasConsistentRoomStateArrived=!0;else if(e===\"room-state\")return this.hasConsistentRoomStateArrived;return!1};this.handleTrackAdd=e=>{this.trackManager.handleTrackAdd(e)};this.handleTrackRemove=e=>{this.trackManager.handleTrackRemove(e)};this.updateLocalPeer=({name:e,metadata:t})=>{let i=this.store.getLocalPeer();this.peerManager.handlePeerInfoUpdate({peer:i,name:e,data:t})};let n=this.transport.isFlagEnabled(\"onDemandTracks\");this.trackManager=n?new zi(this.store,t,this.transport,this.listener):new lt(this.store,t,this.listener),this.peerManager=new Xi(this.store,this.trackManager,this.listener),this.peerListManager=new Yi(this.store,this.peerManager,this.trackManager,this.listener),this.broadcastManager=new Ji(this.listener),this.policyChangeManager=new Zi(this.store,t),this.requestManager=new rr(this.store,this.listener),this.activeSpeakerManager=new ji(this.store,this.listener,this.audioListener),this.connectionQualityManager=new Qi(this.store,this.connectionQualityListener),this.roomUpdateManager=new sr(this.store,this.listener),this.sessionMetadataManager=new ar(this.store,this.listener),this.pollsManager=new ir(this.store,this.transport,this.listener),this.whiteboardManager=new or(this.store,this.transport,this.listener)}setListener(e){this.listener=e,this.trackManager.listener=e,this.peerManager.listener=e,this.peerListManager.listener=e,this.broadcastManager.listener=e,this.requestManager.listener=e,this.activeSpeakerManager.listener=e,this.roomUpdateManager.listener=e,this.sessionMetadataManager.listener=e,this.pollsManager.listener=e,this.whiteboardManager.listener=e}setAudioListener(e){this.audioListener=e,this.activeSpeakerManager.audioListener=e}setConnectionQualityListener(e){this.connectionQualityListener=e,this.connectionQualityManager.listener=e}handleNotification(e,t=!1){var s,o;let i=e.method,r=e.params;[\"active-speakers\",\"sfu-stats\",\"on-connection-quality-update\",void 0].includes(i)||l.d(this.TAG,`Received notification - ${i}`,{notification:r}),i===\"sfu-stats\"&&(s=window.HMS)!=null&&s.ON_SFU_STATS&&typeof((o=window.HMS)==null?void 0:o.ON_SFU_STATS)==\"function\"&&window.HMS.ON_SFU_STATS(e.params),!this.ignoreNotification(i)&&(this.roomUpdateManager.handleNotification(i,r),this.peerManager.handleNotification(i,r),this.requestManager.handleNotification(i,r),this.peerListManager.handleNotification(i,r,t),this.broadcastManager.handleNotification(i,r),this.sessionMetadataManager.handleNotification(i,r),this.pollsManager.handleNotification(i,r),this.whiteboardManager.handleNotification(i,r),this.handleIsolatedMethods(i,r))}handleIsolatedMethods(e,t){switch(e){case\"on-track-add\":{this.trackManager.handleTrackMetadataAdd(t);break}case\"on-track-update\":{this.trackManager.handleTrackUpdate(t);break}case\"on-track-remove\":{if(!t.peer){l.d(this.TAG,`Ignoring sfu notification - ${e}`,{notification:t});return}this.trackManager.handleTrackRemovedPermanently(t);break}case\"on-track-layer-update\":{this.trackManager.handleTrackLayerUpdate(t);break}case\"active-speakers\":this.activeSpeakerManager.handleActiveSpeakers(t);break;case\"on-connection-quality-update\":this.connectionQualityManager.handleQualityUpdate(t);break;case\"on-policy-change\":this.policyChangeManager.handlePolicyChange(t);break;case\"node-info\":this.transport.setSFUNodeId(t.sfu_node_id);break;default:break}}};var cr=class{constructor(e){this.transport=e;this.observedKeys=new Set}get(e){return c(this,null,function*(){let{data:t,updated_at:i}=yield this.transport.signal.getSessionMetadata(e);return{value:t,updatedAt:L(i)}})}set(e,t){return c(this,null,function*(){let{data:i,updated_at:r}=yield this.transport.signal.setSessionMetadata({key:e,data:t}),s=L(r);return{value:i,updatedAt:s}})}observe(e){return c(this,null,function*(){let t=new Set(this.observedKeys);if(e.forEach(i=>this.observedKeys.add(i)),this.observedKeys.size!==t.size)try{yield this.transport.signal.listenMetadataChange(Array.from(this.observedKeys))}catch(i){throw this.observedKeys=t,i}})}unobserve(e){return c(this,null,function*(){let t=new Set(this.observedKeys);if(this.observedKeys=new Set([...this.observedKeys].filter(i=>!e.includes(i))),this.observedKeys.size!==t.size)try{yield this.transport.signal.listenMetadataChange(Array.from(this.observedKeys))}catch(i){throw this.observedKeys=t,i}})}};var dr=class{constructor(e,t,i=\"\",r=\"\",s=\"https://prod-init.100ms.live/init\",o=!1,n){this.authToken=e;this.peerId=t;this.peerName=i;this.data=r;this.endpoint=s;this.autoSubscribeVideo=o;this.iceServers=n}};var j=(s=>(s[s.ConnectFailed=0]=\"ConnectFailed\",s[s.SignalDisconnect=1]=\"SignalDisconnect\",s[s.JoinWSMessageFailed=2]=\"JoinWSMessageFailed\",s[s.PublishIceConnectionFailed=3]=\"PublishIceConnectionFailed\",s[s.SubscribeIceConnectionFailed=4]=\"SubscribeIceConnectionFailed\",s))(j||{}),za={0:[],1:[],2:[1],3:[1],4:[1]};var lr=(n=>(n.Disconnected=\"Disconnected\",n.Connecting=\"Connecting\",n.Joined=\"Joined\",n.Preview=\"Preview\",n.Failed=\"Failed\",n.Reconnecting=\"Reconnecting\",n.Leaving=\"Leaving\",n))(lr||{});var ur=class{constructor(e){this.promise=new Promise((t,i)=>{this.resolve=t,this.reject=i,e(t,i)})}};var pr=class{constructor(e,t){this.onStateChange=e;this.sendEvent=t;this.TAG=\"[RetryScheduler]\";this.inProgress=new Map;this.retryTaskIds=[]}schedule(n){return c(this,arguments,function*({category:e,error:t,task:i,originalState:r,maxRetryTime:s=6e4,changeState:o=!0}){yield this.scheduleTask({category:e,error:t,changeState:o,task:i,originalState:r,maxRetryTime:s,failedAt:Date.now()})})}reset(){this.retryTaskIds.forEach(e=>clearTimeout(e)),this.retryTaskIds=[],this.inProgress.clear()}isTaskInProgress(e){return!!this.inProgress.get(e)}scheduleTask(u){return c(this,arguments,function*({category:e,error:t,changeState:i,task:r,originalState:s,failedAt:o,maxRetryTime:n=6e4,failedRetryCount:d=0}){if(l.d(this.TAG,\"schedule: \",{category:j[e],error:t}),d===0){let v=this.inProgress.get(e);if(v){l.d(this.TAG,`schedule: Already a task for ${j[e]} scheduled, waiting for its completion`),yield v.promise;return}let R=new ur(($,ue)=>{});this.inProgress.set(e,R),this.sendEvent(t,e)}let p=!1,h=za[e];for(let v in h){let R=h[parseInt(v)];try{let $=this.inProgress.get(R);$&&(l.d(this.TAG,`schedule: Suspending retry task of ${j[e]}, waiting for ${j[R]} to recover`),yield $.promise,l.d(this.TAG,`schedule: Resuming retry task ${j[e]} as it's dependency ${j[R]} is recovered`))}catch($){l.d(this.TAG,`schedule: Stopping retry task of ${j[e]} as it's dependency ${j[R]} failed to recover`),p=!0;break}}let T=v=>{if(this.inProgress.delete(e),this.sendEvent(v,e),this.reset(),i)this.onStateChange(\"Failed\",v);else throw v},g=Date.now()-o;if(g>=n||p)return t.description+=`. [${j[e]}] Could not recover after ${g} milliseconds`,p&&(t.description+=` Could not recover all of it's required dependencies - [${h.map(v=>j[v]).toString()}]`),t.isTerminal=!0,T(t);i&&this.onStateChange(\"Reconnecting\",t);let f=this.getDelayForRetryCount(e);l.d(this.TAG,`schedule: [${j[e]}] [failedRetryCount=${d}] Scheduling retry task in ${f}ms`);let E;try{E=yield this.setTimeoutPromise(r,f)}catch(v){E=!1;let R=v;if(R.isTerminal)return l.e(this.TAG,`[${j[e]}] Un-caught terminal exception ${R.name} in retry-task`,v),T(R);l.w(this.TAG,`[${j[e]}] Un-caught exception ${R.name} in retry-task, initiating retry`,v)}if(E){let v=this.inProgress.get(e);this.inProgress.delete(e),v==null||v.resolve(d),i&&this.inProgress.size===0&&this.onStateChange(s),l.d(this.TAG,`schedule: [${j[e]}] [failedRetryCount=${d}] Recovered \\u267B\\uFE0F after ${g}ms`)}else yield this.scheduleTask({category:e,error:t,changeState:i,task:r,originalState:s,maxRetryTime:n,failedAt:o,failedRetryCount:d+1})})}getDelayForRetryCount(e){let t=e===2?Math.random()*2:Math.random(),i=0;return e===2?i=2+t:e===1&&(i=1),i*1e3}setTimeoutPromise(e,t){return c(this,null,function*(){return new Promise((i,r)=>{let s=window.setTimeout(()=>c(this,null,function*(){try{let o=yield e();o&&this.retryTaskIds.splice(this.retryTaskIds.indexOf(s),1),i(o)}catch(o){r(o)}}),t);this.retryTaskIds.push(s)})})}};var hr=class extends Ne{constructor(){super(100);this.localStorage=new fe(\"hms-analytics\");this.localStorage.clear(),this.initLocalStorageQueue()}enqueue(t){super.enqueue(t),this.localStorage.set(this.storage)}dequeue(){let t=super.dequeue();return this.localStorage.set(this.storage),t}initLocalStorageQueue(){var t;(t=this.localStorage.get())==null||t.forEach(i=>{let r=new C(i);super.enqueue(r)})}};var mr=class{constructor(){this.TAG=\"[AnalyticsTransport]\";this.eventCount=0;this.lastResetTime=Date.now();this.MAX_EVENTS_PER_MINUTE=200;this.RESET_INTERVAL_MS=6e4}checkRateLimit(){let e=Date.now();if(e-this.lastResetTime>=this.RESET_INTERVAL_MS&&(this.eventCount=0,this.lastResetTime=e),this.eventCount>=this.MAX_EVENTS_PER_MINUTE)throw new Error(\"Too many events being sent, please check the implementation.\");this.eventCount++}sendEvent(e){try{this.checkRateLimit()}catch(t){throw l.w(this.TAG,\"Rate limit exceeded\",t),t}try{this.sendSingleEvent(e),this.flushFailedEvents()}catch(t){l.w(this.TAG,\"sendEvent failed\",t)}}flushFailedEvents(e){var t;try{for(l.d(this.TAG,\"Flushing failed events\",this.failedEvents);this.failedEvents.size()>0;){let i=this.failedEvents.dequeue();i&&(((t=i.metadata)==null?void 0:t.peer.peer_id)===e||!i.metadata.peer.peer_id?this.sendSingleEvent(i):He.sendEvent(i))}}catch(i){l.w(this.TAG,\"flushFailedEvents failed\",i)}}sendSingleEvent(e){try{this.transportProvider.sendEvent(e),l.d(this.TAG,\"Sent event\",e.name,e)}catch(t){throw l.w(this.TAG,`${this.transportProvider.TAG}.sendEvent failed, adding to local storage events`,{event:e,error:t}),this.failedEvents.enqueue(e),t}}};var Sr=class extends mr{constructor(t){super();this.transportProvider=t;this.failedEvents=new hr}};var ut=class{constructor(e,t,i,r){this.store=e;this.eventBus=t;this.sampleWindowSize=i;this.pushInterval=r;this.shouldSendEvent=!1;this.sequenceNum=1;this.stop=()=>{this.shouldSendEvent&&this.sendEvent(),this.eventBus.statsUpdate.unsubscribe(this.handleStatsUpdate.bind(this)),this.shouldSendEvent=!1};this.start()}start(){this.shouldSendEvent||(this.stop(),this.shouldSendEvent=!0,this.eventBus.statsUpdate.subscribe(this.handleStatsUpdate.bind(this)),this.startLoop().catch(e=>l.e(\"[StatsAnalytics]\",e.message)))}startLoop(){return c(this,null,function*(){for(;this.shouldSendEvent;)yield J(this.pushInterval*1e3),this.sendEvent()})}sendEvent(){this.trackAnalytics.forEach(e=>{e.clearSamples()})}cleanTrackAnalyticsAndCreateSample(e){this.trackAnalytics.forEach(t=>{!this.store.hasTrack(t.track)&&!(t.samples.length>0)&&this.trackAnalytics.delete(t.track_id)}),e&&this.trackAnalytics.forEach(t=>{t.createSample()})}},pt=class{constructor({track:e,ssrc:t,rid:i,kind:r,sampleWindowSize:s}){this.samples=[];this.tempStats=[];this.track=e,this.ssrc=t,this.rid=i,this.kind=r,this.track_id=this.track.trackId,this.source=this.track.source,this.sampleWindowSize=s}pushTempStat(e){this.tempStats.push(e)}createSample(){this.tempStats.length!==0&&(this.samples.push(this.collateSample()),this.prevLatestStat=this.getLatestStat(),this.tempStats.length=0)}clearSamples(){this.samples.length=0}getLatestStat(){return this.tempStats[this.tempStats.length-1]}getFirstStat(){return this.tempStats[0]}calculateSum(e){if(typeof this.getLatestStat()[e]==\"number\")return this.tempStats.reduce((i,r)=>i+(r[e]||0),0)}calculateAverage(e,t=!0){let i=this.calculateSum(e),r=i!==void 0?i/this.tempStats.length:void 0;return r?t?Math.round(r):r:void 0}calculateDifferenceForSample(e){var r;let t=Number((r=this.prevLatestStat)==null?void 0:r[e])||0;return(Number(this.getLatestStat()[e])||0)-t}calculateDifferenceAverage(e,t=!0){let i=this.calculateDifferenceForSample(e)/this.tempStats.length;return t?Math.round(i):i}calculateInstancesOfHigh(e,t){if(typeof this.getLatestStat()[e]==\"number\")return this.tempStats.reduce((r,s)=>r+((s[e]||0)>t?1:0),0)}},gr=(a,e)=>a&&e&&(a.frameWidth!==e.frameWidth||a.frameHeight!==e.frameHeight),Tr=(a,e)=>a&&e&&a.enabled!==e.enabled,Jt=a=>Object.entries(a).filter(([,e])=>e!==void 0).reduce((e,[t,i])=>(e[t]=i,e),{});var Qt=class extends ut{constructor(){super(...arguments);this.trackAnalytics=new Map}toAnalytics(){var r,s;let t=[],i=[];return this.trackAnalytics.forEach(o=>{o.track.type===\"audio\"?t.push(o.toAnalytics()):o.track.type===\"video\"&&i.push(o.toAnalytics())}),{audio:t,video:i,joined_at:(s=(r=this.store.getRoom())==null?void 0:r.joinedAt)==null?void 0:s.getTime(),sequence_num:this.sequenceNum++,max_window_sec:30}}sendEvent(){this.eventBus.analytics.publish(y.publishStats(this.toAnalytics())),super.sendEvent()}handleStatsUpdate(t){let i=!1,r=t.getLocalTrackStats();Object.keys(r).forEach(s=>{let o=r[s],n=this.store.getLocalPeerTracks().find(d=>d.getTrackIDBeingSent()===s);Object.keys(o).forEach(d=>{var g,f,E;let u=o[d];if(!n)return;let p=this.getTrackIdentifier(n.trackId,u),h=M(m({},u),{availableOutgoingBitrate:(f=(g=t.getLocalPeerStats())==null?void 0:g.publish)==null?void 0:f.availableOutgoingBitrate});if(p&&this.trackAnalytics.has(p))(E=this.trackAnalytics.get(p))==null||E.pushTempStat(h);else if(n){let v=new cs({track:n,sampleWindowSize:this.sampleWindowSize,rid:u.rid,ssrc:u.ssrc.toString(),kind:u.kind});v.pushTempStat(h),this.trackAnalytics.set(this.getTrackIdentifier(n.trackId,u),v)}let T=this.trackAnalytics.get(p);T!=null&&T.shouldCreateSample()&&(i=!0)})}),this.cleanTrackAnalyticsAndCreateSample(i)}getTrackIdentifier(t,i){return i.rid?`${t}:${i.rid}`:t}},cs=class extends pt{constructor(){super(...arguments);this.samples=[];this.collateSample=()=>{let t=this.getLatestStat(),i=t.qualityLimitationDurations,r=i&&{bandwidth_sec:i.bandwidth,cpu_sec:i.cpu,other_sec:i.other},s=t.frameHeight?{height_px:this.getLatestStat().frameHeight,width_px:this.getLatestStat().frameWidth}:void 0,o=this.calculateAverage(\"jitter\",!1),n=o?Math.round(o*1e3):void 0,d=this.calculateAverage(\"roundTripTime\",!1),u=d?Math.round(d*1e3):void 0;return Jt({timestamp:Date.now(),avg_available_outgoing_bitrate_bps:this.calculateAverage(\"availableOutgoingBitrate\"),avg_bitrate_bps:this.calculateAverage(\"bitrate\"),avg_fps:this.calculateAverage(\"framesPerSecond\"),total_packets_lost:this.getLatestStat().packetsLost,total_packets_sent:this.getLatestStat().packetsSent,total_packet_sent_delay_sec:parseFloat(this.calculateDifferenceForSample(\"totalPacketSendDelay\").toFixed(4)),total_fir_count:this.calculateDifferenceForSample(\"firCount\"),total_pli_count:this.calculateDifferenceForSample(\"pliCount\"),total_nack_count:this.calculateDifferenceForSample(\"nackCount\"),avg_jitter_ms:n,avg_round_trip_time_ms:u,total_quality_limitation:r,resolution:s})};this.shouldCreateSample=()=>{let t=this.tempStats.length,i=this.tempStats[t-1],r=this.tempStats[t-2];return t===30||Tr(i,r)||i.kind===\"video\"&&gr(i,r)};this.toAnalytics=()=>({track_id:this.track_id,ssrc:this.ssrc,source:this.source,rid:this.rid,samples:this.samples})}};var zt=class extends ut{constructor(){super(...arguments);this.trackAnalytics=new Map}toAnalytics(){var r,s;let t=[],i=[];return this.trackAnalytics.forEach(o=>{o.track.type===\"audio\"?t.push(o.toAnalytics()):o.track.type===\"video\"&&i.push(o.toAnalytics())}),{audio:t,video:i,joined_at:(s=(r=this.store.getRoom())==null?void 0:r.joinedAt)==null?void 0:s.getTime(),sequence_num:this.sequenceNum++,max_window_sec:10}}sendEvent(){this.eventBus.analytics.publish(y.subscribeStats(this.toAnalytics())),super.sendEvent()}handleStatsUpdate(t){let i=t.getAllRemoteTracksStats(),r=!1;Object.keys(i).forEach(s=>{var f,E;let o=this.store.getTrackById(s),n=i[s],d=(f=this.trackAnalytics.get(s))==null?void 0:f.getLatestStat(),p=((v,R)=>{let $=(R==null?void 0:R.jitterBufferDelay)||0,ue=(R==null?void 0:R.jitterBufferEmittedCount)||0,ge=((v==null?void 0:v.jitterBufferDelay)||0)-$,pe=((v==null?void 0:v.jitterBufferEmittedCount)||0)-ue;return pe>0?ge*1e3/pe:(R==null?void 0:R.calculatedJitterBufferDelay)||0})(n,d),h=this.calculateAvSyncForStat(n,t),T=M(m({},n),{calculatedJitterBufferDelay:p,avSync:h});if(n.kind===\"video\"){let v=o.getPreferredLayerDefinition();T.expectedFrameHeight=v==null?void 0:v.resolution.height,T.expectedFrameWidth=v==null?void 0:v.resolution.width}if(this.trackAnalytics.has(s))(E=this.trackAnalytics.get(s))==null||E.pushTempStat(T);else if(o){let v=new ls({track:o,sampleWindowSize:this.sampleWindowSize,ssrc:n.ssrc.toString(),kind:n.kind});v.pushTempStat(T),this.trackAnalytics.set(s,v)}let g=this.trackAnalytics.get(s);g!=null&&g.shouldCreateSample()&&(r=!0)}),this.cleanTrackAnalyticsAndCreateSample(r)}calculateAvSyncForStat(t,i){if(!t.peerID||!t.estimatedPlayoutTimestamp||t.kind!==\"video\")return;let r=this.store.getPeerById(t.peerID),s=r==null?void 0:r.audioTrack,o=r==null?void 0:r.videoTrack;if(!(s&&o&&s.enabled&&o.enabled))return Rt;let d=i.getRemoteTrackStats(s.trackId);if(!d)return Rt;if(d.estimatedPlayoutTimestamp)return d.estimatedPlayoutTimestamp-t.estimatedPlayoutTimestamp}},ls=class extends pt{constructor(){super(...arguments);this.samples=[];this.collateSample=()=>{let t=this.getLatestStat(),i=this.getFirstStat(),r={timestamp:Date.now(),total_pli_count:this.calculateDifferenceForSample(\"pliCount\"),total_nack_count:this.calculateDifferenceForSample(\"nackCount\"),avg_jitter_buffer_delay:this.calculateAverage(\"calculatedJitterBufferDelay\",!1)};if(t.kind===\"video\")return Jt(M(m({},r),{avg_av_sync_ms:this.calculateAvgAvSyncForSample(),avg_frames_received_per_sec:this.calculateDifferenceAverage(\"framesReceived\"),avg_frames_dropped_per_sec:this.calculateDifferenceAverage(\"framesDropped\"),avg_frames_decoded_per_sec:this.calculateDifferenceAverage(\"framesDecoded\"),frame_width:this.calculateAverage(\"frameWidth\"),frame_height:this.calculateAverage(\"frameHeight\"),expected_frame_width:this.calculateAverage(\"expectedFrameWidth\"),expected_frame_height:this.calculateAverage(\"expectedFrameHeight\"),pause_count:this.calculateDifferenceForSample(\"pauseCount\"),pause_duration_seconds:this.calculateDifferenceForSample(\"totalPausesDuration\"),freeze_count:this.calculateDifferenceForSample(\"freezeCount\"),freeze_duration_seconds:this.calculateDifferenceForSample(\"totalFreezesDuration\")}));{let s=(t.concealedSamples||0)-(t.silentConcealedSamples||0)-((i.concealedSamples||0)-(i.silentConcealedSamples||0));return Jt(M(m({},r),{audio_level:this.calculateInstancesOfHigh(\"audioLevel\",.05),audio_concealed_samples:s,audio_total_samples_received:this.calculateDifferenceForSample(\"totalSamplesReceived\"),audio_concealment_events:this.calculateDifferenceForSample(\"concealmentEvents\"),fec_packets_discarded:this.calculateDifferenceForSample(\"fecPacketsDiscarded\"),fec_packets_received:this.calculateDifferenceForSample(\"fecPacketsReceived\"),total_samples_duration:this.calculateDifferenceForSample(\"totalSamplesDuration\"),total_packets_received:this.calculateDifferenceForSample(\"packetsReceived\"),total_packets_lost:this.calculateDifferenceForSample(\"packetsLost\")}))}};this.shouldCreateSample=()=>{let t=this.tempStats.length,i=this.tempStats[t-1],r=this.tempStats[t-2];return t===10||Tr(i,r)||i.kind===\"video\"&&gr(i,r)};this.toAnalytics=()=>({track_id:this.track_id,ssrc:this.ssrc,source:this.source,rid:this.rid,samples:this.samples})}calculateAvgAvSyncForSample(){let i=this.tempStats.map(r=>r.avSync).filter(r=>r!==void 0&&r!==Rt);return i.length===0?Rt:i.reduce((r,s)=>r+s,0)/i.length}};var ht=(t=>(t[t.Publish=0]=\"Publish\",t[t.Subscribe=1]=\"Subscribe\",t))(ht||{});function Ya(a,e){var r;let t=sdp_transform__WEBPACK_IMPORTED_MODULE_6__.parse(a.sdp);if(!((r=t.origin)!=null&&r.username.startsWith(\"mozilla\")))return a;let i=e?Array.from(e.values()):[];return t.media.forEach(s=>{var d,u,p;let o=(d=s.msid)==null?void 0:d.split(\" \")[0],n=(u=i.find(h=>h.type===s.type&&h.stream_id===o))==null?void 0:u.track_id;n&&(s.msid=(p=s.msid)==null?void 0:p.replace(/\\s(.+)/,` ${n}`))}),{type:a.type,sdp:sdp_transform__WEBPACK_IMPORTED_MODULE_6__.write(t)}}function Xa(a,e){var s;if(!(a!=null&&a.sdp)||!e)return;let i=sdp_transform__WEBPACK_IMPORTED_MODULE_6__.parse(a.sdp).media.find(o=>he(o.mid)&&parseInt(o.mid)===parseInt(e));return(s=i==null?void 0:i.msid)==null?void 0:s.split(\" \")[1]}function Za(a){return a.sdp.includes(\"usedtx=1\")?a:{type:a.type,sdp:a.sdp.replace(\"useinbandfec=1\",\"useinbandfec=1;usedtx=1\")}}var Ce=\"[HMSConnection]\",Qe=class{constructor(e,t){this.candidates=new Array;this.role=e,this.signal=t}get iceConnectionState(){return this.nativeConnection.iceConnectionState}get connectionState(){return this.nativeConnection.connectionState}get action(){return this.role===0?\"PUBLISH\":\"SUBSCRIBE\"}setSfuNodeId(e){this.sfuNodeId=e}addTransceiver(e,t){return this.nativeConnection.addTransceiver(e,t)}createOffer(e,t){return c(this,null,function*(){try{let i=yield this.nativeConnection.createOffer(t);return l.d(Ce,`[role=${this.role}] createOffer offer=${JSON.stringify(i,null,1)}`),Za(Ya(i,e))}catch(i){throw S.WebrtcErrors.CreateOfferFailed(this.action,i.message)}})}createAnswer(e=void 0){return c(this,null,function*(){try{let t=yield this.nativeConnection.createAnswer(e);return l.d(Ce,`[role=${this.role}] createAnswer answer=${JSON.stringify(t,null,1)}`),t}catch(t){throw S.WebrtcErrors.CreateAnswerFailed(this.action,t.message)}})}setLocalDescription(e){return c(this,null,function*(){try{l.d(Ce,`[role=${this.role}] setLocalDescription description=${JSON.stringify(e,null,1)}`),yield this.nativeConnection.setLocalDescription(e)}catch(t){throw S.WebrtcErrors.SetLocalDescriptionFailed(this.action,t.message)}})}setRemoteDescription(e){return c(this,null,function*(){try{l.d(Ce,`[role=${this.role}] setRemoteDescription description=${JSON.stringify(e,null,1)}`),yield this.nativeConnection.setRemoteDescription(e)}catch(t){throw S.WebrtcErrors.SetRemoteDescriptionFailed(this.action,t.message)}})}addIceCandidate(e){return c(this,null,function*(){if(this.nativeConnection.signalingState===\"closed\"){l.d(Ce,`[role=${this.role}] addIceCandidate signalling state closed`);return}l.d(Ce,`[role=${this.role}] addIceCandidate candidate=${JSON.stringify(e,null,1)}`),yield this.nativeConnection.addIceCandidate(e)})}get remoteDescription(){return this.nativeConnection.remoteDescription}getSenders(){return this.nativeConnection.getSenders()}handleSelectedIceCandidatePairs(){try{(this.role===0?this.getSenders():this.getReceivers()).forEach(t=>{var r;let i=(r=t.track)==null?void 0:r.kind;if(t.transport){let s=t.transport.iceTransport,o=()=>{typeof s.getSelectedCandidatePair==\"function\"&&(this.selectedCandidatePair=s.getSelectedCandidatePair(),this.selectedCandidatePair&&(this.observer.onSelectedCandidatePairChange(this.selectedCandidatePair),l.d(Ce,`${ht[this.role]} connection`,`selected ${i||\"unknown\"} candidate pair`,JSON.stringify(this.selectedCandidatePair,null,2))))};typeof s.onselectedcandidatepairchange==\"function\"&&(s.onselectedcandidatepairchange=o),o()}})}catch(e){l.w(Ce,`Error in logging selected ice candidate pair for ${ht[this.role]} connection`,e)}}removeTrack(e){this.nativeConnection.signalingState!==\"closed\"&&this.nativeConnection.removeTrack(e)}setMaxBitrateAndFramerate(e,t){return c(this,null,function*(){let i=(t==null?void 0:t.maxBitrate)||e.settings.maxBitrate,r=e instanceof G&&e.settings.maxFramerate,s=this.getSenders().find(o=>{var n;return((n=o==null?void 0:o.track)==null?void 0:n.id)===e.getTrackIDBeingSent()});if(s){let o=s.getParameters();o.encodings.length===1&&(i&&(o.encodings[0].maxBitrate=i*1e3),r&&(o.encodings[0].maxFramerate=r)),yield s.setParameters(o)}else l.w(Ce,`no sender found to setMaxBitrate for track - ${e.trackId}, sentTrackId - ${e.getTrackIDBeingSent()}`)})}getStats(){return c(this,null,function*(){return yield this.nativeConnection.getStats()})}close(){this.nativeConnection.close()}getReceivers(){return this.nativeConnection.getReceivers()}};var Xt=class extends Qe{constructor(t,i,r){super(0,t);this.TAG=\"[HMSPublishConnection]\";this.observer=r,this.nativeConnection=new RTCPeerConnection(i),this.channel=this.nativeConnection.createDataChannel(vi,{protocol:\"SCTP\"}),this.channel.onerror=s=>l.e(this.TAG,`publish data channel onerror ${s}`,s),this.nativeConnection.onicecandidate=({candidate:s})=>{s&&(this.observer.onIceCandidate(s),t.trickle(this.role,s))},this.nativeConnection.oniceconnectionstatechange=()=>{this.observer.onIceConnectionChange(this.nativeConnection.iceConnectionState)},this.nativeConnection.onconnectionstatechange=()=>{this.observer.onConnectionStateChange(this.nativeConnection.connectionState),this.nativeConnection.sctp&&(this.nativeConnection.sctp.transport.onstatechange=()=>{var s;this.observer.onDTLSTransportStateChange((s=this.nativeConnection.sctp)==null?void 0:s.transport.state)},this.nativeConnection.sctp.transport.onerror=s=>{var o;this.observer.onDTLSTransportError(new Error((o=s==null?void 0:s.error)==null?void 0:o.errorDetail)||\"DTLS Transport failed\")})}}close(){super.close(),this.channel.close()}initAfterJoin(){this.nativeConnection.onnegotiationneeded=()=>c(this,null,function*(){l.d(this.TAG,\"onnegotiationneeded\"),yield this.observer.onRenegotiationNeeded()})}};var Zt=class{constructor(e,t,i=\"\"){this.TAG=\"[HMSDataChannel]\";this.nativeChannel=e,this.observer=t,this.metadata=i,e.onmessage=r=>{this.observer.onMessage(r.data)}}get id(){return this.nativeChannel.id}get label(){return this.nativeChannel.label}get readyState(){return this.nativeChannel.readyState}send(e){l.d(this.TAG,`[${this.metadata}] Sending [size=${e.length}] message=${e}`),this.nativeChannel.send(e)}close(){this.nativeChannel.close()}};var ei=class extends Qe{constructor(t,i,r,s){super(1,t);this.isFlagEnabled=r;this.TAG=\"[HMSSubscribeConnection]\";this.remoteStreams=new Map;this.MAX_RETRIES=3;this.pendingMessageQueue=[];this.eventEmitter=new (eventemitter2__WEBPACK_IMPORTED_MODULE_5___default())({maxListeners:60});this.handlePendingApiMessages=()=>{this.eventEmitter.emit(\"open\",!0),this.pendingMessageQueue.length>0&&(l.d(this.TAG,\"Found pending message queue, sending messages\"),this.pendingMessageQueue.forEach(t=>this.sendOverApiDataChannel(t)),this.pendingMessageQueue.length=0)};this.sendMessage=(t,i)=>c(this,null,function*(){var s;((s=this.apiChannel)==null?void 0:s.readyState)!==\"open\"&&(yield this.eventEmitter.waitFor(\"open\"));let r;for(let o=0;o<this.MAX_RETRIES;o++){this.apiChannel.send(t),r=yield this.waitForResponse(i);let n=r.error;if(n){if(n.code===404){l.d(this.TAG,`Track not found ${i}`,{request:t,try:o+1,error:n});break}if(l.d(this.TAG,`Failed sending ${i}`,{request:t,try:o+1,error:n}),!(n.code/100===5||n.code===429))throw Error(`code=${n.code}, message=${n.message}`);let u=(2+Math.random()*2)*1e3;yield Oe(u)}else break}return r});this.waitForResponse=t=>c(this,null,function*(){let i=yield this.eventEmitter.waitFor(\"message\",function(s){return s.includes(t)}),r=JSON.parse(i[0]);return l.d(this.TAG,`response for ${t} -`,JSON.stringify(r,null,2)),r});this.observer=s,this.nativeConnection=new RTCPeerConnection(i),this.initNativeConnectionCallbacks()}initNativeConnectionCallbacks(){this.nativeConnection.oniceconnectionstatechange=()=>{this.observer.onIceConnectionChange(this.nativeConnection.iceConnectionState)},this.nativeConnection.onconnectionstatechange=()=>{this.observer.onConnectionStateChange(this.nativeConnection.connectionState)},this.nativeConnection.ondatachannel=t=>{t.channel.label===vi&&(this.apiChannel=new Zt(t.channel,{onMessage:i=>{this.eventEmitter.emit(\"message\",i),this.observer.onApiChannelMessage(i)}},`role=${this.role}`),t.channel.onopen=this.handlePendingApiMessages)},this.nativeConnection.onicecandidate=t=>{t.candidate!==null&&(this.observer.onIceCandidate(t.candidate),this.signal.trickle(this.role,t.candidate))},this.nativeConnection.ontrack=t=>{var p;let i=t.streams[0],r=i.id;if(!this.remoteStreams.has(r)){let h=new Pe(i,this);this.remoteStreams.set(r,h)}i.addEventListener(\"removetrack\",h=>{if(h.track.id!==t.track.id)return;let T=s.tracks.findIndex(g=>{var f;return g.nativeTrack.id===h.track.id&&t.transceiver.mid===((f=g.transceiver)==null?void 0:f.mid)});if(T>=0){let g=s.tracks[T];this.observer.onTrackRemove(g),s.tracks.splice(T,1),s.tracks.length===0&&this.remoteStreams.delete(r)}});let s=this.remoteStreams.get(r),o=t.track.kind===\"audio\",n=o?ie:O,d=o?new n(s,t.track):new n(s,t.track,void 0,this.isFlagEnabled(\"disableNoneLayerRequest\"));t.track.kind===\"video\"&&s.setVideoLayerLocally(\"none\",\"addTrack\",\"subscribeConnection\"),d.transceiver=t.transceiver;let u=Xa(this.remoteDescription,(p=t.transceiver)==null?void 0:p.mid);u&&d.setSdpTrackId(u),s.tracks.push(d),this.observer.onTrackAdd(d)}}sendOverApiDataChannel(t){this.apiChannel&&this.apiChannel.readyState===\"open\"?this.apiChannel.send(t):(l.w(this.TAG,`API Data channel not ${this.apiChannel?\"open\":\"present\"}, queueing`,t),this.pendingMessageQueue.push(t))}sendOverApiDataChannelWithResponse(t,i){return c(this,null,function*(){let r=(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();if(t.method===\"prefer-video-track-state\"&&this.isFlagEnabled(\"disableVideoTrackAutoUnsubscribe\")&&t.params.max_spatial_layer===\"none\")return l.d(this.TAG,\"video auto unsubscribe is disabled, request is ignored\"),{id:r};let s=JSON.stringify(m({id:i||r,jsonrpc:\"2.0\"},t));return this.sendMessage(s,r)})}close(){var t;super.close(),(t=this.apiChannel)==null||t.close()}};var eo=(a,e)=>!e||e.length===0?a:e.map(i=>({urls:i.urls,credentialType:\"password\",credential:i.password,username:i.userName}));var vr=\"[InitService]\",ti=class{static handleError(e,t){switch(e.status){case 404:throw S.APIErrors.EndpointUnreachable(\"INIT\",t.message||e.statusText);case 200:break;default:throw S.APIErrors.ServerErrors(t.code||e.status,\"INIT\",t.message||(e==null?void 0:e.statusText))}}static fetchInitConfig(n){return c(this,arguments,function*({token:e,peerId:t,userAgent:i,initEndpoint:r=\"https://prod-init.100ms.live\",region:s=\"\",iceServers:o}){l.d(vr,`fetchInitConfig: initEndpoint=${r} token=${e} peerId=${t} region=${s} `);let d=bn(r,t,i,s);try{let u=yield fetch(d,{headers:{Authorization:`Bearer ${e}`}});try{let p=yield u.clone().json();return this.handleError(u,p),l.d(vr,`config is ${JSON.stringify(p,null,2)}`),An(p,o)}catch(p){let h=yield u.text();throw l.e(vr,\"json error\",p.message,h),p instanceof k?p:S.APIErrors.ServerErrors(u.status,\"INIT\",p.message)}}catch(u){let p=u;throw[\"Failed to fetch\",\"NetworkError\",\"ECONNRESET\"].some(h=>p.message.includes(h))?S.APIErrors.EndpointUnreachable(\"INIT\",p.message):p}})}};function bn(a,e,t,i){try{let r=new URL(\"/init\",a);return i&&i.trim().length>0&&r.searchParams.set(\"region\",i.trim()),r.searchParams.set(\"peer_id\",e),r.searchParams.set(\"user_agent_v2\",t),r.toString()}catch(r){let s=r;throw l.e(vr,s.name,s.message),s}}function An(a,e){var t;return M(m({},a),{rtcConfiguration:M(m({},a.rtcConfiguration),{iceServers:eo((t=a.rtcConfiguration)==null?void 0:t.ice_servers,e)})})}var ii=class{constructor(e){this.TAG=\"[SIGNAL]: \";this.pongResponseTimes=new Ne(5);this.isJoinCompleted=!1;this.pendingTrickle=[];this.socket=null;this.callbacks=new Map;this._isConnected=!1;this.id=0;this.onCloseHandler=()=>{};this.resolvePingOnAnyResponse=()=>{this.callbacks.forEach((e,t)=>{var i;((i=e.metadata)==null?void 0:i.method)===\"ping\"&&(e.resolve({timestamp:Date.now()}),this.callbacks.delete(t))})};this.offlineListener=()=>{l.d(this.TAG,\"Window network offline\"),this.setIsConnected(!1,\"Window network offline\")};this.onlineListener=()=>{l.d(this.TAG,\"Window network online\"),this.observer.onNetworkOnline()};this.observer=e,window.addEventListener(\"offline\",this.offlineListener),window.addEventListener(\"online\",this.onlineListener),this.onMessageHandler=this.onMessageHandler.bind(this)}get isConnected(){return this._isConnected}setSfuNodeId(e){this.sfuNodeId=e}setIsConnected(e,t=\"\"){l.d(this.TAG,`isConnected set id: ${this.id}, oldValue: ${this._isConnected}, newValue: ${e}`),this._isConnected!==e&&(this._isConnected&&!e?(this._isConnected=e,this.rejectPendingCalls(t),this.observer.onOffline(t)):!this._isConnected&&e&&(this._isConnected=e,this.observer.onOnline()))}getPongResponseTimes(){return this.pongResponseTimes.toList()}internalCall(e,t){return c(this,null,function*(){var s;let i=(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(),r={method:e,params:t,id:i,jsonrpc:\"2.0\"};(s=this.socket)==null||s.send(JSON.stringify(r));try{return yield new Promise((n,d)=>{this.callbacks.set(i,{resolve:n,reject:d,metadata:{method:e}})})}catch(o){if(o instanceof k)throw o;let n=o;throw S.WebsocketMethodErrors.ServerErrors(Number(n.code),br(e),n.message)}})}notify(e,t){var r,s;let i={method:e,params:t};((r=this.socket)==null?void 0:r.readyState)===WebSocket.OPEN&&((s=this.socket)==null||s.send(JSON.stringify(i)))}open(e){return new Promise((t,i)=>{let r=!1;this.socket&&(this.socket.close(),this.socket.removeEventListener(\"close\",this.onCloseHandler),this.socket.removeEventListener(\"message\",this.onMessageHandler)),this.socket=new WebSocket(e);let s=()=>{l.e(this.TAG,\"Error from websocket\"),r=!0,i(S.WebSocketConnectionErrors.FailedToConnect(\"JOIN\",\"Error opening websocket connection\"))};this.onCloseHandler=n=>{l.w(`Websocket closed code=${n.code}`),r?this.setIsConnected(!1,`code: ${n.code}${n.code!==1e3?\", unexpected websocket close\":\"\"}`):(r=!0,i(S.WebSocketConnectionErrors.AbnormalClose(\"JOIN\",`Error opening websocket connection - websocket closed unexpectedly with code=${n.code}`)))},this.socket.addEventListener(\"error\",s);let o=()=>{var n,d;r=!0,t(),this.setIsConnected(!0),this.id++,(n=this.socket)==null||n.removeEventListener(\"open\",o),(d=this.socket)==null||d.removeEventListener(\"error\",s),this.pingPongLoop(this.id)};this.socket.addEventListener(\"open\",o),this.socket.addEventListener(\"close\",this.onCloseHandler),this.socket.addEventListener(\"message\",this.onMessageHandler)})}close(){return c(this,null,function*(){window.removeEventListener(\"offline\",this.offlineListener),window.removeEventListener(\"online\",this.onlineListener),this.socket?(this.socket.close(1e3,\"Normal Close\"),this.setIsConnected(!1,\"code: 1000, normal websocket close\"),this.socket.removeEventListener(\"close\",this.onCloseHandler),this.socket.removeEventListener(\"message\",this.onMessageHandler)):this.setIsConnected(!1,\"websocket not connected yet\")})}join(e,t,i,r,s,o,n){return c(this,null,function*(){if(!this.isConnected)throw S.WebSocketConnectionErrors.WebSocketConnectionLost(\"JOIN\",\"Failed to send join over WS connection\");let d={name:e,disableVidAutoSub:i,data:t,offer:n,server_sub_degrade:r,simulcast:s,onDemandTracks:o},u=yield this.internalCall(\"join\",d);return this.isJoinCompleted=!0,this.pendingTrickle.forEach(({target:p,candidate:h})=>this.trickle(p,h)),this.pendingTrickle.length=0,l.d(this.TAG,`join: response=${JSON.stringify(u,null,1)}`),u})}trickle(e,t){this.isJoinCompleted?this.notify(\"trickle\",{target:e,candidate:t,sfu_node_id:this.sfuNodeId}):this.pendingTrickle.push({target:e,candidate:t})}offer(e,t){return c(this,null,function*(){return yield this.call(\"offer\",{desc:e,tracks:Object.fromEntries(t),sfu_node_id:this.sfuNodeId})})}answer(e){this.notify(\"answer\",{desc:e,sfu_node_id:this.sfuNodeId})}trackUpdate(e){this.notify(\"track-update\",{tracks:Object.fromEntries(e)})}broadcast(e){return c(this,null,function*(){return yield this.call(\"broadcast\",e)})}leave(e){this.notify(\"leave\",{client_reason:e})}endRoom(e,t){return c(this,null,function*(){yield this.call(\"end-room\",{lock:e,reason:t})})}sendEvent(e){if(!this.isConnected)throw Error(`${this.TAG} not connected. Could not send event ${e}`);this.notify(\"analytics\",e.toSignalParams())}ping(e){let t=Date.now(),i=new Promise(s=>{setTimeout(()=>{s(Date.now()-t)},e+1)}),r=this.internalCall(\"ping\",{timestamp:t}).then(()=>Date.now()-t).catch(()=>Date.now()-t);return Promise.race([i,r])}requestRoleChange(e){return c(this,null,function*(){yield this.call(\"role-change-request\",e)})}requestBulkRoleChange(e){return c(this,null,function*(){yield this.call(\"role-change-request\",e)})}acceptRoleChangeRequest(e){return c(this,null,function*(){yield this.call(\"role-change\",e)})}requestTrackStateChange(e){return c(this,null,function*(){yield this.call(\"track-update-request\",e)})}requestMultiTrackStateChange(e){return c(this,null,function*(){yield this.call(\"change-track-mute-state-request\",e)})}removePeer(e){return c(this,null,function*(){yield this.call(\"peer-leave-request\",e)})}startRTMPOrRecording(e){return c(this,null,function*(){yield this.call(\"rtmp-start\",m({},e))})}stopRTMPAndRecording(){return c(this,null,function*(){yield this.call(\"rtmp-stop\",{})})}startHLSStreaming(e){return c(this,null,function*(){yield this.call(\"hls-start\",m({},e))})}stopHLSStreaming(e){return c(this,null,function*(){yield this.call(\"hls-stop\",m({},e))})}startTranscription(e){return c(this,null,function*(){yield this.call(\"transcription-start\",m({},e))})}stopTranscription(e){return c(this,null,function*(){yield this.call(\"transcription-stop\",m({},e))})}sendHLSTimedMetadata(e){return c(this,null,function*(){yield this.call(\"hls-timed-metadata\",m({},e))})}updatePeer(e){return c(this,null,function*(){yield this.call(\"peer-update\",m({},e))})}getPeer(e){return c(this,null,function*(){return yield this.call(\"get-peer\",m({},e))})}joinGroup(e){return c(this,null,function*(){return yield this.call(\"group-join\",{name:e})})}leaveGroup(e){return c(this,null,function*(){return yield this.call(\"group-leave\",{name:e})})}addToGroup(e,t){return c(this,null,function*(){yield this.call(\"group-add\",{name:t,peer_id:e})})}removeFromGroup(e,t){return c(this,null,function*(){yield this.call(\"group-remove\",{name:t,peer_id:e})})}peerIterNext(e){return c(this,null,function*(){return yield this.call(\"peer-iter-next\",e)})}findPeers(e){return c(this,null,function*(){return yield this.call(\"find-peer\",e)})}findPeerByName(e){return c(this,null,function*(){return yield this.call(\"peer-name-search\",e)})}setSessionMetadata(e){if(!this.isConnected)throw S.WebSocketConnectionErrors.WebSocketConnectionLost(\"RECONNECT_SIGNAL\",\"Failed to set session store value due to network disconnection\");return this.call(\"set-metadata\",m({},e))}listenMetadataChange(e){if(!this.isConnected)throw S.WebSocketConnectionErrors.WebSocketConnectionLost(\"RECONNECT_SIGNAL\",\"Failed to observe session store key due to network disconnection\");return this.call(\"listen-metadata-change\",{keys:e})}getSessionMetadata(e){if(!this.isConnected)throw S.WebSocketConnectionErrors.WebSocketConnectionLost(\"RECONNECT_SIGNAL\",\"Failed to set session store value due to network disconnection\");return this.call(\"get-metadata\",{key:e})}setPollInfo(e){return this.call(\"poll-info-set\",m({},e))}getPollInfo(e){return this.call(\"poll-info-get\",m({},e))}setPollQuestions(e){return this.call(\"poll-questions-set\",m({},e))}startPoll(e){return this.call(\"poll-start\",m({},e))}stopPoll(e){return this.call(\"poll-stop\",m({},e))}getPollQuestions(e){return this.call(\"poll-questions-get\",m({},e))}setPollResponses(e){return this.call(\"poll-response\",m({},e))}getPollResponses(e){return this.call(\"poll-responses\",m({},e))}getPollsList(e){return this.call(\"poll-list\",m({},e))}getPollResult(e){return this.call(\"poll-result\",m({},e))}createWhiteboard(e){return this.validateConnection(),this.call(\"whiteboard-create\",m({},e))}getWhiteboard(e){return this.validateConnection(),this.call(\"whiteboard-get\",m({},e))}fetchPollLeaderboard(e){return this.call(\"poll-leaderboard\",m({},e))}validateConnection(){if(!this.isConnected)throw S.WebSocketConnectionErrors.WebSocketConnectionLost(\"RECONNECT_SIGNAL\",\"Failed to send message due to network disconnection\")}onMessageHandler(e){let t=e.data,i=JSON.parse(t);if(this.resolvePingOnAnyResponse(),i.id)this.handleResponseWithId(i);else if(i.method)this.handleResponseWithMethod(i);else throw Error(`WebSocket message has no 'method' or 'id' field, message=${i}`)}handleResponseWithId(e){let t=e,i=t.id;if(this.callbacks.has(i)){let r=this.callbacks.get(i);this.callbacks.delete(i),t.result?r.resolve(t.result):r.reject(t.error)}else this.observer.onNotification(t)}handleResponseWithMethod(e){switch(e.method){case\"offer\":this.observer.onOffer(e.params);break;case\"trickle\":this.observer.onTrickle(e.params);break;case\"on-error\":this.observer.onServerError(S.WebsocketMethodErrors.ServerErrors(Number(e.params.code),\"on-error\",e.params.message));break;case\"on-warning\":l.w(this.TAG,e.params);break;default:this.observer.onNotification(e);break}}rejectPendingCalls(e=\"\"){this.callbacks.forEach((t,i)=>{var r,s,o,n;((r=t.metadata)==null?void 0:r.method)!==\"ping\"&&(l.e(this.TAG,`rejecting pending callback ${(s=t.metadata)==null?void 0:s.method}, id=${i}`),t.reject(S.WebSocketConnectionErrors.WebSocketConnectionLost((o=t.metadata)!=null&&o.method?br((n=t.metadata)==null?void 0:n.method):\"RECONNECT_SIGNAL\",e)),this.callbacks.delete(i))})}pingPongLoop(e){return c(this,null,function*(){var i,r;let t=((i=window.HMS)==null?void 0:i.PING_TIMEOUT)||12e3;if(this.isConnected){let s=yield this.ping(t);this.pongResponseTimes.enqueue(s),s>t?(l.d(this.TAG,`Pong timeout ${e}, pageHidden=${Rs()}`),this.id===e&&this.setIsConnected(!1,\"ping pong failure\")):setTimeout(()=>this.pingPongLoop(e),((r=window.HMS)==null?void 0:r.PING_INTERVAL)||3e3)}})}call(e,t){return c(this,null,function*(){let r=S.WebsocketMethodErrors.ServerErrors(500,e,`Default ${e} error`),s;for(s=1;s<=3;s++)try{return this.validateConnection(),l.d(this.TAG,`Try number ${s} sending ${e}`,t),yield this.internalCall(e,t)}catch(o){if(r=o,l.e(this.TAG,`Failed sending ${e} try: ${s}`,{method:e,params:t,error:r}),!(parseInt(`${r.code/100}`)===5||r.code===429||r.code===1003))break;let d=(2+Math.random()*2)*1e3;yield Oe(d)}throw l.e(`Sending ${e} over WS failed after ${Math.min(s,3)} retries`,{method:e,params:t,error:r}),r})}};var to=()=>{if(!U||typeof navigator.connection==\"undefined\")return;let a=navigator.connection;return{downlink:a.downlink,downlinkMax:a.downlinkMax,effectiveType:a.effectiveType,rtt:a.rtt,saveData:a.saveData,type:a.type}};var I=\"[HMSTransport]:\",ri=class{constructor(e,t,i,r,s,o,n){this.observer=e;this.deviceManager=t;this.store=i;this.eventBus=r;this.analyticsEventsService=s;this.analyticsTimer=o;this.pluginUsageTracker=n;this.state=\"Disconnected\";this.trackStates=new Map;this.publishConnection=null;this.subscribeConnection=null;this.maxSubscribeBitrate=0;this.joinRetryCount=0;this.publishDisconnectTimer=0;this.onScreenshareStop=()=>{};this.screenStream=new Set;this.callbacks=new Map;this.setListener=e=>{this.listener=e};this.setOnScreenshareStop=e=>{this.onScreenshareStop=e};this.signalObserver={onOffer:e=>c(this,null,function*(){try{if(!this.subscribeConnection)return;if(e.sfu_node_id&&this.subscribeConnection.sfuNodeId&&this.subscribeConnection.sfuNodeId!==e.sfu_node_id){l.d(I,\"ignoring old offer\");return}yield this.subscribeConnection.setRemoteDescription(e),l.d(I,`[SUBSCRIBE] Adding ${this.subscribeConnection.candidates.length} ice-candidates`,this.subscribeConnection.candidates);for(let i of this.subscribeConnection.candidates)yield this.subscribeConnection.addIceCandidate(i);this.subscribeConnection.candidates.length=0;let t=yield this.subscribeConnection.createAnswer();yield this.subscribeConnection.setLocalDescription(t),this.signal.answer(t),l.d(I,\"[role=SUBSCRIBE] onOffer renegotiation DONE \\u2705\")}catch(t){l.d(I,\"[role=SUBSCRIBE] onOffer renegotiation FAILED \\u274C\",t),this.state=\"Failed\";let i;t instanceof k?i=t:i=S.GenericErrors.Unknown(\"SUBSCRIBE\",t.message),this.observer.onFailure(i),this.eventBus.analytics.publish(y.subscribeFail(i))}}),onTrickle:e=>c(this,null,function*(){let t=e.target===0?this.publishConnection:this.subscribeConnection;t!=null&&t.remoteDescription?yield t.addIceCandidate(e.candidate):t==null||t.candidates.push(e.candidate)}),onNotification:e=>this.observer.onNotification(e),onServerError:e=>c(this,null,function*(){yield this.observer.onStateChange(\"Failed\",e)}),onFailure:e=>{this.joinParameters&&this.retryScheduler.schedule({category:1,error:e,task:this.retrySignalDisconnectTask,originalState:this.state})},onOffline:e=>c(this,null,function*(){l.d(I,\"socket offline\",lr[this.state]);try{this.state!==\"Leaving\"&&this.joinParameters&&this.retryScheduler.schedule({category:1,error:S.WebSocketConnectionErrors.WebSocketConnectionLost(\"RECONNECT_SIGNAL\",e),task:this.retrySignalDisconnectTask,originalState:this.state})}catch(t){console.error(t)}}),onOnline:()=>{var e;l.d(I,\"socket online\",lr[this.state]),this.analyticsSignalTransport.flushFailedEvents((e=this.store.getLocalPeer())==null?void 0:e.peerId)},onNetworkOnline:()=>{this.analyticsEventsService.flushFailedClientEvents()}};this.signal=new ii(this.signalObserver);this.analyticsSignalTransport=new Sr(this.signal);this.publishDtlsStateTimer=0;this.lastPublishDtlsState=\"new\";this.handleLocalRoleUpdate=i=>c(this,[i],function*({oldRole:e,newRole:t}){!this.doesRoleNeedWebRTC(e)&&this.doesRoleNeedWebRTC(t)&&(l.d(I,\"Local peer role updated to webrtc role, creating PeerConnections and performing inital publish negotiation \\u23F3\"),this.createPeerConnections(),yield this.negotiateOnFirstPublish())});this.retryPublishIceFailedTask=()=>c(this,null,function*(){if(this.publishConnection){let e=new Promise((t,i)=>{this.callbacks.set(rt,{promise:{resolve:t,reject:i},action:\"RESTART_ICE\",extra:{}})});yield this.performPublishRenegotiation({iceRestart:this.publishConnection.connectionState!==\"connected\"}),yield e}return!0});this.retrySubscribeIceFailedTask=()=>c(this,null,function*(){if(this.subscribeConnection&&this.subscribeConnection.connectionState!==\"connected\"){let e=new Promise((i,r)=>{this.callbacks.set(st,{promise:{resolve:i,reject:r},action:\"RESTART_ICE\",extra:{}})}),t=new Promise(i=>{setTimeout(i,6e4,!1)});return Promise.race([e,t])}return!0});this.retrySignalDisconnectTask=()=>c(this,null,function*(){var t;l.d(I,\"retrySignalDisconnectTask\",{signalConnected:this.signal.isConnected}),this.signal.isConnected||(yield this.internalConnect(this.joinParameters.authToken,this.joinParameters.endpoint,this.joinParameters.peerId,this.joinParameters.iceServers));let e=(t=this.store.getRoom())!=null&&t.joinedAt?this.signal.isConnected&&(yield this.retryPublishIceFailedTask()):this.signal.isConnected;return this.signal.trackUpdate(this.trackStates),e});this.webrtcInternals=new yi(this.store,this.eventBus);let d=(u,p)=>c(this,null,function*(){u!==this.state&&(this.state=u,yield this.observer.onStateChange(this.state,p))});this.retryScheduler=new pr(d,this.sendErrorAnalyticsEvent.bind(this)),this.eventBus.statsUpdate.subscribe(u=>{var h,T;let p=((T=(h=u.getLocalPeerStats())==null?void 0:h.subscribe)==null?void 0:T.bitrate)||0;this.maxSubscribeBitrate=Math.max(this.maxSubscribeBitrate,p)}),this.eventBus.localAudioEnabled.subscribe(({track:u,enabled:p})=>this.trackUpdate(u,p)),this.eventBus.localVideoEnabled.subscribe(({track:u,enabled:p})=>this.trackUpdate(u,p))}getWebsocketEndpoint(){if(this.initConfig)return this.initConfig.endpoint}getWebrtcInternals(){return this.webrtcInternals}isFlagEnabled(e){var r;let t=(r=this.initConfig)==null?void 0:r.config;return((t==null?void 0:t.enabledFlags)||[]).includes(e)}setConnectivityListener(e){this.connectivityListener=e}preview(e,t,i,r,s=!1,o){return c(this,null,function*(){let n=yield this.connect(e,t,i,r,s,o);return this.state=\"Preview\",this.observer.onStateChange(this.state),n})}join(e,t,i,r,s=!1,o){return c(this,null,function*(){l.d(I,\"join: started \\u23F0\");try{(!this.signal.isConnected||!this.initConfig)&&(yield this.connect(e,r,t,i,s,o)),this.validateNotDisconnected(\"connect\"),this.initConfig&&(yield this.waitForLocalRoleAvailability(),yield this.createConnectionsAndNegotiateJoin(i,s),this.initStatsAnalytics(),l.d(I,\"\\u2705 join: Negotiated over PUBLISH connection\"))}catch(n){l.e(I,`join: failed \\u274C [token=${e}]`,n),this.state=\"Failed\";let d=n;throw d.isTerminal=d.isTerminal||d.code===500,yield this.observer.onStateChange(this.state,d),d}l.d(I,\"\\u2705 join: successful\"),this.state=\"Joined\",this.observer.onStateChange(this.state)})}connect(e,t,i,r,s=!1,o){return c(this,null,function*(){this.setTransportStateForConnect(),this.joinParameters=new dr(e,i,r.name,r.metaData,t,s,o);try{return yield this.internalConnect(e,t,i,o)}catch(n){if(n instanceof k&&([P.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST,P.WebSocketConnectionErrors.FAILED_TO_CONNECT,P.WebSocketConnectionErrors.ABNORMAL_CLOSE,P.APIErrors.ENDPOINT_UNREACHABLE].includes(n.code)||n.code.toString().startsWith(\"5\")||n.code.toString().startsWith(\"429\"))){let u=()=>c(this,null,function*(){return yield this.internalConnect(e,t,i,o),!!(this.initConfig&&this.initConfig.endpoint)});yield this.retryScheduler.schedule({category:0,error:n,task:u,originalState:this.state,changeState:!1})}else throw n}})}leave(i){return c(this,arguments,function*(e,t=\"user request\"){var r,s,o;this.retryScheduler.reset(),this.joinParameters=void 0,l.d(I,\"leaving in transport\");try{let n=this.pluginUsageTracker.getPluginUsage(\"HMSKrispPlugin\");if(n&&this.eventBus.analytics.publish(y.getKrispUsage(n)),this.state=\"Leaving\",(r=this.publishStatsAnalytics)==null||r.stop(),(s=this.subscribeStatsAnalytics)==null||s.stop(),(o=this.webrtcInternals)==null||o.cleanup(),this.clearPeerConnections(),e)try{this.signal.leave(t),l.d(I,\"signal leave done\")}catch(d){l.w(I,\"failed to send leave on websocket to server\",d)}this.analyticsEventsService.flushFailedClientEvents(),this.analyticsEventsService.reset(),yield this.signal.close()}catch(n){this.eventBus.analytics.publish(y.disconnect(n)),l.e(I,\"leave: FAILED \\u274C\",n)}finally{this.state=\"Disconnected\",this.observer.onStateChange(this.state)}})}publish(e){return c(this,null,function*(){var t;for(let i of e)try{yield this.publishTrack(i),(t=this.connectivityListener)==null||t.onMediaPublished(i)}catch(r){this.eventBus.analytics.publish(y.publish({devices:this.deviceManager.getDevices(),error:r}))}})}unpublish(e){return c(this,null,function*(){for(let t of e)yield this.unpublishTrack(t)})}setSFUNodeId(e){var t,i;this.signal.setSfuNodeId(e),this.sfuNodeId?e&&this.sfuNodeId!==e&&(this.sfuNodeId=e,this.handleSFUMigration()):(this.sfuNodeId=e,(t=this.publishConnection)==null||t.setSfuNodeId(e),(i=this.subscribeConnection)==null||i.setSfuNodeId(e))}handleSFUMigration(){return c(this,null,function*(){var s,o;l.time(\"sfu migration\"),this.clearPeerConnections();let e=this.store.getPeerMap();this.store.removeRemoteTracks();for(let n in e){let d=e[n];d.isLocal||(d.audioTrack=void 0,d.videoTrack=void 0,d.auxiliaryTracks=[])}let t=this.store.getLocalPeer();if(!t)return;this.createPeerConnections(),this.trackStates.clear(),yield this.negotiateOnFirstPublish();let i=new Map;if(t.audioTrack){let n=t.audioTrack.stream;i.get(n.id)||i.set(n.id,new Se(new MediaStream));let d=t.audioTrack.clone(i.get(n.id));this.store.removeTrack(t.audioTrack),t.audioTrack.cleanup(),yield this.publishTrack(d),t.audioTrack=d}if(t.videoTrack){let n=t.videoTrack.stream;i.get(n.id)||i.set(n.id,new Se(new MediaStream)),this.store.removeTrack(t.videoTrack);let d=t.videoTrack.clone(i.get(n.id));t.videoTrack.cleanup(),yield this.publishTrack(d),t.videoTrack=d}let r=[];for(;t.auxiliaryTracks.length>0;){let n=t.auxiliaryTracks.shift();if(n){let d=n.stream;i.get(d.id)||i.set(d.id,new Se(n.source===\"screen\"?d.nativeStream.clone():new MediaStream)),this.store.removeTrack(n);let u=n.clone(i.get(d.id));u.type===\"video\"&&u.source===\"screen\"&&(this.screenStream.add(d.nativeStream),this.screenStream.add(u.stream.nativeStream),u.nativeTrack.addEventListener(\"ended\",this.onScreenshareStop)),n.cleanup(),yield this.publishTrack(u),r.push(u)}}t.auxiliaryTracks=r,i.clear(),(o=(s=this.listener)==null?void 0:s.onSFUMigration)==null||o.call(s),l.timeEnd(\"sfu migration\")})}trackUpdate(e,t){var s;let r=Array.from(this.trackStates.values()).find(o=>e.type===o.type&&e.source===o.source);if(r){let o=new Vt(M(m({},r),{mute:!t}));this.trackStates.set(r.track_id,o),l.d(I,\"Track Update\",this.trackStates,e),this.signal.trackUpdate(new Map([[r.track_id,o]]));let n=this.store.getLocalPeer();n&&t===e.enabled&&((s=this.listener)==null||s.onTrackUpdate(t?3:2,e,n))}}publishTrack(e){return c(this,null,function*(){e.publishedTrackId=e.getTrackIDBeingSent(),l.d(I,`\\u23F3 publishTrack: trackId=${e.trackId}, toPublishTrackId=${e.publishedTrackId}`,`${e}`),this.trackStates.set(e.publishedTrackId,new Vt(e));let t=new Promise((s,o)=>{this.callbacks.set(rt,{promise:{resolve:s,reject:o},action:\"PUBLISH\",extra:{}})}),i=e.stream;i.setConnection(this.publishConnection);let r=this.store.getSimulcastLayers(e.source);i.addTransceiver(e,r),l.time(`publish-${e.trackId}-${e.type}`),yield t,l.timeEnd(`publish-${e.trackId}-${e.type}`),this.store.addTrack(e),yield i.setMaxBitrateAndFramerate(e).then(()=>{l.d(I,`Setting maxBitrate=${e.settings.maxBitrate} kpbs${e instanceof G?` and maxFramerate=${e.settings.maxFramerate}`:\"\"} for ${e.source} ${e.type} ${e.trackId}`)}).catch(s=>l.w(I,\"Failed setting maxBitrate and maxFramerate\",s)),e.isPublished=!0,l.d(I,`\\u2705 publishTrack: trackId=${e.trackId}`,`${e}`,this.callbacks)})}unpublishTrack(e){return c(this,null,function*(){if(l.d(I,`\\u23F3 unpublishTrack: trackId=${e.trackId}`,`${e}`),e.publishedTrackId&&this.trackStates.has(e.publishedTrackId))this.trackStates.delete(e.publishedTrackId);else{let s=Array.from(this.trackStates.values()).find(o=>e.type===o.type&&e.source===o.source);s&&this.trackStates.delete(s.track_id)}let t=new Promise((r,s)=>{this.callbacks.set(rt,{promise:{resolve:r,reject:s},action:\"UNPUBLISH\",extra:{}})});e.stream.removeSender(e),yield t,yield e.cleanup(),e.source===\"screen\"&&this.screenStream&&this.screenStream.forEach(r=>{r.getTracks().forEach(s=>{s.stop()}),this.screenStream.delete(r)}),this.store.removeTrack(e),l.d(I,`\\u2705 unpublishTrack: trackId=${e.trackId}`,this.callbacks)})}clearPeerConnections(){return c(this,null,function*(){var e,t;clearTimeout(this.publishDtlsStateTimer),this.publishDtlsStateTimer=0,clearTimeout(this.publishDisconnectTimer),this.publishDisconnectTimer=0,this.lastPublishDtlsState=\"new\",(e=this.publishConnection)==null||e.close(),(t=this.subscribeConnection)==null||t.close(),this.publishConnection=null,this.subscribeConnection=null})}waitForLocalRoleAvailability(){if(!this.store.hasRoleDetailsArrived())return new Promise(e=>{this.eventBus.policyChange.subscribeOnce(()=>e())})}createConnectionsAndNegotiateJoin(e,t=!1){return c(this,null,function*(){let i=this.doesLocalPeerNeedWebRTC();i&&this.createPeerConnections(),this.analyticsTimer.start(\"join_response_time\"),yield this.negotiateJoinWithRetry({name:e.name,data:e.metaData,autoSubscribeVideo:t,isWebRTC:i}),this.analyticsTimer.end(\"join_response_time\")})}createPeerConnections(){var t,i,r;let e=(s,o,n=!1)=>{([\"disconnected\",\"failed\"].includes(o)?l.w.bind(l):l.d.bind(l))(I,`${ht[s]} ${n?\"ice\":\"\"} connection state change: ${o}`)};if(this.initConfig){let s={onRenegotiationNeeded:()=>c(this,null,function*(){yield this.performPublishRenegotiation()}),onDTLSTransportStateChange:n=>{var p,h,T;if((n===\"failed\"?l.w.bind(l):l.d.bind(l))(I,`Publisher on dtls transport state change: ${n}`),!n||this.lastPublishDtlsState===n||(this.lastPublishDtlsState=n,this.publishDtlsStateTimer!==0&&(clearTimeout(this.publishDtlsStateTimer),this.publishDtlsStateTimer=0),n!==\"connecting\"&&n!==\"failed\"))return;let u=(T=(h=(p=this.initConfig)==null?void 0:p.config)==null?void 0:h.dtlsStateTimeouts)==null?void 0:T[n];!u||u<=0||(this.publishDtlsStateTimer=window.setTimeout(()=>{var f;let g=(f=this.publishConnection)==null?void 0:f.nativeConnection.connectionState;if(g&&n&&g===n){let E=S.WebrtcErrors.ICEFailure(\"PUBLISH\",`DTLS transport state ${n} timeout:${u}ms`,!0);this.eventBus.analytics.publish(y.disconnect(E)),this.observer.onFailure(E)}},u))},onDTLSTransportError:n=>{l.e(I,`onDTLSTransportError ${n.name} ${n.message}`,n),this.eventBus.analytics.publish(y.disconnect(n))},onIceConnectionChange:n=>c(this,null,function*(){e(0,n,!0)}),onConnectionStateChange:n=>c(this,null,function*(){var d,u,p,h,T,g,f,E;e(0,n,!1),n!==\"new\"&&(n===\"connected\"?((d=this.connectivityListener)==null||d.onICESuccess(!0),(u=this.publishConnection)==null||u.handleSelectedIceCandidatePairs()):n===\"failed\"?yield this.handleIceConnectionFailure(0,S.WebrtcErrors.ICEFailure(\"PUBLISH\",`local candidate - ${(T=(h=(p=this.publishConnection)==null?void 0:p.selectedCandidatePair)==null?void 0:h.local)==null?void 0:T.candidate}; remote candidate - ${(E=(f=(g=this.publishConnection)==null?void 0:g.selectedCandidatePair)==null?void 0:f.remote)==null?void 0:E.candidate}`)):this.publishDisconnectTimer=window.setTimeout(()=>{var v,R,$,ue,ge,pe,St;((v=this.publishConnection)==null?void 0:v.connectionState)!==\"connected\"&&this.handleIceConnectionFailure(0,S.WebrtcErrors.ICEDisconnected(\"PUBLISH\",`local candidate - ${(ue=($=(R=this.publishConnection)==null?void 0:R.selectedCandidatePair)==null?void 0:$.local)==null?void 0:ue.candidate}; remote candidate - ${(St=(pe=(ge=this.publishConnection)==null?void 0:ge.selectedCandidatePair)==null?void 0:pe.remote)==null?void 0:St.candidate}`))},5e3))}),onIceCandidate:n=>{var d;(d=this.connectivityListener)==null||d.onICECandidate(n,!0)},onSelectedCandidatePairChange:n=>{var d;(d=this.connectivityListener)==null||d.onSelectedICECandidatePairChange(n,!0)}},o={onApiChannelMessage:n=>{this.observer.onNotification(JSON.parse(n))},onTrackAdd:n=>{l.d(I,\"[Subscribe] onTrackAdd\",`${n}`),this.observer.onTrackAdd(n)},onTrackRemove:n=>{l.d(I,\"[Subscribe] onTrackRemove\",`${n}`),this.observer.onTrackRemove(n)},onIceConnectionChange:n=>c(this,null,function*(){var d;if(e(1,n,!0),n===\"connected\"){let u=this.callbacks.get(st);this.callbacks.delete(st),(d=this.connectivityListener)==null||d.onICESuccess(!1),u&&u.promise.resolve(!0)}}),onConnectionStateChange:n=>c(this,null,function*(){var d,u,p,h,T,g,f;if(e(1,n,!1),n===\"failed\")yield this.handleIceConnectionFailure(1,S.WebrtcErrors.ICEFailure(\"SUBSCRIBE\",`local candidate - ${(p=(u=(d=this.subscribeConnection)==null?void 0:d.selectedCandidatePair)==null?void 0:u.local)==null?void 0:p.candidate}; remote candidate - ${(g=(T=(h=this.subscribeConnection)==null?void 0:h.selectedCandidatePair)==null?void 0:T.remote)==null?void 0:g.candidate}`));else if(n===\"disconnected\")setTimeout(()=>{var E,v,R,$,ue,ge,pe;((E=this.subscribeConnection)==null?void 0:E.connectionState)===\"disconnected\"&&this.handleIceConnectionFailure(1,S.WebrtcErrors.ICEDisconnected(\"SUBSCRIBE\",`local candidate - ${($=(R=(v=this.subscribeConnection)==null?void 0:v.selectedCandidatePair)==null?void 0:R.local)==null?void 0:$.candidate}; remote candidate - ${(pe=(ge=(ue=this.subscribeConnection)==null?void 0:ue.selectedCandidatePair)==null?void 0:ge.remote)==null?void 0:pe.candidate}`))},5e3);else if(n===\"connected\"){(f=this.subscribeConnection)==null||f.handleSelectedIceCandidatePairs();let E=this.callbacks.get(st);this.callbacks.delete(st),E&&E.promise.resolve(!0)}}),onIceCandidate:n=>{var d;(d=this.connectivityListener)==null||d.onICECandidate(n,!1)},onSelectedCandidatePairChange:n=>{var d;(d=this.connectivityListener)==null||d.onSelectedICECandidatePairChange(n,!1)}};this.publishConnection||(this.publishConnection=new Xt(this.signal,this.initConfig.rtcConfiguration,s)),this.subscribeConnection||(this.subscribeConnection=new ei(this.signal,this.initConfig.rtcConfiguration,this.isFlagEnabled.bind(this),o))}(r=this.webrtcInternals)==null||r.setPeerConnections({publish:(t=this.publishConnection)==null?void 0:t.nativeConnection,subscribe:(i=this.subscribeConnection)==null?void 0:i.nativeConnection})}negotiateJoinWithRetry(s){return c(this,arguments,function*({name:e,data:t,autoSubscribeVideo:i,isWebRTC:r=!0}){try{yield this.negotiateJoin({name:e,data:t,autoSubscribeVideo:i,isWebRTC:r})}catch(o){l.e(I,\"Join negotiation failed \\u274C\",o);let n=o instanceof k?o:S.WebsocketMethodErrors.ServerErrors(500,\"JOIN\",`Websocket join error - ${o.message}`),d=parseInt(`${n.code/100}`)===5||[P.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST,429].includes(n.code);if(n.code===410&&(n.isTerminal=!0),d){this.joinRetryCount=0,n.isTerminal=!1;let u=()=>c(this,null,function*(){return this.joinRetryCount++,yield this.negotiateJoin({name:e,data:t,autoSubscribeVideo:i,isWebRTC:r})});yield this.retryScheduler.schedule({category:2,error:n,task:u,originalState:\"Joined\",changeState:!1})}else throw o}})}negotiateJoin(s){return c(this,arguments,function*({name:e,data:t,autoSubscribeVideo:i,isWebRTC:r=!0}){return r?yield this.negotiateJoinWebRTC({name:e,data:t,autoSubscribeVideo:i}):yield this.negotiateJoinNonWebRTC({name:e,data:t,autoSubscribeVideo:i})})}negotiateJoinWebRTC(r){return c(this,arguments,function*({name:e,data:t,autoSubscribeVideo:i}){if(l.d(I,\"\\u23F3 join: Negotiating over PUBLISH connection\"),!this.publishConnection)return l.e(I,\"Publish peer connection not found, cannot negotiate\"),!1;let s=yield this.publishConnection.createOffer();yield this.publishConnection.setLocalDescription(s);let o=this.isFlagEnabled(\"subscribeDegradation\"),n=this.isFlagEnabled(\"simulcast\"),d=this.isFlagEnabled(\"onDemandTracks\"),u=yield this.signal.join(e,t,!i,o,n,d,s);this.setSFUNodeId(u==null?void 0:u.sfu_node_id),yield this.publishConnection.setRemoteDescription(u);for(let p of this.publishConnection.candidates)yield this.publishConnection.addIceCandidate(p);return this.publishConnection.initAfterJoin(),!!u})}negotiateJoinNonWebRTC(r){return c(this,arguments,function*({name:e,data:t,autoSubscribeVideo:i}){l.d(I,\"\\u23F3 join: Negotiating Non-WebRTC\");let s=this.isFlagEnabled(\"subscribeDegradation\"),o=this.isFlagEnabled(\"simulcast\"),n=this.isFlagEnabled(\"onDemandTracks\"),d=yield this.signal.join(e,t,!i,s,o,n);return this.setSFUNodeId(d==null?void 0:d.sfu_node_id),!!d})}negotiateOnFirstPublish(){return c(this,null,function*(){if(l.d(I,\"\\u23F3 Negotiating offer over PUBLISH connection\"),!this.publishConnection)return l.e(I,\"Publish peer connection not found, cannot negotiate\"),!1;try{let e=yield this.publishConnection.createOffer(this.trackStates);yield this.publishConnection.setLocalDescription(e);let t=yield this.signal.offer(e,this.trackStates);yield this.publishConnection.setRemoteDescription(t);for(let i of this.publishConnection.candidates)yield this.publishConnection.addIceCandidate(i);return this.publishConnection.initAfterJoin(),!!t}catch(e){if(e instanceof k&&e.code===421)return!0;throw e}})}performPublishRenegotiation(e){return c(this,null,function*(){l.d(I,\"\\u23F3 [role=PUBLISH] onRenegotiationNeeded START\",this.trackStates);let t=this.callbacks.get(rt);if(!t){l.w(I,\"no callback found for renegotiation\");return}if(!this.publishConnection){l.e(I,\"Publish peer connection not found, cannot renegotiate\");return}try{let i=yield this.publishConnection.createOffer(this.trackStates,e);yield this.publishConnection.setLocalDescription(i),l.time(\"renegotiation-offer-exchange\");let r=yield this.signal.offer(i,this.trackStates);this.callbacks.delete(rt),l.timeEnd(\"renegotiation-offer-exchange\"),yield this.publishConnection.setRemoteDescription(r),t.promise.resolve(!0),l.d(I,\"[role=PUBLISH] onRenegotiationNeeded DONE \\u2705\")}catch(i){let r;i instanceof k?r=i:r=S.GenericErrors.Unknown(\"PUBLISH\",i.message),r.code===421?t.promise.resolve(!0):t.promise.reject(r),l.d(I,\"[role=PUBLISH] onRenegotiationNeeded FAILED \\u274C\")}})}handleIceConnectionFailure(e,t){return c(this,null,function*(){this.retryScheduler.isTaskInProgress( false?0:4)||(e===0?this.retryScheduler.schedule({category:3,error:t,task:this.retryPublishIceFailedTask,originalState:\"Joined\"}):this.retryScheduler.schedule({category:4,error:t,task:this.retrySubscribeIceFailedTask,originalState:\"Joined\"}))})}internalConnect(e,t,i,r){return c(this,null,function*(){var o,n,d;l.d(I,\"connect: started \\u23F0\");let s=new Date;try{this.analyticsTimer.start(\"init_response_time\"),this.initConfig=yield ti.fetchInitConfig({token:e,peerId:i,userAgent:this.store.getUserAgent(),initEndpoint:t,iceServers:r}),(o=this.connectivityListener)==null||o.onInitSuccess(this.initConfig.endpoint);let u=this.store.getRoom();return u&&(u.effectsKey=(n=this.initConfig.config.vb)==null?void 0:n.effectsKey,u.isEffectsEnabled=this.isFlagEnabled(\"effectsSDKEnabled\"),u.disableNoneLayerRequest=this.isFlagEnabled(\"disableNoneLayerRequest\"),u.isVBEnabled=this.isFlagEnabled(\"vb\"),u.isHipaaEnabled=this.isFlagEnabled(\"hipaa\"),u.isNoiseCancellationEnabled=this.isFlagEnabled(\"noiseCancellation\")),this.analyticsTimer.end(\"init_response_time\"),He.setWebsocketEndpoint(this.initConfig.endpoint),this.validateNotDisconnected(\"post init\"),yield this.openSignal(e,i),this.observer.onConnected(),(d=this.connectivityListener)==null||d.onSignallingSuccess(),this.store.setSimulcastEnabled(this.isFlagEnabled(\"simulcast\")),l.d(I,\"Adding Analytics Transport: JsonRpcSignal\"),this.analyticsEventsService.setTransport(this.analyticsSignalTransport),this.analyticsEventsService.flush(),this.initConfig}catch(u){throw this.state!==\"Reconnecting\"&&this.eventBus.analytics.publish(y.connect(u,this.getAdditionalAnalyticsProperties(),s,new Date,t)),l.e(I,\"\\u274C internal connect: failed\",u),u}})}validateNotDisconnected(e){if(this.state===\"Disconnected\")throw l.w(I,\"aborting join as transport state is disconnected\"),S.GenericErrors.ValidationFailed(`leave called before join could complete - stage=${e}`)}openSignal(e,t){return c(this,null,function*(){if(!this.initConfig)throw S.APIErrors.InitConfigNotAvailable(\"INIT\",\"Init Config not found\");l.d(I,\"\\u23F3 internal connect: connecting to ws endpoint\",this.initConfig.endpoint);let i=new URL(this.initConfig.endpoint);i.searchParams.set(\"peer\",t),i.searchParams.set(\"token\",e),i.searchParams.set(\"user_agent_v2\",this.store.getUserAgent()),i.searchParams.set(\"protocol_version\",ia),i.searchParams.set(\"protocol_spec\",ra),this.endpoint=i.toString(),this.analyticsTimer.start(\"ws_connect_time\"),yield this.signal.open(this.endpoint),this.analyticsTimer.end(\"ws_connect_time\"),this.analyticsTimer.start(\"on_policy_change_time\"),this.analyticsTimer.start(\"room_state_time\"),l.d(I,\"\\u2705 internal connect: connected to ws endpoint\")})}initStatsAnalytics(){var e,t;this.isFlagEnabled(\"publishStats\")&&(this.publishStatsAnalytics=new Qt(this.store,this.eventBus,this.getValueFromInitConfig(\"publishStats\",\"maxSampleWindowSize\",30),this.getValueFromInitConfig(\"publishStats\",\"maxSamplePushInterval\",300)),(e=this.getWebrtcInternals())==null||e.start()),this.isFlagEnabled(\"subscribeStats\")&&(this.subscribeStatsAnalytics=new zt(this.store,this.eventBus,this.getValueFromInitConfig(\"subscribeStats\",\"maxSampleWindowSize\",10),this.getValueFromInitConfig(\"subscribeStats\",\"maxSamplePushInterval\",60)),(t=this.getWebrtcInternals())==null||t.start())}getValueFromInitConfig(e,t,i){var r,s;return((s=(r=this.initConfig)==null?void 0:r.config[e])==null?void 0:s[t])||i}doesRoleNeedWebRTC(e){var r,s;if(!this.isFlagEnabled(\"nonWebRTCDisableOffer\"))return!0;let t=!!(e.publishParams.allowed&&((r=e.publishParams.allowed)==null?void 0:r.length)>0),i=!!(e.subscribeParams.subscribeToRoles&&((s=e.subscribeParams.subscribeToRoles)==null?void 0:s.length)>0);return t||i}doesLocalPeerNeedWebRTC(){var t;let e=(t=this.store.getLocalPeer())==null?void 0:t.role;return e?this.doesRoleNeedWebRTC(e):!0}setTransportStateForConnect(){if(this.state===\"Failed\"&&(this.state=\"Disconnected\"),this.state!==\"Disconnected\"&&this.state!==\"Reconnecting\")throw S.WebsocketMethodErrors.AlreadyJoined(\"JOIN\",`Cannot join a meeting in ${this.state} state`);this.state===\"Disconnected\"&&(this.state=\"Connecting\",this.observer.onStateChange(this.state))}sendErrorAnalyticsEvent(e,t){let i=this.getAdditionalAnalyticsProperties(),r;switch(t){case 0:r=y.connect(e,i);break;case 1:r=y.disconnect(e,i);break;case 2:r=y.join({error:e,time:this.analyticsTimer.getTimeTaken(\"join_time\"),init_response_time:this.analyticsTimer.getTimeTaken(\"init_response_time\"),ws_connect_time:this.analyticsTimer.getTimeTaken(\"ws_connect_time\"),on_policy_change_time:this.analyticsTimer.getTimeTaken(\"on_policy_change_time\"),local_audio_track_time:this.analyticsTimer.getTimeTaken(\"local_audio_track_time\"),local_video_track_time:this.analyticsTimer.getTimeTaken(\"local_video_track_time\"),retries_join:this.joinRetryCount});break;case 3:r=y.publish({error:e});break;case 4:r=y.subscribeFail(e);break}this.eventBus.analytics.publish(r)}getSubscribeConnection(){return this.subscribeConnection}getAdditionalAnalyticsProperties(){var o,n,d,u,p,h,T,g;let e=to(),t=typeof document!=\"undefined\"&&document.hidden,i=this.store.getRemoteVideoTracks().filter(f=>f.degraded).length,r=(u=(d=(n=(o=this.getWebrtcInternals())==null?void 0:o.getCurrentStats())==null?void 0:n.getLocalPeerStats())==null?void 0:d.publish)==null?void 0:u.bitrate,s=(g=(T=(h=(p=this.getWebrtcInternals())==null?void 0:p.getCurrentStats())==null?void 0:h.getLocalPeerStats())==null?void 0:T.subscribe)==null?void 0:g.bitrate;return{network_info:e,document_hidden:t,num_degraded_tracks:i,bitrate:{publish:r,subscribe:s},max_sub_bitrate:this.maxSubscribeBitrate,recent_pong_response_times:this.signal.getPongResponseTimes(),transport_state:this.state}}};function Mr(a){if(!a||a.length===0)throw S.APIErrors.InvalidTokenFormat(\"INIT\",\"Token cannot be an empty string or undefined or null\");let e=a.split(\".\");if(e.length!==3)throw S.APIErrors.InvalidTokenFormat(\"INIT\",\"Expected 3 '.' separate fields - header, payload and signature respectively\");let t=atob(e[1]);try{let i=JSON.parse(t);return{roomId:i.room_id,userId:i.user_id,role:i.role}}catch(i){throw S.APIErrors.InvalidTokenFormat(\"INIT\",`couldn't parse to json - ${i.message}`)}}var ro={published:!1,isInitialised:!1,isReconnecting:!1,isPreviewInProgress:!1,isPreviewCalled:!1,isJoinInProgress:!1,deviceManagersInitialised:!1},yr=class{constructor(){this.TAG=\"[HMSSdk]:\";this.transportState=\"Disconnected\";this.analyticsTimer=new Ti;this.sdkState=m({},ro);this.isDiagnostics=!1;this.playlistSettings={video:{bitrate:$r},audio:{bitrate:Kr}};this.handleAutoplayError=e=>{var t,i;(i=(t=this.errorListener)==null?void 0:t.onError)==null||i.call(t,e)};this.observer={onNotification:e=>{var t;if(e.method===\"on-peer-leave-request\"){this.handlePeerLeaveRequest(e.params);return}switch(e.method){case\"on-policy-change\":this.analyticsTimer.end(\"on_policy_change_time\");break;case\"peer-list\":this.analyticsTimer.end(\"peer_list_time\"),this.sendJoinAnalyticsEvent(this.sdkState.isPreviewCalled);break;case\"room-state\":this.analyticsTimer.end(\"room_state_time\");break;default:}(t=this.notificationManager)==null||t.handleNotification(e,this.sdkState.isReconnecting)},onConnected:()=>{this.initNotificationManager()},onTrackAdd:e=>{var t;(t=this.notificationManager)==null||t.handleTrackAdd(e)},onTrackRemove:e=>{var t;(t=this.notificationManager)==null||t.handleTrackRemove(e)},onFailure:e=>{var t;(t=this.errorListener)==null||t.onError(e)},onStateChange:(e,t)=>c(this,null,function*(){var r,s;let i=o=>c(this,null,function*(){var n,d;yield this.internalLeave(!0,o),!this.sdkState.isPreviewInProgress&&!this.sdkState.isJoinInProgress&&((d=(n=this.errorListener)==null?void 0:n.onError)==null||d.call(n,o)),this.sdkState.isReconnecting=!1});switch(e){case\"Preview\":case\"Joined\":this.initNotificationManager(),this.transportState===\"Reconnecting\"&&((r=this.listener)==null||r.onReconnected());break;case\"Failed\":yield i(t);break;case\"Reconnecting\":this.sdkState.isReconnecting=!0,(s=this.listener)==null||s.onReconnecting(t);break}this.transportState=e,l.d(this.TAG,\"Transport State Change\",this.transportState)})};this.handlePeerLeaveRequest=e=>{var r;let t=e.requested_by?this.store.getPeerById(e.requested_by):void 0,i={roomEnded:e.room_end,reason:e.reason,requestedBy:t};(r=this.listener)==null||r.onRemovedFromRoom(i),this.internalLeave(!1)};this.handlePreviewError=e=>{var t;this.analyticsTimer.end(\"preview_time\"),e&&((t=this.errorListener)==null||t.onError(e)),this.sendPreviewAnalyticsEvent(e),this.sdkState.isPreviewInProgress=!1};this.handleDeviceChange=e=>{var i,r;if(e.isUserSelection)return;l.d(this.TAG,\"Device Change event\",e),(r=(i=this.deviceChangeListener)==null?void 0:i.onDeviceChange)==null||r.call(i,e),(()=>{var s,o,n,d;if(e.error&&e.type){let u=e.type.includes(\"audio\")?(s=this.localPeer)==null?void 0:s.audioTrack:(o=this.localPeer)==null?void 0:o.videoTrack;(n=this.errorListener)==null||n.onError(e.error),[P.TracksErrors.CANT_ACCESS_CAPTURE_DEVICE,P.TracksErrors.DEVICE_IN_USE,P.TracksErrors.DEVICE_NOT_AVAILABLE].includes(e.error.code)&&u&&(u.setEnabled(!1),(d=this.listener)==null||d.onTrackUpdate(2,u,this.localPeer))}})()};this.handleAudioPluginError=e=>{var t;l.e(this.TAG,\"Audio Plugin Error event\",e),(t=this.errorListener)==null||t.onError(e)};this.handleError=e=>{var t;l.e(this.TAG,e),(t=this.errorListener)==null||t.onError(e)};this.handleLocalRoleUpdate=i=>c(this,[i],function*({oldRole:e,newRole:t}){var r;this.deviceManager.currentSelection=this.deviceManager.getCurrentSelection(),yield this.transport.handleLocalRoleUpdate({oldRole:e,newRole:t}),yield(r=this.roleChangeManager)==null?void 0:r.handleLocalPeerRoleUpdate({oldRole:e,newRole:t}),yield this.interactivityCenter.whiteboard.handleLocalRoleUpdate()});this.unpauseRemoteVideoTracks=()=>{this.store.getRemoteVideoTracks().forEach(e=>e.handleTrackUnmute())};this.sendAudioPresenceFailed=()=>{var t;let e=S.TracksErrors.NoAudioDetected(\"PREVIEW\");l.w(this.TAG,\"Audio Presence Failure\",this.transportState,e),this.isDiagnostics&&((t=this.listener)==null||t.onError(e))};this.sendJoinAnalyticsEvent=(e=!1,t)=>{this.eventBus.analytics.publish(y.join(M(m({error:t},this.analyticsTimer.getTimes()),{time:this.analyticsTimer.getTimeTaken(\"join_time\"),is_preview_called:e,retries_join:this.transport.joinRetryCount})))};this.sendPreviewAnalyticsEvent=e=>{this.eventBus.analytics.publish(y.preview(M(m({error:e},this.analyticsTimer.getTimes()),{time:this.analyticsTimer.getTimeTaken(\"preview_time\")})))};this.sendAnalyticsEvent=e=>{this.isDiagnostics||this.analyticsEventsService.queue(e).flush()}}setSessionPeerInfo(e,t){var r,s,o,n;let i=this.store.getRoom();if(!t||!i){l.e(this.TAG,\"setSessionPeerInfo> Local peer or room is undefined\");return}this.sessionPeerInfo={peer:{peer_id:t.peerId,role:(r=t.role)==null?void 0:r.name,joined_at:((s=t.joinedAt)==null?void 0:s.valueOf())||0,room_name:i.name,session_started_at:((o=i.startedAt)==null?void 0:o.valueOf())||0,user_data:t.customerUserId,user_name:t.name,template_id:i.templateId,session_id:i.sessionId,token:(n=this.store.getConfig())==null?void 0:n.authToken},agent:this.store.getUserAgent(),device_id:li(),cluster:{websocket_url:e},timestamp:Date.now()}}initNotificationManager(){this.notificationManager||(this.notificationManager=new nr(this.store,this.eventBus,this.transport,this.listener,this.audioListener))}initStoreAndManagers(e){var t,i;if(this.listener=e,this.errorListener=e,this.deviceChangeListener=e,(t=this.store)==null||t.setErrorListener(this.errorListener),this.sdkState.isInitialised){(i=this.notificationManager)==null||i.setListener(this.listener),this.audioSinkManager.setListener(this.listener),this.interactivityCenter.setListener(this.listener),this.transport.setListener(this.listener);return}this.sdkState.isInitialised=!0,this.store=new Ft,this.store.setErrorListener(this.errorListener),this.eventBus=new Kt,this.pluginUsageTracker=new Ki(this.eventBus),this.wakeLockManager=new Wi,this.networkTestManager=new Gi(this.eventBus,this.listener),this.playlistManager=new Lt(this,this.eventBus),this.deviceManager=new Wt(this.store,this.eventBus),this.audioSinkManager=new Gt(this.store,this.deviceManager,this.eventBus),this.audioOutput=new qi(this.deviceManager,this.audioSinkManager),this.audioSinkManager.setListener(this.listener),this.eventBus.autoplayError.subscribe(this.handleAutoplayError),this.localTrackManager=new be(this.store,this.observer,this.deviceManager,this.eventBus,this.analyticsTimer),this.analyticsEventsService=new $i(this.store),this.transport=new ri(this.observer,this.deviceManager,this.store,this.eventBus,this.analyticsEventsService,this.analyticsTimer,this.pluginUsageTracker),\"onInitSuccess\"in e&&this.transport.setConnectivityListener(e),this.sessionStore=new cr(this.transport),this.interactivityCenter=new jt(this.transport,this.store,this.listener),this.eventBus.analytics.subscribe(this.sendAnalyticsEvent),this.eventBus.deviceChange.subscribe(this.handleDeviceChange),this.eventBus.localVideoUnmutedNatively.subscribe(this.unpauseRemoteVideoTracks),this.eventBus.localAudioUnmutedNatively.subscribe(this.unpauseRemoteVideoTracks),this.eventBus.audioPluginFailed.subscribe(this.handleAudioPluginError),this.eventBus.error.subscribe(this.handleError)}validateJoined(e){if(!this.localPeer)throw S.GenericErrors.NotConnected(\"VALIDATION\",`Not connected - ${e}`)}sendHLSAnalytics(e){this.sendAnalyticsEvent(y.hlsPlayerError(e))}refreshDevices(){return c(this,null,function*(){this.validateJoined(\"refreshDevices\"),yield this.deviceManager.init(!0)})}getWebrtcInternals(){var e;return(e=this.transport)==null?void 0:e.getWebrtcInternals()}getDebugInfo(){var r;if(!this.transport)throw l.e(this.TAG,\"Transport is not defined\"),new Error(\"getDebugInfo can only be called after join\");let e=this.transport.getWebsocketEndpoint(),t=Object.values(ns).filter(s=>this.transport.isFlagEnabled(s)),i=(r=this.store.getConfig())==null?void 0:r.initEndpoint;return{websocketURL:e,enabledFlags:t,initEndpoint:i}}getSessionStore(){return this.sessionStore}getPlaylistManager(){return this.playlistManager}getRecordingState(){var e;return(e=this.store.getRoom())==null?void 0:e.recording}getRTMPState(){var e;return(e=this.store.getRoom())==null?void 0:e.rtmp}getHLSState(){var e;return(e=this.store.getRoom())==null?void 0:e.hls}getTranscriptionState(){var e;return(e=this.store.getRoom())==null?void 0:e.transcriptions}getTemplateAppData(){return this.store.getTemplateAppData()}getInteractivityCenter(){return this.interactivityCenter}getPeerListIterator(e){return new ki(this.transport,this.store,e)}updatePlaylistSettings(e){e.video&&Object.assign(this.playlistSettings.video,e.video),e.audio&&Object.assign(this.playlistSettings.audio,e.audio)}get localPeer(){var e;return(e=this.store)==null?void 0:e.getLocalPeer()}preview(e,t){return c(this,null,function*(){if(kt(),yt(),this.sdkState.isPreviewInProgress)return Promise.reject(S.GenericErrors.PreviewAlreadyInProgress(\"PREVIEW\",\"Preview already called\"));if([\"Joined\",\"Reconnecting\"].includes(this.transportState))return this.midCallPreview(e.asRole,e.settings);this.analyticsTimer.start(\"preview_time\"),this.setUpPreview(e,t);let i=!1,r=!1,s=setTimeout(()=>{var o,n;(!i||!r)&&((n=(o=this.listener)==null?void 0:o.onNetworkQuality)==null||n.call(o,-1))},3e3);return new Promise((o,n)=>{let d=()=>c(this,null,function*(){var h;if(this.localPeer){let T=e.asRole&&this.store.getPolicyForRole(e.asRole);this.localPeer.asRole=T||this.localPeer.role}let u=yield this.localTrackManager.getTracksToPublish(e.settings);u.forEach(T=>{var g;if(this.setLocalPeerTrack(T),T.isTrackNotPublishing()){let f=S.TracksErrors.NoDataInTrack(`${T.type} track has no data. muted: ${T.nativeTrack.muted}, readyState: ${T.nativeTrack.readyState}`);l.e(this.TAG,f),this.sendAnalyticsEvent(y.publish({devices:this.deviceManager.getDevices(),error:f})),(g=this.listener)==null||g.onError(f)}}),(h=this.localPeer)!=null&&h.audioTrack&&this.initPreviewTrackAudioLevelMonitor(),yield this.initDeviceManagers(),this.sdkState.isPreviewInProgress=!1,this.analyticsTimer.end(\"preview_time\");let p=this.store.getRoom();p&&t.onPreview(p,u),this.sendPreviewAnalyticsEvent(),o()});this.eventBus.policyChange.subscribeOnce(d),this.eventBus.leave.subscribeOnce(this.handlePreviewError),this.eventBus.leave.subscribeOnce(u=>n(u)),this.transport.preview(e.authToken,e.initEndpoint,this.localPeer.peerId,{name:e.userName,metaData:e.metaData||\"\"},e.autoVideoSubscribe,e.iceServers).then(u=>{var p;i=!0,clearTimeout(s),u&&e.captureNetworkQualityInPreview&&this.networkTestManager.start((p=u.config)==null?void 0:p.networkHealth).then(()=>{r=!0})}).catch(u=>{this.handlePreviewError(u),n(u)})})})}midCallPreview(e,t){return c(this,null,function*(){var s,o;if(!this.localPeer||this.transportState!==\"Joined\")throw S.GenericErrors.NotConnected(\"VALIDATION\",\"Not connected - midCallPreview\");let i=e&&this.store.getPolicyForRole(e);if(!i)throw S.GenericErrors.InvalidRole(\"PREVIEW\",`role ${e} does not exist in policy`);this.localPeer.asRole=i;let r=yield this.localTrackManager.getTracksToPublish(t);r.forEach(n=>this.setLocalPeerTrack(n)),(s=this.localPeer)!=null&&s.audioTrack&&this.initPreviewTrackAudioLevelMonitor(),yield this.initDeviceManagers(),(o=this.listener)==null||o.onPreview(this.store.getRoom(),r)})}cancelMidCallPreview(){return c(this,null,function*(){var e,t,i;if((!this.localPeer||!this.localPeer.isInPreview())&&l.w(this.TAG,\"Cannot cancel mid call preview as preview is not in progress\"),(e=this.localPeer)!=null&&e.asRole&&this.localPeer.role){let r=this.localPeer.asRole,s=this.localPeer.role;delete this.localPeer.asRole,yield(t=this.roleChangeManager)==null?void 0:t.diffRolesAndPublishTracks({oldRole:r,newRole:s}),(i=this.listener)==null||i.onPeerUpdate(8,this.localPeer)}})}join(e,t){return c(this,null,function*(){var d,u,p,h,T,g,f,E;if(kt(),yt(),this.sdkState.isPreviewInProgress)throw S.GenericErrors.NotReady(\"JOIN\",\"Preview is in progress, can't join\");(u=(d=this.eventBus)==null?void 0:d.leave)==null||u.unsubscribe(this.handlePreviewError),this.analyticsTimer.start(\"join_time\"),this.sdkState.isJoinInProgress=!0;let{roomId:i,userId:r,role:s}=Mr(e.authToken),o=((h=(p=this.localPeer)==null?void 0:p.asRole)==null?void 0:h.name)||((g=(T=this.localPeer)==null?void 0:T.role)==null?void 0:g.name);(f=this.networkTestManager)==null||f.stop(),this.commonSetup(e,i,t),this.removeDevicesFromConfig(e),this.store.setConfig(e),this.store.createAndSetUserAgent(this.frameworkInfo),ce.resumeContext();let n=this.store.getConfig();n!=null&&n.autoManageWakeLock&&this.wakeLockManager.acquireLock(),this.localPeer?(this.localPeer.name=e.userName,this.localPeer.role=this.store.getPolicyForRole(s),this.localPeer.customerUserId=r,this.localPeer.metadata=e.metaData,delete this.localPeer.asRole):this.createAndAddLocalPeerToStore(e,s,r),this.roleChangeManager=new Bt(this.store,this.transport,this.deviceManager,this.getAndPublishTracks.bind(this),this.removeTrack.bind(this),this.listener),this.eventBus.localRoleUpdate.subscribe(this.handleLocalRoleUpdate),l.d(this.TAG,`\\u23F3 Joining room ${i}`),l.time(`join-room-${i}`);try{yield this.transport.join(e.authToken,this.localPeer.peerId,{name:e.userName,metaData:e.metaData},e.initEndpoint,e.autoVideoSubscribe,e.iceServers),l.d(this.TAG,`\\u2705 Joined room ${i}`),this.analyticsTimer.start(\"peer_list_time\"),yield this.notifyJoin(),this.sdkState.isJoinInProgress=!1,yield this.publish(e.settings,o)}catch(v){throw this.analyticsTimer.end(\"join_time\"),this.sdkState.isJoinInProgress=!1,(E=this.listener)==null||E.onError(v),this.sendJoinAnalyticsEvent(this.sdkState.isPreviewCalled,v),l.e(this.TAG,\"Unable to join room\",v),v}l.timeEnd(`join-room-${i}`)})}stringifyMetadata(e){e.metaData&&typeof e.metaData!=\"string\"?e.metaData=JSON.stringify(e.metaData):e.metaData||(e.metaData=\"\")}cleanup(){var e,t,i;this.cleanDeviceManagers(),this.eventBus.analytics.unsubscribe(this.sendAnalyticsEvent),this.eventBus.localVideoUnmutedNatively.unsubscribe(this.unpauseRemoteVideoTracks),this.eventBus.localAudioUnmutedNatively.unsubscribe(this.unpauseRemoteVideoTracks),this.eventBus.error.unsubscribe(this.handleError),this.analyticsTimer.cleanup(),X.cleanup(),this.playlistManager.cleanup(),(e=this.wakeLockManager)==null||e.cleanup(),be.cleanup(),this.notificationManager=void 0,l.cleanup(),this.sdkState=m({},ro),this.localPeer&&((t=this.localPeer.audioTrack)==null||t.cleanup(),this.localPeer.audioTrack=void 0,(i=this.localPeer.videoTrack)==null||i.cleanup(),this.localPeer.videoTrack=void 0),this.store.cleanup(),this.listener=void 0,this.roleChangeManager&&this.eventBus.localRoleUpdate.unsubscribe(this.handleLocalRoleUpdate)}leave(e){return this.internalLeave(e)}internalLeave(e=!0,t){return c(this,null,function*(){var r,s,o,n;let i=(r=this.store)==null?void 0:r.getRoom();if(i){for(;(this.sdkState.isPreviewInProgress||this.sdkState.isJoinInProgress)&&!(t!=null&&t.isTerminal);)yield Oe(100);let d=i.id;this.setSessionPeerInfo(this.transport.getWebsocketEndpoint()||\"\",this.localPeer),(s=this.networkTestManager)==null||s.stop(),this.eventBus.leave.publish(t);let u=(o=this.localPeer)==null?void 0:o.peerId;l.d(this.TAG,`\\u23F3 Leaving room ${d}, peerId=${u}`),yield(n=this.transport)==null?void 0:n.leave(e,t?\"sdk request\":\"user request\"),this.cleanup(),l.d(this.TAG,`\\u2705 Left room ${d}, peerId=${u}`)}})}getAuthTokenByRoomCode(e,t){return c(this,null,function*(){let i=(t||{}).endpoint||\"https://auth.100ms.live/v2/token\";this.analyticsTimer.start(\"GET_TOKEN\");let r=yield Bi(i,{method:\"POST\",body:JSON.stringify({code:e.roomCode,user_id:e.userId})},[429,500,501,502,503,504,505,506,507,508,509,510,511]),s=yield r.json();if(this.analyticsTimer.end(\"GET_TOKEN\"),!r.ok)throw S.APIErrors.ServerErrors(s.code,\"GET_TOKEN\",s.message,!1);let{token:o}=s;if(!o)throw Error(s.message);return o})}getLocalPeer(){return this.store.getLocalPeer()}getPeers(){return this.store.getPeers()}getPeerMap(){return this.store.getPeerMap()}getAudioOutput(){return this.audioOutput}sendMessage(e,t){this.sendMessageInternal({message:t,type:e})}sendBroadcastMessage(e,t){return c(this,null,function*(){return yield this.sendMessageInternal({message:e,type:t})})}sendGroupMessage(e,t,i){return c(this,null,function*(){let r=this.store.getKnownRoles();if((t.filter(o=>r[o.name])||[]).length===0)throw S.GenericErrors.ValidationFailed(\"No valid role is present\",t);return yield this.sendMessageInternal({message:e,recipientRoles:t,type:i})})}sendDirectMessage(e,t,i){return c(this,null,function*(){var o,n;if(((o=this.localPeer)==null?void 0:o.peerId)===t)throw S.GenericErrors.ValidationFailed(\"Cannot send message to self\");let r=!!((n=this.store.getRoom())!=null&&n.large_room_optimization),s=this.store.getPeerById(t);if(!s)if(r){let d=yield this.transport.signal.getPeer({peer_id:t});if(!d)throw S.GenericErrors.ValidationFailed(\"Invalid peer - peer not present in the room\",t);s=ye(d,this.store)}else throw S.GenericErrors.ValidationFailed(\"Invalid peer - peer not present in the room\",t);return yield this.sendMessageInternal({message:e,recipientPeer:s,type:i})})}submitSessionFeedback(e,t){return c(this,null,function*(){if(!this.sessionPeerInfo)throw l.e(this.TAG,\"submitSessionFeedback> session is undefined\"),new Error(\"session is undefined\");let i=this.sessionPeerInfo.peer.token;if(!i)throw l.e(this.TAG,\"submitSessionFeedback> token is undefined\"),new Error(\"Internal error, token is not present\");try{yield $t.sendFeedback({token:i,info:this.sessionPeerInfo,feedback:e,eventEndpoint:t}),l.i(this.TAG,\"submitSessionFeedback> submitted feedback\"),this.sessionPeerInfo=void 0}catch(r){throw l.e(this.TAG,\"submitSessionFeedback> error occured \",r),new Error(\"Unable to submit feedback\")}})}getPeer(e){return c(this,null,function*(){let t=yield this.transport.signal.getPeer({peer_id:e});if(t)return ye(t,this.store)})}findPeerByName(r){return c(this,arguments,function*({query:e,limit:t=10,offset:i}){let{peers:s,offset:o,eof:n}=yield this.transport.signal.findPeerByName({query:e==null?void 0:e.toLowerCase(),limit:t,offset:i});return s.length>0?{offset:o,eof:n,peers:s.map(d=>ye({peer_id:d.peer_id,role:d.role,groups:[],info:{name:d.name,data:\"\",user_id:\"\",type:d.type}},this.store))}:{offset:o,peers:[]}})}sendMessageInternal(s){return c(this,arguments,function*({recipientRoles:e,recipientPeer:t,type:i=\"chat\",message:r}){if(r.replace(/\\u200b/g,\" \").trim()===\"\")throw l.w(this.TAG,\"sendMessage\",\"Ignoring empty message send\"),S.GenericErrors.ValidationFailed(\"Empty message not allowed\");let o={info:{message:r,type:i}};return e!=null&&e.length&&(o.roles=e.map(n=>n.name)),t!=null&&t.peerId&&(o.peer_id=t.peerId),l.d(this.TAG,\"Sending Message: \",o),yield this.transport.signal.broadcast(o)})}startScreenShare(e,t){return c(this,null,function*(){var n,d,u;let i=this.store.getPublishParams();if(!i)return;let{allowed:r}=i;if(!(r&&r.includes(\"screen\"))){l.e(this.TAG,`Role ${(n=this.localPeer)==null?void 0:n.role} cannot share screen`);return}if((u=(d=this.localPeer)==null?void 0:d.auxiliaryTracks)!=null&&u.find(p=>p.source===\"screen\"))throw Error(\"Cannot share multiple screens\");let o=yield this.getScreenshareTracks(e,t);if(!this.localPeer){l.d(this.TAG,\"Screenshared when not connected\"),o.forEach(p=>{p.cleanup()});return}this.transport.setOnScreenshareStop(()=>{this.stopEndedScreenshare(e)}),yield this.transport.publish(o),o.forEach(p=>{var h,T,g;p.peerId=(h=this.localPeer)==null?void 0:h.peerId,(T=this.localPeer)==null||T.auxiliaryTracks.push(p),(g=this.listener)==null||g.onTrackUpdate(0,p,this.localPeer)})})}stopEndedScreenshare(e){return c(this,null,function*(){l.d(this.TAG,\"\\u2705 Screenshare ended natively\"),yield this.stopScreenShare(),e()})}stopScreenShare(){return c(this,null,function*(){var t;l.d(this.TAG,\"\\u2705 Screenshare ended from app\");let e=(t=this.localPeer)==null?void 0:t.auxiliaryTracks.filter(i=>i.source===\"screen\");if(e)for(let i of e)yield this.removeTrack(i.trackId)})}addTrack(e,t=\"regular\"){return c(this,null,function*(){var u,p,h,T;if(!e){l.w(this.TAG,\"Please pass a valid MediaStreamTrack\");return}if(!this.localPeer)throw S.GenericErrors.NotConnected(\"VALIDATION\",\"No local peer present, cannot addTrack\");if(this.localPeer.auxiliaryTracks.find(g=>g.trackId===e.id))return;let r=e.kind,s=new MediaStream([e]),o=new Se(s),n=r===\"audio\"?de:G,d=new n(o,e,t,this.eventBus);yield this.applySettings(d),yield this.setPlaylistSettings({track:e,hmsTrack:d,source:t}),yield(u=this.transport)==null?void 0:u.publish([d]),d.peerId=(p=this.localPeer)==null?void 0:p.peerId,(h=this.localPeer)==null||h.auxiliaryTracks.push(d),(T=this.listener)==null||T.onTrackUpdate(0,d,this.localPeer)})}removeTrack(e,t=!1){return c(this,null,function*(){var r;if(!this.localPeer)throw S.GenericErrors.NotConnected(\"VALIDATION\",\"No local peer present, cannot removeTrack\");let i=this.localPeer.auxiliaryTracks.findIndex(s=>s.trackId===e);if(i>-1){let s=this.localPeer.auxiliaryTracks[i];s.isPublished?yield this.transport.unpublish([s]):yield s.cleanup(),t||this.stopPlaylist(s),this.localPeer.auxiliaryTracks.splice(i,1),(r=this.listener)==null||r.onTrackUpdate(1,s,this.localPeer)}else l.w(this.TAG,`No track found for ${e}`)})}setAnalyticsLevel(e){this.analyticsEventsService.level=e}setLogLevel(e){l.level=e}autoSelectAudioOutput(e){var t;(t=this.deviceManager)==null||t.autoSelectAudioOutput(e)}addAudioListener(e){var t;this.audioListener=e,(t=this.notificationManager)==null||t.setAudioListener(e)}addConnectionQualityListener(e){var t;(t=this.notificationManager)==null||t.setConnectionQualityListener(e)}setIsDiagnostics(e){this.isDiagnostics=e}changeRole(e,t,i=!1){return c(this,null,function*(){var r;yield(r=this.transport)==null?void 0:r.signal.requestRoleChange({requested_for:e,role:t,force:i})})}changeRoleOfPeer(e,t,i=!1){return c(this,null,function*(){var r;yield(r=this.transport)==null?void 0:r.signal.requestRoleChange({requested_for:e,role:t,force:i})})}changeRoleOfPeersWithRoles(e,t){return c(this,null,function*(){var i;e.length<=0||!t||(yield(i=this.transport)==null?void 0:i.signal.requestBulkRoleChange({roles:e.map(r=>r.name),role:t,force:!0}))})}acceptChangeRole(e){return c(this,null,function*(){var t,i;yield(i=this.transport)==null?void 0:i.signal.acceptRoleChangeRequest({requested_by:(t=e.requestedBy)==null?void 0:t.peerId,role:e.role.name,token:e.token})})}endRoom(e,t){return c(this,null,function*(){var i;if(!this.localPeer)throw S.GenericErrors.NotConnected(\"VALIDATION\",\"No local peer present, cannot end room\");yield(i=this.transport)==null?void 0:i.signal.endRoom(e,t),yield this.leave()})}removePeer(e,t){return c(this,null,function*(){var i;if(!this.localPeer)throw S.GenericErrors.NotConnected(\"VALIDATION\",\"No local peer present, cannot remove peer\");yield(i=this.transport)==null?void 0:i.signal.removePeer({requested_for:e,reason:t})})}startRTMPOrRecording(e){return c(this,null,function*(){var i,r;if(!this.localPeer)throw S.GenericErrors.NotConnected(\"VALIDATION\",\"No local peer present, cannot start streaming or recording\");let t={meeting_url:e.meetingURL,record:e.record};(i=e.rtmpURLs)!=null&&i.length&&(t.rtmp_urls=e.rtmpURLs),e.resolution&&(t.resolution=e.resolution),yield(r=this.transport)==null?void 0:r.signal.startRTMPOrRecording(t)})}stopRTMPAndRecording(){return c(this,null,function*(){var e;if(!this.localPeer)throw S.GenericErrors.NotConnected(\"VALIDATION\",\"No local peer present, cannot stop streaming or recording\");yield(e=this.transport)==null?void 0:e.signal.stopRTMPAndRecording()})}startHLSStreaming(e){return c(this,null,function*(){var i;if(!this.localPeer)throw S.GenericErrors.NotConnected(\"VALIDATION\",\"No local peer present, cannot start HLS streaming\");let t={};e&&e.variants&&e.variants.length>0&&(t.variants=e.variants.map(r=>{let s={meeting_url:r.meetingURL};return r.metadata&&(s.metadata=r.metadata),s})),e!=null&&e.recording&&(t.hls_recording={single_file_per_layer:e.recording.singleFilePerLayer,hls_vod:e.recording.hlsVod}),yield(i=this.transport)==null?void 0:i.signal.startHLSStreaming(t)})}stopHLSStreaming(e){return c(this,null,function*(){var t,i,r;if(!this.localPeer)throw S.GenericErrors.NotConnected(\"VALIDATION\",\"No local peer present, cannot stop HLS streaming\");if(e){let s={variants:(t=e==null?void 0:e.variants)==null?void 0:t.map(o=>{let n={meeting_url:o.meetingURL};return o.metadata&&(n.metadata=o.metadata),n}),stop_reason:e.stop_reason};yield(i=this.transport)==null?void 0:i.signal.stopHLSStreaming(s)}else yield(r=this.transport)==null?void 0:r.signal.stopHLSStreaming()})}startTranscription(e){return c(this,null,function*(){var i;if(!this.localPeer)throw S.GenericErrors.NotConnected(\"VALIDATION\",\"No local peer present, cannot start transcriptions\");let t={mode:e.mode};yield(i=this.transport)==null?void 0:i.signal.startTranscription(t)})}stopTranscription(e){return c(this,null,function*(){var i;if(!this.localPeer)throw S.GenericErrors.NotConnected(\"VALIDATION\",\"No local peer present, cannot stop transcriptions\");if(!e)throw S.GenericErrors.Signalling(\"VALIDATION\",\"No mode is passed to stop the transcription\");let t={mode:e.mode};yield(i=this.transport)==null?void 0:i.signal.stopTranscription(t)})}sendHLSTimedMetadata(e){return c(this,null,function*(){var t;if(this.validateJoined(\"sendHLSTimedMetadata\"),e.length>0){let i={metadata_objs:e};yield(t=this.transport)==null?void 0:t.signal.sendHLSTimedMetadata(i)}})}changeName(e){return c(this,null,function*(){var i,r;this.validateJoined(\"changeName\");let t=this.store.getLocalPeer();t&&t.name!==e&&(yield(i=this.transport)==null?void 0:i.signal.updatePeer({name:e}),(r=this.notificationManager)==null||r.updateLocalPeer({name:e}))})}changeMetadata(e){return c(this,null,function*(){var t,i;this.validateJoined(\"changeMetadata\"),yield(t=this.transport)==null?void 0:t.signal.updatePeer({data:e}),(i=this.notificationManager)==null||i.updateLocalPeer({metadata:e})})}setSessionMetadata(e){return c(this,null,function*(){var t;yield(t=this.transport)==null?void 0:t.signal.setSessionMetadata({key:\"default\",data:e})})}getSessionMetadata(){return c(this,null,function*(){var t;return(yield(t=this.transport)==null?void 0:t.signal.getSessionMetadata(\"default\")).data})}getRoles(){return Object.values(this.store.getKnownRoles())}changeTrackState(e,t){return c(this,null,function*(){var r;if(e.type===\"video\"&&e.source!==\"regular\"){l.w(this.TAG,\"Muting non-regular video tracks is currently not supported\");return}if(e.enabled===t){l.w(this.TAG,`Aborting change track state, track already has enabled - ${t}`,e);return}if(!this.store.getTrackById(e.trackId))throw S.GenericErrors.ValidationFailed(\"No track found for change track state\",e);let i=this.store.getPeerByTrackId(e.trackId);if(!i)throw S.GenericErrors.ValidationFailed(\"No peer found for change track state\",e);yield(r=this.transport)==null?void 0:r.signal.requestTrackStateChange({requested_for:i.peerId,track_id:e.trackId,stream_id:e.stream.id,mute:!t})})}changeMultiTrackState(e){return c(this,null,function*(){var o;if(typeof e.enabled!=\"boolean\")throw S.GenericErrors.ValidationFailed(\"Pass a boolean for enabled\");let{enabled:t,roles:i,type:r,source:s}=e;yield(o=this.transport)==null?void 0:o.signal.requestMultiTrackStateChange({value:!t,type:r,source:s,roles:i==null?void 0:i.map(n=>n==null?void 0:n.name)})})}raiseLocalPeerHand(){return c(this,null,function*(){var e;this.validateJoined(\"raiseLocalPeerHand\"),yield(e=this.transport)==null?void 0:e.signal.joinGroup(Ae)})}lowerLocalPeerHand(){return c(this,null,function*(){var e;this.validateJoined(\"lowerLocalPeerHand\"),yield(e=this.transport)==null?void 0:e.signal.leaveGroup(Ae)})}raiseRemotePeerHand(e){return c(this,null,function*(){var t;yield(t=this.transport)==null?void 0:t.signal.addToGroup(e,Ae)})}lowerRemotePeerHand(e){return c(this,null,function*(){var t;yield(t=this.transport)==null?void 0:t.signal.removeFromGroup(e,Ae)})}setFrameworkInfo(e){this.frameworkInfo=m(m({},this.frameworkInfo),e)}attachVideo(e,t){return c(this,null,function*(){let i=this.store.getConfig();i!=null&&i.autoManageVideo?e.attach(t):yield e.addSink(t)})}detachVideo(e,t){return c(this,null,function*(){let i=this.store.getConfig();i!=null&&i.autoManageVideo?e.detach(t):yield e.removeSink(t)})}publish(e,t){return c(this,null,function*(){var i,r,s;if([this.store.getPublishParams(),!this.sdkState.published,!Ge].every(o=>!!o)){let o=t&&t!==((r=(i=this.localPeer)==null?void 0:i.role)==null?void 0:r.name)?()=>{var n;return(n=this.roleChangeManager)==null?void 0:n.diffRolesAndPublishTracks({oldRole:this.store.getPolicyForRole(t),newRole:this.localPeer.role})}:()=>this.getAndPublishTracks(e);yield(s=o==null?void 0:o())==null?void 0:s.catch(n=>{var d;l.e(this.TAG,\"Error in publish\",n),(d=this.listener)==null||d.onError(n)})}})}getAndPublishTracks(e){return c(this,null,function*(){var i,r;let t=yield this.localTrackManager.getTracksToPublish(e);yield this.initDeviceManagers(),yield this.setAndPublishTracks(t),(r=(i=this.localPeer)==null?void 0:i.audioTrack)==null||r.initAudioLevelMonitor(),this.sdkState.published=!0})}setAndPublishTracks(e){return c(this,null,function*(){var t,i;for(let r of e){if(yield this.transport.publish([r]),r.isTrackNotPublishing()){let s=S.TracksErrors.NoDataInTrack(`${r.type} track has no data. muted: ${r.nativeTrack.muted}, readyState: ${r.nativeTrack.readyState}`);l.e(this.TAG,s),this.sendAnalyticsEvent(y.publish({devices:this.deviceManager.getDevices(),error:s})),(t=this.listener)==null||t.onError(s)}yield this.setLocalPeerTrack(r),(i=this.listener)==null||i.onTrackUpdate(0,r,this.localPeer)}})}setLocalPeerTrack(e){return c(this,null,function*(){var t;switch(e.peerId=(t=this.localPeer)==null?void 0:t.peerId,e.type){case\"audio\":this.localPeer.audioTrack=e,yield this.deviceManager.autoSelectAudioOutput();break;case\"video\":this.localPeer.videoTrack=e;break}})}initDeviceManagers(){return c(this,null,function*(){var e,t,i,r,s;this.sdkState.deviceManagersInitialised||(this.sdkState.deviceManagersInitialised=!0,yield this.deviceManager.init(),(yield this.deviceManager.updateOutputDevice((t=(e=this.store.getConfig())==null?void 0:e.settings)==null?void 0:t.audioOutputDeviceId))||(yield this.deviceManager.updateOutputDevice((r=(i=X.getSelection())==null?void 0:i.audioOutput)==null?void 0:r.deviceId)),this.audioSinkManager.init((s=this.store.getConfig())==null?void 0:s.audioSinkElementId))})}cleanDeviceManagers(){this.eventBus.deviceChange.unsubscribe(this.handleDeviceChange),this.eventBus.audioPluginFailed.unsubscribe(this.handleAudioPluginError),this.eventBus.autoplayError.unsubscribe(this.handleAutoplayError),this.deviceManager.cleanup(),this.audioSinkManager.cleanup()}initPreviewTrackAudioLevelMonitor(){var t;let e=(t=this.localPeer)==null?void 0:t.audioTrack;e==null||e.initAudioLevelMonitor(),this.eventBus.trackAudioLevelUpdate.subscribe(i=>{var s;let r=i&&i.track.trackId===(e==null?void 0:e.trackId)?[{audioLevel:i.audioLevel,peer:this.localPeer,track:e}]:[];this.store.updateSpeakers(r),(s=this.audioListener)==null||s.onAudioLevelUpdate(r)}),this.eventBus.localAudioSilence.subscribe(this.sendAudioPresenceFailed)}notifyJoin(){var i;let e=this.store.getLocalPeer(),t=this.store.getRoom();if(!t){l.w(this.TAG,\"notify join - room not present\");return}if(t.joinedAt=new Date,e&&(e.joinedAt=t.joinedAt),e!=null&&e.role){this.analyticsTimer.end(\"join_time\"),(i=this.listener)==null||i.onJoin(t);return}return new Promise((r,s)=>{this.eventBus.policyChange.subscribeOnce(()=>{var o;this.analyticsTimer.end(\"join_time\"),(o=this.listener)==null||o.onJoin(t),r()}),this.eventBus.leave.subscribeOnce(o=>{s(o)})})}setUpPreview(e,t){this.sdkState.isPreviewCalled=!0,this.sdkState.isPreviewInProgress=!0;let{roomId:i,userId:r,role:s}=Mr(e.authToken);this.commonSetup(e,i,t),this.store.setConfig(e),this.store.createAndSetUserAgent(this.frameworkInfo),this.createAndAddLocalPeerToStore(e,s,r,e.asRole)}setPlaylistSettings(r){return c(this,arguments,function*({track:e,hmsTrack:t,source:i}){var s,o;if(i===\"videoplaylist\"){let n={};if(e.kind===\"audio\")n.maxBitrate=((s=this.playlistSettings.audio)==null?void 0:s.bitrate)||Kr;else{n.maxBitrate=((o=this.playlistSettings.video)==null?void 0:o.bitrate)||$r;let{width:d,height:u}=e.getSettings();n.width=d,n.height=u}yield t.setSettings(n)}else i===\"audioplaylist\"&&(yield t.setSettings({maxBitrate:64}))})}createAndAddLocalPeerToStore(e,t,i,r){let s=this.store.getPolicyForRole(t),o=r?this.store.getPolicyForRole(r):void 0,n=new qe({name:e.userName||\"\",customerUserId:i,metadata:e.metaData||\"\",role:s,asRole:o||s,type:\"regular\"});this.store.addPeer(n)}commonSetup(e,t,i){this.stringifyMetadata(e),e.initEndpoint||(e.initEndpoint=\"https://prod-init.100ms.live\"),this.initStoreAndManagers(i),this.store.getRoom()||this.store.setRoom(new Je(t))}removeDevicesFromConfig(e){this.store.getConfig()&&e.settings&&(delete e.settings.audioOutputDeviceId,delete e.settings.videoDeviceId,delete e.settings.audioInputDeviceId)}getScreenshareTracks(e,t){return c(this,null,function*(){let i=this.transport.isFlagEnabled(\"scaleScreenshareBasedOnPixels\"),[r,s]=yield this.localTrackManager.getLocalScreen(t,i),o=()=>{this.stopEndedScreenshare(e)},n=[];if(t!=null&&t.audioOnly){if(r.nativeTrack.stop(),!s)throw S.TracksErrors.NothingToReturn(\"TRACK\",\"Select share audio when sharing screen\",\"No audio found\");n.push(s),s.nativeTrack.addEventListener(\"ended\",o)}else n.push(r),r.nativeTrack.addEventListener(\"ended\",o),s&&n.push(s);return n})}stopPlaylist(e){e.source===\"audioplaylist\"?this.playlistManager.stop(\"audio\"):e.source===\"videoplaylist\"&&this.playlistManager.stop(\"video\")}applySettings(e){return c(this,null,function*(){Ns(this.store);let t=this.store.getPublishParams();if(t){if(e instanceof G){let i=e.source===\"regular\"?\"video\":e.source===\"screen\"?\"screen\":\"\";if(!i||!t.allowed.includes(i))return;let r=t[i];if(!r)return;let s=new q().codec(r.codec).maxBitrate(r.bitRate).maxFramerate(r.frameRate).setWidth(r.width).setHeight(r.height).build();yield e.setSettings(s)}else if(e instanceof de){if(!t.allowed.includes(\"audio\"))return;let i=new Q().codec(t.audio.codec).maxBitrate(t.audio.bitRate).build();yield e.setSettings(i)}}})}};var mt=class a{constructor(e,t,i){this.getStats=()=>(this.stats||(this.stats=new si(this.store,this.sdk)),this.stats);this.getDiagnosticsSDK=()=>(this.diagnostics||(this.diagnostics=this.actions.initDiagnostics()),this.diagnostics);e?this.store=e:this.store=a.createNewHMSStore(Fi(\"HMSStore\"),oi),i?this.notifications=i:this.notifications=new Li(this.store),t?this.actions=t:(this.sdk=new yr,this.actions=new Vi(this.store,this.sdk,this.notifications)),this.actions.setFrameworkInfo({type:\"js\",sdkVersion:Ir().version}),this.initialTriggerOnSubscribe=!1,U&&(window.__hms=this)}triggerOnSubscribe(){this.initialTriggerOnSubscribe||(a.makeStoreTriggerOnSubscribe(this.store),this.initialTriggerOnSubscribe=!0)}getStore(){return this.store}getHMSActions(){return this.actions}getActions(){return this.actions}getNotifications(){return{onNotification:this.notifications.onNotification}}static createNewHMSStore(e,t){let i=(0,zustand_vanilla__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(()=>t()),r=i.setState;i.setState=n=>{let d=typeof n==\"function\"?(0,immer__WEBPACK_IMPORTED_MODULE_8__.produce)(n):n;r(d)};let s=i.getState;i.getState=n=>n?n(s()):s(),a.compareWithShallowCheckInSubscribe(i);let o=a.setUpDevtools(i,e);return M(m({},i),{namedSetState:o})}static makeStoreTriggerOnSubscribe(e){let t=e.subscribe;e.subscribe=(i,r,s)=>(i(e.getState(r),void 0),t(i,r,s))}static compareWithShallowCheckInSubscribe(e){let t=e.subscribe;e.subscribe=(i,r,s)=>(r||(r=o=>o),s=s||zustand_shallow__WEBPACK_IMPORTED_MODULE_9__[\"default\"],t(i,r,s))}static setUpDevtools(e,t){let i;try{i=window.__REDUX_DEVTOOLS_EXTENSION__||window.top.__REDUX_DEVTOOLS_EXTENSION__}catch(o){}if(!i)return o=>{e.setState(o)};let r=i.connect(a.devtoolsOptions(t));r.prefix=t?`${t} > `:\"\";let s=e.setState;return e.setState=o=>{s(o),r.send(`${r.prefix}setState`,e.getState())},r.subscribe(a.devtoolsSubscribe(r,e,s)),r.send(\"setUpStore\",e.getState()),(o,n)=>{s(o);let d=n||`${r.prefix}action`;r.send(d,e.getState())}}static devtoolsOptions(e){return{name:e,actionsBlacklist:[\"audioLevel\",\"playlistProgress\",\"connectionQuality\"]}}static devtoolsSubscribe(e,t,i){return r=>{var s,o,n,d;if(r.type===\"DISPATCH\"&&r.state)[\"JUMP_TO_ACTION\",\"JUMP_TO_STATE\"].includes(r.payload.type)?i(JSON.parse(r.state)):t.setState(JSON.parse(r.state));else if(r.type===\"DISPATCH\"&&((s=r.payload)==null?void 0:s.type)===\"COMMIT\")e.init(t.getState());else if(r.type===\"DISPATCH\"&&((o=r.payload)==null?void 0:o.type)===\"IMPORT_STATE\"){let u=(n=r.payload.nextLiftedState)==null?void 0:n.actionsById;(((d=r.payload.nextLiftedState)==null?void 0:d.computedStates)||[]).forEach(({state:h},T)=>{let g=u[T]||`${e.prefix}setState`;T===0?e.init(h):(i(h),e.send(g,t.getState()))})}}}};var ao=(a,e,t)=>{let i;t.getState(se)===\"Connected\"&&(i=so(a,e,t)),t.subscribe(r=>{[\"Connected\",\"Reconnecting\"].includes(r)?i||(i=so(a,e,t)):[\"Disconnected\",\"Failed\"].includes(r)&&i&&(xn(e,r),i(),i=void 0)},se)},so=(a,e,t)=>{var s,o;let i=Nn(t,e);(s=a.getWebrtcInternals())==null||s.start();let r=(o=a.getWebrtcInternals())==null?void 0:o.onStatsChange(n=>On(e,n,t,a));return()=>{i(),r&&r()}},Nn=(a,e)=>{let t,i,r;return a.getState(Ie)?e.namedSetState(s=>{s.localPeer.id=a.getState(Ie)},\"localpeer-id\"):t=a.subscribe(s=>{s&&e.namedSetState(o=>{o.localPeer.id=s},\"localpeer-id\")},Ie),a.getState(Z)?e.namedSetState(s=>{s.localPeer.videoTrack=a.getState(Z)},\"localpeer-videotrack-id\"):i=a.subscribe(s=>{s&&e.namedSetState(o=>{o.localPeer.videoTrack=s},\"localpeer-videotrack-id\")},Z),a.getState(le)?e.namedSetState(s=>{s.localPeer.audioTrack=a.getState(le)},\"localpeer-audiotrack-id\"):r=a.subscribe(s=>{s&&e.namedSetState(o=>{o.localPeer.audioTrack=s},\"localpeer-audiotrack-id\")},le),()=>{t==null||t(),i==null||i(),r==null||r()}},On=(a,e,t,i)=>{let r=t.getState(N);a.namedSetState(s=>{let o=t.getState(Ie),n={},d=Object.keys(r).filter(p=>r[p].peerId!==o);for(let p of d){let h=e.getRemoteTrackStats(p);h&&(n[p]=h)}rs(s.remoteTrackStats,n);let u={[o]:e.getLocalPeerStats()};rs(s.peerStats,u),Wa(s.localTrackStats,e.getLocalTrackStats(),i.store.getLocalPeerTracks())},\"webrtc-stats\")},xn=(a,e=\"resetState\")=>{a.namedSetState(t=>{Object.assign(t,ni())},e)};var si=class{constructor(e,t){this.hmsStore=e;this.sdk=t;this.store=mt.createNewHMSStore(Fi(\"HMSStatsStore\"),ni),this.getState=this.store.getState,this.subscribe=this.store.subscribe,this.getPublishPeerConnection=()=>new Promise(i=>{var r,s;this.hmsStore.getState(se)===\"Connected\"?i((s=(r=this.sdk)==null?void 0:r.getWebrtcInternals())==null?void 0:s.getPublishPeerConnection()):this.hmsStore.subscribe(o=>{var n,d;o===\"Connected\"&&i((d=(n=this.sdk)==null?void 0:n.getWebrtcInternals())==null?void 0:d.getPublishPeerConnection())},se)}),this.getSubscribePeerConnection=()=>new Promise(i=>{var r,s;this.hmsStore.getState(se)===\"Connected\"?i((s=(r=this.sdk)==null?void 0:r.getWebrtcInternals())==null?void 0:s.getSubscribePeerConnection()):this.hmsStore.subscribe(o=>{var n,d;o===\"Connected\"&&i((d=(n=this.sdk)==null?void 0:n.getWebrtcInternals())==null?void 0:d.getSubscribePeerConnection())},se)}),this.sdk&&ao(this.sdk,this.store,this.hmsStore)}};var Un=a=>a.localPeer.id,Bn=a=>a.localPeer.audioTrack,Vn=a=>a.localPeer.videoTrack,Fn=(a,e)=>e,oo=(a,e)=>e,Gn=a=>a.remoteTrackStats,no=a=>a.peerStats,us=a=>a.localTrackStats,Le=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([no,Un],(a,e)=>a[e]),Wn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Le,a=>{var e;return(e=a==null?void 0:a.subscribe)==null?void 0:e.packetsLost}),$n=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Le,a=>{var e;return(e=a==null?void 0:a.subscribe)==null?void 0:e.jitter}),Kn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Le,a=>{var e;return(e=a==null?void 0:a.publish)==null?void 0:e.bitrate}),qn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Le,a=>{var e;return(e=a==null?void 0:a.subscribe)==null?void 0:e.bitrate}),jn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Le,a=>{var e;return(e=a==null?void 0:a.publish)==null?void 0:e.availableOutgoingBitrate}),Jn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Le,a=>{var e;return(e=a==null?void 0:a.subscribe)==null?void 0:e.availableIncomingBitrate}),Qn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Le,a=>{var e;return(e=a==null?void 0:a.publish)==null?void 0:e.bytesSent}),zn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(Le,a=>{var e;return(e=a==null?void 0:a.subscribe)==null?void 0:e.bytesReceived}),Yn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([no,Fn],(a,e)=>e?a[e]:void 0),Xn=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([Gn,oo],(a,e)=>e?a[e]:void 0),ps=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([us,oo],(a,e)=>e?a[e]:void 0),Zn=H(Yn),ec=H(Xn),tc=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([us,Bn],(a,e)=>{var t;return e?(t=a[e])==null?void 0:t[0]:void 0}),ic=H((0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(ps,a=>a==null?void 0:a[0])),rc=(0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)([us,Vn],(a,e)=>{var t;return e?(t=a[e])==null?void 0:t[0]:void 0}),sc=H((0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(ps,a=>a)),ac=a=>H((0,reselect__WEBPACK_IMPORTED_MODULE_0__.createSelector)(ps,e=>{let t=Object.keys(We).find(i=>We[i]===a);return a&&(e==null?void 0:e.find(i=>i.rid===t))||(e==null?void 0:e[0])})),oc={localPeerStats:Le,packetsLost:Wn,jitter:$n,publishBitrate:Kn,subscribeBitrate:qn,availablePublishBitrate:jn,availableSubscribeBitrate:Jn,totalBytesSent:Qn,totalBytesReceived:zn,peerStatsByID:Zn,trackStatsByID:ec,localAudioTrackStatsByID:ic,localVideoTrackStatsByID:sc,localVideoTrackStatsByLayer:ac,localAudioTrackStats:tc,localVideoTrackStats:rc};\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@100mslive/hms-video-store/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/packages/react-sdk/node_modules/zustand/esm/shallow.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@100mslive/react-sdk/dist/packages/react-sdk/node_modules/zustand/esm/shallow.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ t; }\n/* harmony export */ });\nfunction t(t,e){if(Object.is(t,e))return!0;if(\"object\"!=typeof t||null===t||\"object\"!=typeof e||null===e)return!1;const r=Object.keys(t);if(r.length!==Object.keys(e).length)return!1;for(let n=0;n<r.length;n++)if(!Object.prototype.hasOwnProperty.call(e,r[n])||!Object.is(t[r[n]],e[r[n]]))return!1;return!0}\n//# sourceMappingURL=shallow.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AMTAwbXNsaXZlL3JlYWN0LXNkay9kaXN0L3BhY2thZ2VzL3JlYWN0LXNkay9ub2RlX21vZHVsZXMvenVzdGFuZC9lc20vc2hhbGxvdy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsZ0JBQWdCLDJCQUEyQix1RUFBdUUsdUJBQXVCLDZDQUE2QyxZQUFZLFdBQVcsMkZBQTJGLFNBQThCO0FBQ3RVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AMTAwbXNsaXZlL3JlYWN0LXNkay9kaXN0L3BhY2thZ2VzL3JlYWN0LXNkay9ub2RlX21vZHVsZXMvenVzdGFuZC9lc20vc2hhbGxvdy5qcz9lMGYyIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHQodCxlKXtpZihPYmplY3QuaXModCxlKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT10eXBlb2YgdHx8bnVsbD09PXR8fFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm4hMTtjb25zdCByPU9iamVjdC5rZXlzKHQpO2lmKHIubGVuZ3RoIT09T2JqZWN0LmtleXMoZSkubGVuZ3RoKXJldHVybiExO2ZvcihsZXQgbj0wO248ci5sZW5ndGg7bisrKWlmKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyW25dKXx8IU9iamVjdC5pcyh0W3Jbbl1dLGVbcltuXV0pKXJldHVybiExO3JldHVybiEwfWV4cG9ydHt0IGFzIGRlZmF1bHR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhbGxvdy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/packages/react-sdk/node_modules/zustand/esm/shallow.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/primitives/HmsRoomProvider.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@100mslive/react-sdk/dist/primitives/HmsRoomProvider.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HMSRoomProvider: function() { return /* binding */ l; },\n/* harmony export */   useHMSActions: function() { return /* binding */ v; },\n/* harmony export */   useHMSNotifications: function() { return /* binding */ E; },\n/* harmony export */   useHMSStatsStore: function() { return /* binding */ S; },\n/* harmony export */   useHMSStore: function() { return /* binding */ m; },\n/* harmony export */   useHMSVanillaNotifications: function() { return /* binding */ g; },\n/* harmony export */   useHMSVanillaStore: function() { return /* binding */ b; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/@100mslive/react-sdk/node_modules/zustand/esm/index.js\");\n/* harmony import */ var _100mslive_hms_video_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @100mslive/hms-video-store */ \"(app-pages-browser)/./node_modules/@100mslive/hms-video-store/dist/index.js\");\n/* harmony import */ var _store_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./store.js */ \"(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/primitives/store.js\");\n/* harmony import */ var _utils_isBrowser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/isBrowser.js */ \"(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/utils/isBrowser.js\");\nconst d=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null),l=({children:e,actions:s,store:n,notifications:c,stats:f,isHMSStatsOn:u=!1,leaveOnUnload:l=!0})=>{const m=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>{let e;const o=()=>{throw new Error(\"modifying store is not allowed\")};if(s&&n)e={actions:s,store:(0,zustand__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object.assign(Object.assign({},n),{setState:o,destroy:o}))},c&&(e.notifications=c),f&&(e.statsStore=(0,zustand__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({getState:f.getState,subscribe:f.subscribe,setState:o,destroy:o}));else{const t=new _100mslive_hms_video_store__WEBPACK_IMPORTED_MODULE_2__.HMSReactiveStore;if(e={actions:t.getActions(),store:(0,zustand__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Object.assign(Object.assign({},t.getStore()),{setState:o,destroy:o})),notifications:t.getNotifications()},u){const r=t.getStats();e.statsStore=(0,zustand__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({getState:r.getState,subscribe:r.subscribe,setState:o,destroy:o})}}return e.actions.setFrameworkInfo({type:\"react-web\",version:(react__WEBPACK_IMPORTED_MODULE_0___default().version),sdkVersion:\"0.10.36\"}),e}),[s,n,c,f,u]);return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{if(_utils_isBrowser_js__WEBPACK_IMPORTED_MODULE_3__.isBrowser&&l){const t=()=>m.actions.leave();return window.addEventListener(\"unload\",t),()=>{window.removeEventListener(\"unload\",t)}}return()=>{}}),[l,m]),react__WEBPACK_IMPORTED_MODULE_0___default().createElement(d.Provider,{value:m},e)},m=(0,_store_js__WEBPACK_IMPORTED_MODULE_4__.makeHMSStoreHook)(d),S=(0,_store_js__WEBPACK_IMPORTED_MODULE_4__.makeHMSStatsStoreHook)(d),b=()=>{const t=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(d);if(!t)throw new Error(_store_js__WEBPACK_IMPORTED_MODULE_4__.hooksErrorMessage);return t.store},g=()=>{const t=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(d);if(!t)throw new Error(_store_js__WEBPACK_IMPORTED_MODULE_4__.hooksErrorMessage);return t.notifications},v=()=>{const t=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(d);if(!t)throw new Error(_store_js__WEBPACK_IMPORTED_MODULE_4__.hooksErrorMessage);return t.actions},E=t=>{const e=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(d),[o,i]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);if(!e)throw new Error(_store_js__WEBPACK_IMPORTED_MODULE_4__.hooksErrorMessage);return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{if(!e.notifications)return;return e.notifications.onNotification((t=>{i(t)}),t)}),[e.notifications,t]),o};\n//# sourceMappingURL=HmsRoomProvider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AMTAwbXNsaXZlL3JlYWN0LXNkay9kaXN0L3ByaW1pdGl2ZXMvSG1zUm9vbVByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMFUsUUFBUSxvREFBQyxXQUFXLDBGQUEwRixJQUFJLFFBQVEsOENBQUMsT0FBTyxNQUFNLGFBQWEsbURBQW1ELFdBQVcsZ0JBQWdCLG1EQUFDLCtCQUErQixLQUFLLHFCQUFxQixHQUFHLHlDQUF5QyxtREFBQyxFQUFFLCtEQUErRCxHQUFHLEtBQUssWUFBWSx3RUFBQyxDQUFDLE1BQU0sNkJBQTZCLG1EQUFDLCtCQUErQixnQkFBZ0IscUJBQXFCLHNDQUFzQyxJQUFJLHFCQUFxQixhQUFhLG1EQUFDLEVBQUUsK0RBQStELEdBQUcsbUNBQW1DLHlCQUF5QixzREFBUyxzQkFBc0IsSUFBSSxlQUFlLE9BQU8sZ0RBQUMsT0FBTyxHQUFHLDBEQUFDLEtBQUssOEJBQThCLGdEQUFnRCx3Q0FBd0MsYUFBYSxTQUFTLDBEQUFlLGFBQWEsUUFBUSxJQUFJLEdBQUcsMkRBQUMsTUFBTSxnRUFBQyxXQUFXLFFBQVEsaURBQUMsSUFBSSxzQkFBc0Isd0RBQUMsRUFBRSxlQUFlLFFBQVEsUUFBUSxpREFBQyxJQUFJLHNCQUFzQix3REFBQyxFQUFFLHVCQUF1QixRQUFRLFFBQVEsaURBQUMsSUFBSSxzQkFBc0Isd0RBQUMsRUFBRSxpQkFBaUIsT0FBTyxRQUFRLGlEQUFDLFVBQVUsK0NBQUMsT0FBTyxzQkFBc0Isd0RBQUMsRUFBRSxPQUFPLGdEQUFDLE9BQU8sMkJBQTJCLDJDQUEyQyxLQUFLLEtBQUssMEJBQWtNO0FBQ3owRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQDEwMG1zbGl2ZS9yZWFjdC1zZGsvZGlzdC9wcmltaXRpdmVzL0htc1Jvb21Qcm92aWRlci5qcz8xMGI2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0LHtjcmVhdGVDb250ZXh0IGFzIGUsdXNlTWVtbyBhcyBvLHVzZUVmZmVjdCBhcyByLHVzZUNvbnRleHQgYXMgcyx1c2VTdGF0ZSBhcyBufWZyb21cInJlYWN0XCI7aW1wb3J0IGkgZnJvbVwienVzdGFuZFwiO2ltcG9ydHtITVNSZWFjdGl2ZVN0b3JlIGFzIGF9ZnJvbVwiQDEwMG1zbGl2ZS9obXMtdmlkZW8tc3RvcmVcIjtpbXBvcnR7bWFrZUhNU1N0b3JlSG9vayBhcyBjLG1ha2VITVNTdGF0c1N0b3JlSG9vayBhcyBmLGhvb2tzRXJyb3JNZXNzYWdlIGFzIHV9ZnJvbVwiLi9zdG9yZS5qc1wiO2ltcG9ydHtpc0Jyb3dzZXIgYXMgd31mcm9tXCIuLi91dGlscy9pc0Jyb3dzZXIuanNcIjtjb25zdCBkPWUobnVsbCksbD0oe2NoaWxkcmVuOmUsYWN0aW9uczpzLHN0b3JlOm4sbm90aWZpY2F0aW9uczpjLHN0YXRzOmYsaXNITVNTdGF0c09uOnU9ITEsbGVhdmVPblVubG9hZDpsPSEwfSk9Pntjb25zdCBtPW8oKCgpPT57bGV0IGU7Y29uc3Qgbz0oKT0+e3Rocm93IG5ldyBFcnJvcihcIm1vZGlmeWluZyBzdG9yZSBpcyBub3QgYWxsb3dlZFwiKX07aWYocyYmbillPXthY3Rpb25zOnMsc3RvcmU6aShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sbikse3NldFN0YXRlOm8sZGVzdHJveTpvfSkpfSxjJiYoZS5ub3RpZmljYXRpb25zPWMpLGYmJihlLnN0YXRzU3RvcmU9aSh7Z2V0U3RhdGU6Zi5nZXRTdGF0ZSxzdWJzY3JpYmU6Zi5zdWJzY3JpYmUsc2V0U3RhdGU6byxkZXN0cm95Om99KSk7ZWxzZXtjb25zdCB0PW5ldyBhO2lmKGU9e2FjdGlvbnM6dC5nZXRBY3Rpb25zKCksc3RvcmU6aShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sdC5nZXRTdG9yZSgpKSx7c2V0U3RhdGU6byxkZXN0cm95Om99KSksbm90aWZpY2F0aW9uczp0LmdldE5vdGlmaWNhdGlvbnMoKX0sdSl7Y29uc3Qgcj10LmdldFN0YXRzKCk7ZS5zdGF0c1N0b3JlPWkoe2dldFN0YXRlOnIuZ2V0U3RhdGUsc3Vic2NyaWJlOnIuc3Vic2NyaWJlLHNldFN0YXRlOm8sZGVzdHJveTpvfSl9fXJldHVybiBlLmFjdGlvbnMuc2V0RnJhbWV3b3JrSW5mbyh7dHlwZTpcInJlYWN0LXdlYlwiLHZlcnNpb246dC52ZXJzaW9uLHNka1ZlcnNpb246XCIwLjEwLjM2XCJ9KSxlfSksW3MsbixjLGYsdV0pO3JldHVybiByKCgoKT0+e2lmKHcmJmwpe2NvbnN0IHQ9KCk9Pm0uYWN0aW9ucy5sZWF2ZSgpO3JldHVybiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInVubG9hZFwiLHQpLCgpPT57d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIix0KX19cmV0dXJuKCk9Pnt9fSksW2wsbV0pLHQuY3JlYXRlRWxlbWVudChkLlByb3ZpZGVyLHt2YWx1ZTptfSxlKX0sbT1jKGQpLFM9ZihkKSxiPSgpPT57Y29uc3QgdD1zKGQpO2lmKCF0KXRocm93IG5ldyBFcnJvcih1KTtyZXR1cm4gdC5zdG9yZX0sZz0oKT0+e2NvbnN0IHQ9cyhkKTtpZighdCl0aHJvdyBuZXcgRXJyb3IodSk7cmV0dXJuIHQubm90aWZpY2F0aW9uc30sdj0oKT0+e2NvbnN0IHQ9cyhkKTtpZighdCl0aHJvdyBuZXcgRXJyb3IodSk7cmV0dXJuIHQuYWN0aW9uc30sRT10PT57Y29uc3QgZT1zKGQpLFtvLGldPW4obnVsbCk7aWYoIWUpdGhyb3cgbmV3IEVycm9yKHUpO3JldHVybiByKCgoKT0+e2lmKCFlLm5vdGlmaWNhdGlvbnMpcmV0dXJuO3JldHVybiBlLm5vdGlmaWNhdGlvbnMub25Ob3RpZmljYXRpb24oKHQ9PntpKHQpfSksdCl9KSxbZS5ub3RpZmljYXRpb25zLHRdKSxvfTtleHBvcnR7bCBhcyBITVNSb29tUHJvdmlkZXIsdiBhcyB1c2VITVNBY3Rpb25zLEUgYXMgdXNlSE1TTm90aWZpY2F0aW9ucyxTIGFzIHVzZUhNU1N0YXRzU3RvcmUsbSBhcyB1c2VITVNTdG9yZSxnIGFzIHVzZUhNU1ZhbmlsbGFOb3RpZmljYXRpb25zLGIgYXMgdXNlSE1TVmFuaWxsYVN0b3JlfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUhtc1Jvb21Qcm92aWRlci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/primitives/HmsRoomProvider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/primitives/store.js":
/*!********************************************************************!*\
  !*** ./node_modules/@100mslive/react-sdk/dist/primitives/store.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hooksErrorMessage: function() { return /* binding */ r; },\n/* harmony export */   makeHMSStatsStoreHook: function() { return /* binding */ a; },\n/* harmony export */   makeHMSStoreHook: function() { return /* binding */ s; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _packages_react_sdk_node_modules_zustand_esm_shallow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../packages/react-sdk/node_modules/zustand/esm/shallow.js */ \"(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/packages/react-sdk/node_modules/zustand/esm/shallow.js\");\n/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/logger.js */ \"(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/utils/logger.js\");\nconst r=\"It seems like you forgot to add your component within a top level HMSRoomProvider, please refer to 100ms react docs(https://www.100ms.live/docs/javascript/v2/how-to-guides/install-the-sdk/integration#react-hooks) to check on the required steps for using this hook. If the provider is present\\n  at the top level, check the yarn.lock/package-lock.json, if there are multiple versions of @100mslive/react-sdk. Please ensure the versions of @100mslive/react-sdk and @100mslive/roomkit-react are the same versions from the release notes(https://www.100ms.live/docs/javascript/v2/changelog/release-notes) that you are trying to update to.\";function s(s){return(a,n=_packages_react_sdk_node_modules_zustand_esm_shallow_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])=>{a||_utils_logger_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].w(\"fetching full store without passing any selector may have a heavy performance impact on your website.\");const i=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(s);if(!i)throw new Error(r);return(0,i.store)(a,n)}}function a(s){return(a,n=_packages_react_sdk_node_modules_zustand_esm_shallow_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])=>{a||_utils_logger_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].w(\"fetching full store without passing any selector may have a heavy performance impact on your website.\");const i=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(s);if(!i)throw new Error(r);const c=i.statsStore;return null==c?void 0:c(a,n)}}\n//# sourceMappingURL=store.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AMTAwbXNsaXZlL3JlYWN0LXNkay9kaXN0L3ByaW1pdGl2ZXMvc3RvcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE4SSxvb0JBQW9vQixjQUFjLFdBQVcsK0ZBQUMsSUFBSSxHQUFHLHdEQUFDLDRHQUE0RyxRQUFRLGlEQUFDLElBQUkseUJBQXlCLHdCQUF3QixjQUFjLFdBQVcsK0ZBQUMsSUFBSSxHQUFHLHdEQUFDLDRHQUE0RyxRQUFRLGlEQUFDLElBQUkseUJBQXlCLHFCQUFxQiw4QkFBOEc7QUFDcnhDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AMTAwbXNsaXZlL3JlYWN0LXNkay9kaXN0L3ByaW1pdGl2ZXMvc3RvcmUuanM/YmJjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7dXNlQ29udGV4dCBhcyBlfWZyb21cInJlYWN0XCI7aW1wb3J0IHQgZnJvbVwiLi4vcGFja2FnZXMvcmVhY3Qtc2RrL25vZGVfbW9kdWxlcy96dXN0YW5kL2VzbS9zaGFsbG93LmpzXCI7aW1wb3J0IG8gZnJvbVwiLi4vdXRpbHMvbG9nZ2VyLmpzXCI7Y29uc3Qgcj1cIkl0IHNlZW1zIGxpa2UgeW91IGZvcmdvdCB0byBhZGQgeW91ciBjb21wb25lbnQgd2l0aGluIGEgdG9wIGxldmVsIEhNU1Jvb21Qcm92aWRlciwgcGxlYXNlIHJlZmVyIHRvIDEwMG1zIHJlYWN0IGRvY3MoaHR0cHM6Ly93d3cuMTAwbXMubGl2ZS9kb2NzL2phdmFzY3JpcHQvdjIvaG93LXRvLWd1aWRlcy9pbnN0YWxsLXRoZS1zZGsvaW50ZWdyYXRpb24jcmVhY3QtaG9va3MpIHRvIGNoZWNrIG9uIHRoZSByZXF1aXJlZCBzdGVwcyBmb3IgdXNpbmcgdGhpcyBob29rLiBJZiB0aGUgcHJvdmlkZXIgaXMgcHJlc2VudFxcbiAgYXQgdGhlIHRvcCBsZXZlbCwgY2hlY2sgdGhlIHlhcm4ubG9jay9wYWNrYWdlLWxvY2suanNvbiwgaWYgdGhlcmUgYXJlIG11bHRpcGxlIHZlcnNpb25zIG9mIEAxMDBtc2xpdmUvcmVhY3Qtc2RrLiBQbGVhc2UgZW5zdXJlIHRoZSB2ZXJzaW9ucyBvZiBAMTAwbXNsaXZlL3JlYWN0LXNkayBhbmQgQDEwMG1zbGl2ZS9yb29ta2l0LXJlYWN0IGFyZSB0aGUgc2FtZSB2ZXJzaW9ucyBmcm9tIHRoZSByZWxlYXNlIG5vdGVzKGh0dHBzOi8vd3d3LjEwMG1zLmxpdmUvZG9jcy9qYXZhc2NyaXB0L3YyL2NoYW5nZWxvZy9yZWxlYXNlLW5vdGVzKSB0aGF0IHlvdSBhcmUgdHJ5aW5nIHRvIHVwZGF0ZSB0by5cIjtmdW5jdGlvbiBzKHMpe3JldHVybihhLG49dCk9PnthfHxvLncoXCJmZXRjaGluZyBmdWxsIHN0b3JlIHdpdGhvdXQgcGFzc2luZyBhbnkgc2VsZWN0b3IgbWF5IGhhdmUgYSBoZWF2eSBwZXJmb3JtYW5jZSBpbXBhY3Qgb24geW91ciB3ZWJzaXRlLlwiKTtjb25zdCBpPWUocyk7aWYoIWkpdGhyb3cgbmV3IEVycm9yKHIpO3JldHVybigwLGkuc3RvcmUpKGEsbil9fWZ1bmN0aW9uIGEocyl7cmV0dXJuKGEsbj10KT0+e2F8fG8udyhcImZldGNoaW5nIGZ1bGwgc3RvcmUgd2l0aG91dCBwYXNzaW5nIGFueSBzZWxlY3RvciBtYXkgaGF2ZSBhIGhlYXZ5IHBlcmZvcm1hbmNlIGltcGFjdCBvbiB5b3VyIHdlYnNpdGUuXCIpO2NvbnN0IGk9ZShzKTtpZighaSl0aHJvdyBuZXcgRXJyb3Iocik7Y29uc3QgYz1pLnN0YXRzU3RvcmU7cmV0dXJuIG51bGw9PWM/dm9pZCAwOmMoYSxuKX19ZXhwb3J0e3IgYXMgaG9va3NFcnJvck1lc3NhZ2UsYSBhcyBtYWtlSE1TU3RhdHNTdG9yZUhvb2sscyBhcyBtYWtlSE1TU3RvcmVIb29rfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0b3JlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/primitives/store.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/utils/isBrowser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@100mslive/react-sdk/dist/utils/isBrowser.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBrowser: function() { return /* binding */ e; }\n/* harmony export */ });\nconst e=\"undefined\"!=typeof window;\n//# sourceMappingURL=isBrowser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AMTAwbXNsaXZlL3JlYWN0LXNkay9kaXN0L3V0aWxzL2lzQnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsbUNBQTBEO0FBQzFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AMTAwbXNsaXZlL3JlYWN0LXNkay9kaXN0L3V0aWxzL2lzQnJvd3Nlci5qcz9iNzA0Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdztleHBvcnR7ZSBhcyBpc0Jyb3dzZXJ9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNCcm93c2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/utils/isBrowser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/utils/logger.js":
/*!****************************************************************!*\
  !*** ./node_modules/@100mslive/react-sdk/dist/utils/logger.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HMSLogLevel: function() { return /* binding */ s; },\n/* harmony export */   \"default\": function() { return /* binding */ t; }\n/* harmony export */ });\nvar s,e;(e=s||(s={}))[e.VERBOSE=0]=\"VERBOSE\",e[e.DEBUG=1]=\"DEBUG\",e[e.INFO=2]=\"INFO\",e[e.WARN=3]=\"WARN\",e[e.ERROR=4]=\"ERROR\",e[e.NONE=5]=\"NONE\";class o{static v(e,...o){this.log(s.VERBOSE,e,...o)}static d(e,...o){this.log(s.DEBUG,e,...o)}static i(e,...o){this.log(s.INFO,e,...o)}static w(e,...o){this.log(s.WARN,e,...o)}static e(e,...o){this.log(s.ERROR,e,...o)}static log(e,o,...t){if(!(this.level.valueOf()>e.valueOf()))switch(e){case s.VERBOSE:console.log(\"HMSui-components: \",o,...t);break;case s.DEBUG:console.debug(\"HMSui-components: \",o,...t);break;case s.INFO:console.info(\"HMSui-components: \",o,...t);break;case s.WARN:console.warn(\"HMSui-components: \",o,...t);break;case s.ERROR:console.error(\"HMSui-components: \",o,...t)}}}o.level=s.VERBOSE;var t=o;\n//# sourceMappingURL=logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AMTAwbXNsaXZlL3JlYWN0LXNkay9kaXN0L3V0aWxzL2xvZ2dlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFFBQVEsV0FBVyw2SEFBNkgsUUFBUSxpQkFBaUIsMkJBQTJCLGlCQUFpQix5QkFBeUIsaUJBQWlCLHdCQUF3QixpQkFBaUIsd0JBQXdCLGlCQUFpQix5QkFBeUIscUJBQXFCLGlEQUFpRCx3REFBd0QsTUFBTSx3REFBd0QsTUFBTSxzREFBc0QsTUFBTSxzREFBc0QsTUFBTSwwREFBMEQsa0JBQWtCLFFBQThDO0FBQzl4QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQDEwMG1zbGl2ZS9yZWFjdC1zZGsvZGlzdC91dGlscy9sb2dnZXIuanM/NTM2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcyxlOyhlPXN8fChzPXt9KSlbZS5WRVJCT1NFPTBdPVwiVkVSQk9TRVwiLGVbZS5ERUJVRz0xXT1cIkRFQlVHXCIsZVtlLklORk89Ml09XCJJTkZPXCIsZVtlLldBUk49M109XCJXQVJOXCIsZVtlLkVSUk9SPTRdPVwiRVJST1JcIixlW2UuTk9ORT01XT1cIk5PTkVcIjtjbGFzcyBve3N0YXRpYyB2KGUsLi4ubyl7dGhpcy5sb2cocy5WRVJCT1NFLGUsLi4ubyl9c3RhdGljIGQoZSwuLi5vKXt0aGlzLmxvZyhzLkRFQlVHLGUsLi4ubyl9c3RhdGljIGkoZSwuLi5vKXt0aGlzLmxvZyhzLklORk8sZSwuLi5vKX1zdGF0aWMgdyhlLC4uLm8pe3RoaXMubG9nKHMuV0FSTixlLC4uLm8pfXN0YXRpYyBlKGUsLi4ubyl7dGhpcy5sb2cocy5FUlJPUixlLC4uLm8pfXN0YXRpYyBsb2coZSxvLC4uLnQpe2lmKCEodGhpcy5sZXZlbC52YWx1ZU9mKCk+ZS52YWx1ZU9mKCkpKXN3aXRjaChlKXtjYXNlIHMuVkVSQk9TRTpjb25zb2xlLmxvZyhcIkhNU3VpLWNvbXBvbmVudHM6IFwiLG8sLi4udCk7YnJlYWs7Y2FzZSBzLkRFQlVHOmNvbnNvbGUuZGVidWcoXCJITVN1aS1jb21wb25lbnRzOiBcIixvLC4uLnQpO2JyZWFrO2Nhc2Ugcy5JTkZPOmNvbnNvbGUuaW5mbyhcIkhNU3VpLWNvbXBvbmVudHM6IFwiLG8sLi4udCk7YnJlYWs7Y2FzZSBzLldBUk46Y29uc29sZS53YXJuKFwiSE1TdWktY29tcG9uZW50czogXCIsbywuLi50KTticmVhaztjYXNlIHMuRVJST1I6Y29uc29sZS5lcnJvcihcIkhNU3VpLWNvbXBvbmVudHM6IFwiLG8sLi4udCl9fX1vLmxldmVsPXMuVkVSQk9TRTt2YXIgdD1vO2V4cG9ydHtzIGFzIEhNU0xvZ0xldmVsLHQgYXMgZGVmYXVsdH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/utils/logger.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@100mslive/react-sdk/node_modules/zustand/esm/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@100mslive/react-sdk/node_modules/zustand/esm/index.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ create; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction createStore(createState) {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (nextState !== state) {\n      const previousState = state;\n      state = replace ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {\n    console.warn(\"[DEPRECATED] Please use `subscribeWithSelector` middleware\");\n    let currentSlice = selector(state);\n    function listenerToAdd() {\n      const nextSlice = selector(state);\n      if (!equalityFn(currentSlice, nextSlice)) {\n        const previousSlice = currentSlice;\n        listener(currentSlice = nextSlice, previousSlice);\n      }\n    }\n    listeners.add(listenerToAdd);\n    return () => listeners.delete(listenerToAdd);\n  };\n  const subscribe = (listener, selector, equalityFn) => {\n    if (selector || equalityFn) {\n      return subscribeWithSelector(listener, selector, equalityFn);\n    }\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => listeners.clear();\n  const api = { setState, getState, subscribe, destroy };\n  state = createState(setState, getState, api);\n  return api;\n}\n\nconst isSSR = typeof window === \"undefined\" || !window.navigator || /ServerSideRendering|^Deno\\//.test(window.navigator.userAgent);\nconst useIsomorphicLayoutEffect = isSSR ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\nfunction create(createState) {\n  const api = typeof createState === \"function\" ? createStore(createState) : createState;\n  const useStore = (selector = api.getState, equalityFn = Object.is) => {\n    const [, forceUpdate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)((c) => c + 1, 0);\n    const state = api.getState();\n    const stateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(state);\n    const selectorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(selector);\n    const equalityFnRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(equalityFn);\n    const erroredRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const currentSliceRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    if (currentSliceRef.current === void 0) {\n      currentSliceRef.current = selector(state);\n    }\n    let newStateSlice;\n    let hasNewStateSlice = false;\n    if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {\n      newStateSlice = selector(state);\n      hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);\n    }\n    useIsomorphicLayoutEffect(() => {\n      if (hasNewStateSlice) {\n        currentSliceRef.current = newStateSlice;\n      }\n      stateRef.current = state;\n      selectorRef.current = selector;\n      equalityFnRef.current = equalityFn;\n      erroredRef.current = false;\n    });\n    const stateBeforeSubscriptionRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(state);\n    useIsomorphicLayoutEffect(() => {\n      const listener = () => {\n        try {\n          const nextState = api.getState();\n          const nextStateSlice = selectorRef.current(nextState);\n          if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {\n            stateRef.current = nextState;\n            currentSliceRef.current = nextStateSlice;\n            forceUpdate();\n          }\n        } catch (error) {\n          erroredRef.current = true;\n          forceUpdate();\n        }\n      };\n      const unsubscribe = api.subscribe(listener);\n      if (api.getState() !== stateBeforeSubscriptionRef.current) {\n        listener();\n      }\n      return unsubscribe;\n    }, []);\n    const sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(sliceToReturn);\n    return sliceToReturn;\n  };\n  Object.assign(useStore, api);\n  useStore[Symbol.iterator] = function() {\n    console.warn(\"[useStore, api] = create() is deprecated and will be removed in v4\");\n    const items = [useStore, api];\n    return {\n      next() {\n        const done = items.length <= 0;\n        return { value: items.shift(), done };\n      }\n    };\n  };\n  return useStore;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AMTAwbXNsaXZlL3JlYWN0LXNkay9ub2RlX21vZHVsZXMvenVzdGFuZC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXNGOztBQUV0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQ0FBMEMsNENBQVMsR0FBRyxrREFBZTtBQUNyRTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaURBQVU7QUFDdEM7QUFDQSxxQkFBcUIsNkNBQU07QUFDM0Isd0JBQXdCLDZDQUFNO0FBQzlCLDBCQUEwQiw2Q0FBTTtBQUNoQyx1QkFBdUIsNkNBQU07QUFDN0IsNEJBQTRCLDZDQUFNO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsdUNBQXVDLDZDQUFNO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLElBQUksb0RBQWE7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AMTAwbXNsaXZlL3JlYWN0LXNkay9ub2RlX21vZHVsZXMvenVzdGFuZC9lc20vaW5kZXguanM/NTRlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZURlYnVnVmFsdWUsIHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShjcmVhdGVTdGF0ZSkge1xuICBsZXQgc3RhdGU7XG4gIGNvbnN0IGxpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGNvbnN0IHNldFN0YXRlID0gKHBhcnRpYWwsIHJlcGxhY2UpID0+IHtcbiAgICBjb25zdCBuZXh0U3RhdGUgPSB0eXBlb2YgcGFydGlhbCA9PT0gXCJmdW5jdGlvblwiID8gcGFydGlhbChzdGF0ZSkgOiBwYXJ0aWFsO1xuICAgIGlmIChuZXh0U3RhdGUgIT09IHN0YXRlKSB7XG4gICAgICBjb25zdCBwcmV2aW91c1N0YXRlID0gc3RhdGU7XG4gICAgICBzdGF0ZSA9IHJlcGxhY2UgPyBuZXh0U3RhdGUgOiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgbmV4dFN0YXRlKTtcbiAgICAgIGxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4gbGlzdGVuZXIoc3RhdGUsIHByZXZpb3VzU3RhdGUpKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGdldFN0YXRlID0gKCkgPT4gc3RhdGU7XG4gIGNvbnN0IHN1YnNjcmliZVdpdGhTZWxlY3RvciA9IChsaXN0ZW5lciwgc2VsZWN0b3IgPSBnZXRTdGF0ZSwgZXF1YWxpdHlGbiA9IE9iamVjdC5pcykgPT4ge1xuICAgIGNvbnNvbGUud2FybihcIltERVBSRUNBVEVEXSBQbGVhc2UgdXNlIGBzdWJzY3JpYmVXaXRoU2VsZWN0b3JgIG1pZGRsZXdhcmVcIik7XG4gICAgbGV0IGN1cnJlbnRTbGljZSA9IHNlbGVjdG9yKHN0YXRlKTtcbiAgICBmdW5jdGlvbiBsaXN0ZW5lclRvQWRkKCkge1xuICAgICAgY29uc3QgbmV4dFNsaWNlID0gc2VsZWN0b3Ioc3RhdGUpO1xuICAgICAgaWYgKCFlcXVhbGl0eUZuKGN1cnJlbnRTbGljZSwgbmV4dFNsaWNlKSkge1xuICAgICAgICBjb25zdCBwcmV2aW91c1NsaWNlID0gY3VycmVudFNsaWNlO1xuICAgICAgICBsaXN0ZW5lcihjdXJyZW50U2xpY2UgPSBuZXh0U2xpY2UsIHByZXZpb3VzU2xpY2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyVG9BZGQpO1xuICAgIHJldHVybiAoKSA9PiBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyVG9BZGQpO1xuICB9O1xuICBjb25zdCBzdWJzY3JpYmUgPSAobGlzdGVuZXIsIHNlbGVjdG9yLCBlcXVhbGl0eUZuKSA9PiB7XG4gICAgaWYgKHNlbGVjdG9yIHx8IGVxdWFsaXR5Rm4pIHtcbiAgICAgIHJldHVybiBzdWJzY3JpYmVXaXRoU2VsZWN0b3IobGlzdGVuZXIsIHNlbGVjdG9yLCBlcXVhbGl0eUZuKTtcbiAgICB9XG4gICAgbGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gICAgcmV0dXJuICgpID0+IGxpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICB9O1xuICBjb25zdCBkZXN0cm95ID0gKCkgPT4gbGlzdGVuZXJzLmNsZWFyKCk7XG4gIGNvbnN0IGFwaSA9IHsgc2V0U3RhdGUsIGdldFN0YXRlLCBzdWJzY3JpYmUsIGRlc3Ryb3kgfTtcbiAgc3RhdGUgPSBjcmVhdGVTdGF0ZShzZXRTdGF0ZSwgZ2V0U3RhdGUsIGFwaSk7XG4gIHJldHVybiBhcGk7XG59XG5cbmNvbnN0IGlzU1NSID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhd2luZG93Lm5hdmlnYXRvciB8fCAvU2VydmVyU2lkZVJlbmRlcmluZ3xeRGVub1xcLy8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5jb25zdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gaXNTU1IgPyB1c2VFZmZlY3QgOiB1c2VMYXlvdXRFZmZlY3Q7XG5mdW5jdGlvbiBjcmVhdGUoY3JlYXRlU3RhdGUpIHtcbiAgY29uc3QgYXBpID0gdHlwZW9mIGNyZWF0ZVN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyBjcmVhdGVTdG9yZShjcmVhdGVTdGF0ZSkgOiBjcmVhdGVTdGF0ZTtcbiAgY29uc3QgdXNlU3RvcmUgPSAoc2VsZWN0b3IgPSBhcGkuZ2V0U3RhdGUsIGVxdWFsaXR5Rm4gPSBPYmplY3QuaXMpID0+IHtcbiAgICBjb25zdCBbLCBmb3JjZVVwZGF0ZV0gPSB1c2VSZWR1Y2VyKChjKSA9PiBjICsgMSwgMCk7XG4gICAgY29uc3Qgc3RhdGUgPSBhcGkuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBzdGF0ZVJlZiA9IHVzZVJlZihzdGF0ZSk7XG4gICAgY29uc3Qgc2VsZWN0b3JSZWYgPSB1c2VSZWYoc2VsZWN0b3IpO1xuICAgIGNvbnN0IGVxdWFsaXR5Rm5SZWYgPSB1c2VSZWYoZXF1YWxpdHlGbik7XG4gICAgY29uc3QgZXJyb3JlZFJlZiA9IHVzZVJlZihmYWxzZSk7XG4gICAgY29uc3QgY3VycmVudFNsaWNlUmVmID0gdXNlUmVmKCk7XG4gICAgaWYgKGN1cnJlbnRTbGljZVJlZi5jdXJyZW50ID09PSB2b2lkIDApIHtcbiAgICAgIGN1cnJlbnRTbGljZVJlZi5jdXJyZW50ID0gc2VsZWN0b3Ioc3RhdGUpO1xuICAgIH1cbiAgICBsZXQgbmV3U3RhdGVTbGljZTtcbiAgICBsZXQgaGFzTmV3U3RhdGVTbGljZSA9IGZhbHNlO1xuICAgIGlmIChzdGF0ZVJlZi5jdXJyZW50ICE9PSBzdGF0ZSB8fCBzZWxlY3RvclJlZi5jdXJyZW50ICE9PSBzZWxlY3RvciB8fCBlcXVhbGl0eUZuUmVmLmN1cnJlbnQgIT09IGVxdWFsaXR5Rm4gfHwgZXJyb3JlZFJlZi5jdXJyZW50KSB7XG4gICAgICBuZXdTdGF0ZVNsaWNlID0gc2VsZWN0b3Ioc3RhdGUpO1xuICAgICAgaGFzTmV3U3RhdGVTbGljZSA9ICFlcXVhbGl0eUZuKGN1cnJlbnRTbGljZVJlZi5jdXJyZW50LCBuZXdTdGF0ZVNsaWNlKTtcbiAgICB9XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoaGFzTmV3U3RhdGVTbGljZSkge1xuICAgICAgICBjdXJyZW50U2xpY2VSZWYuY3VycmVudCA9IG5ld1N0YXRlU2xpY2U7XG4gICAgICB9XG4gICAgICBzdGF0ZVJlZi5jdXJyZW50ID0gc3RhdGU7XG4gICAgICBzZWxlY3RvclJlZi5jdXJyZW50ID0gc2VsZWN0b3I7XG4gICAgICBlcXVhbGl0eUZuUmVmLmN1cnJlbnQgPSBlcXVhbGl0eUZuO1xuICAgICAgZXJyb3JlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgfSk7XG4gICAgY29uc3Qgc3RhdGVCZWZvcmVTdWJzY3JpcHRpb25SZWYgPSB1c2VSZWYoc3RhdGUpO1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgY29uc3QgbGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgbmV4dFN0YXRlID0gYXBpLmdldFN0YXRlKCk7XG4gICAgICAgICAgY29uc3QgbmV4dFN0YXRlU2xpY2UgPSBzZWxlY3RvclJlZi5jdXJyZW50KG5leHRTdGF0ZSk7XG4gICAgICAgICAgaWYgKCFlcXVhbGl0eUZuUmVmLmN1cnJlbnQoY3VycmVudFNsaWNlUmVmLmN1cnJlbnQsIG5leHRTdGF0ZVNsaWNlKSkge1xuICAgICAgICAgICAgc3RhdGVSZWYuY3VycmVudCA9IG5leHRTdGF0ZTtcbiAgICAgICAgICAgIGN1cnJlbnRTbGljZVJlZi5jdXJyZW50ID0gbmV4dFN0YXRlU2xpY2U7XG4gICAgICAgICAgICBmb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBlcnJvcmVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICAgIGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCB1bnN1YnNjcmliZSA9IGFwaS5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgICAgaWYgKGFwaS5nZXRTdGF0ZSgpICE9PSBzdGF0ZUJlZm9yZVN1YnNjcmlwdGlvblJlZi5jdXJyZW50KSB7XG4gICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG4gICAgfSwgW10pO1xuICAgIGNvbnN0IHNsaWNlVG9SZXR1cm4gPSBoYXNOZXdTdGF0ZVNsaWNlID8gbmV3U3RhdGVTbGljZSA6IGN1cnJlbnRTbGljZVJlZi5jdXJyZW50O1xuICAgIHVzZURlYnVnVmFsdWUoc2xpY2VUb1JldHVybik7XG4gICAgcmV0dXJuIHNsaWNlVG9SZXR1cm47XG4gIH07XG4gIE9iamVjdC5hc3NpZ24odXNlU3RvcmUsIGFwaSk7XG4gIHVzZVN0b3JlW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLndhcm4oXCJbdXNlU3RvcmUsIGFwaV0gPSBjcmVhdGUoKSBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjRcIik7XG4gICAgY29uc3QgaXRlbXMgPSBbdXNlU3RvcmUsIGFwaV07XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQoKSB7XG4gICAgICAgIGNvbnN0IGRvbmUgPSBpdGVtcy5sZW5ndGggPD0gMDtcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6IGl0ZW1zLnNoaWZ0KCksIGRvbmUgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICByZXR1cm4gdXNlU3RvcmU7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZSBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@100mslive/react-sdk/node_modules/zustand/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/eventemitter2/lib/eventemitter2.js":
/*!*********************************************************!*\
  !*** ./node_modules/eventemitter2/lib/eventemitter2.js ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * EventEmitter2\n * https://github.com/hij1nx/EventEmitter2\n *\n * Copyright (c) 2013 hij1nx\n * Licensed under the MIT license.\n */\n;!function(undefined) {\n  var hasOwnProperty= Object.hasOwnProperty;\n  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n  };\n  var defaultMaxListeners = 10;\n  var nextTickSupported= typeof process=='object' && typeof process.nextTick=='function';\n  var symbolsSupported= typeof Symbol==='function';\n  var reflectSupported= typeof Reflect === 'object';\n  var setImmediateSupported= typeof setImmediate === 'function';\n  var _setImmediate= setImmediateSupported ? setImmediate : setTimeout;\n  var ownKeys= symbolsSupported? (reflectSupported && typeof Reflect.ownKeys==='function'? Reflect.ownKeys : function(obj){\n    var arr= Object.getOwnPropertyNames(obj);\n    arr.push.apply(arr, Object.getOwnPropertySymbols(obj));\n    return arr;\n  }) : Object.keys;\n\n  function init() {\n    this._events = {};\n    if (this._conf) {\n      configure.call(this, this._conf);\n    }\n  }\n\n  function configure(conf) {\n    if (conf) {\n      this._conf = conf;\n\n      conf.delimiter && (this.delimiter = conf.delimiter);\n\n      if(conf.maxListeners!==undefined){\n          this._maxListeners= conf.maxListeners;\n      }\n\n      conf.wildcard && (this.wildcard = conf.wildcard);\n      conf.newListener && (this._newListener = conf.newListener);\n      conf.removeListener && (this._removeListener = conf.removeListener);\n      conf.verboseMemoryLeak && (this.verboseMemoryLeak = conf.verboseMemoryLeak);\n      conf.ignoreErrors && (this.ignoreErrors = conf.ignoreErrors);\n\n      if (this.wildcard) {\n        this.listenerTree = {};\n      }\n    }\n  }\n\n  function logPossibleMemoryLeak(count, eventName) {\n    var errorMsg = '(node) warning: possible EventEmitter memory ' +\n        'leak detected. ' + count + ' listeners added. ' +\n        'Use emitter.setMaxListeners() to increase limit.';\n\n    if(this.verboseMemoryLeak){\n      errorMsg += ' Event name: ' + eventName + '.';\n    }\n\n    if(typeof process !== 'undefined' && process.emitWarning){\n      var e = new Error(errorMsg);\n      e.name = 'MaxListenersExceededWarning';\n      e.emitter = this;\n      e.count = count;\n      process.emitWarning(e);\n    } else {\n      console.error(errorMsg);\n\n      if (console.trace){\n        console.trace();\n      }\n    }\n  }\n\n  var toArray = function (a, b, c) {\n    var n = arguments.length;\n    switch (n) {\n      case 0:\n        return [];\n      case 1:\n        return [a];\n      case 2:\n        return [a, b];\n      case 3:\n        return [a, b, c];\n      default:\n        var arr = new Array(n);\n        while (n--) {\n          arr[n] = arguments[n];\n        }\n        return arr;\n    }\n  };\n\n  function toObject(keys, values) {\n    var obj = {};\n    var key;\n    var len = keys.length;\n    var valuesCount = values ? values.length : 0;\n    for (var i = 0; i < len; i++) {\n      key = keys[i];\n      obj[key] = i < valuesCount ? values[i] : undefined;\n    }\n    return obj;\n  }\n\n  function TargetObserver(emitter, target, options) {\n    this._emitter = emitter;\n    this._target = target;\n    this._listeners = {};\n    this._listenersCount = 0;\n\n    var on, off;\n\n    if (options.on || options.off) {\n      on = options.on;\n      off = options.off;\n    }\n\n    if (target.addEventListener) {\n      on = target.addEventListener;\n      off = target.removeEventListener;\n    } else if (target.addListener) {\n      on = target.addListener;\n      off = target.removeListener;\n    } else if (target.on) {\n      on = target.on;\n      off = target.off;\n    }\n\n    if (!on && !off) {\n      throw Error('target does not implement any known event API');\n    }\n\n    if (typeof on !== 'function') {\n      throw TypeError('on method must be a function');\n    }\n\n    if (typeof off !== 'function') {\n      throw TypeError('off method must be a function');\n    }\n\n    this._on = on;\n    this._off = off;\n\n    var _observers= emitter._observers;\n    if(_observers){\n      _observers.push(this);\n    }else{\n      emitter._observers= [this];\n    }\n  }\n\n  Object.assign(TargetObserver.prototype, {\n    subscribe: function(event, localEvent, reducer){\n      var observer= this;\n      var target= this._target;\n      var emitter= this._emitter;\n      var listeners= this._listeners;\n      var handler= function(){\n        var args= toArray.apply(null, arguments);\n        var eventObj= {\n          data: args,\n          name: localEvent,\n          original: event\n        };\n        if(reducer){\n          var result= reducer.call(target, eventObj);\n          if(result!==false){\n            emitter.emit.apply(emitter, [eventObj.name].concat(args))\n          }\n          return;\n        }\n        emitter.emit.apply(emitter, [localEvent].concat(args));\n      };\n\n\n      if(listeners[event]){\n        throw Error('Event \\'' + event + '\\' is already listening');\n      }\n\n      this._listenersCount++;\n\n      if(emitter._newListener && emitter._removeListener && !observer._onNewListener){\n\n        this._onNewListener = function (_event) {\n          if (_event === localEvent && listeners[event] === null) {\n            listeners[event] = handler;\n            observer._on.call(target, event, handler);\n          }\n        };\n\n        emitter.on('newListener', this._onNewListener);\n\n        this._onRemoveListener= function(_event){\n          if(_event === localEvent && !emitter.hasListeners(_event) && listeners[event]){\n            listeners[event]= null;\n            observer._off.call(target, event, handler);\n          }\n        };\n\n        listeners[event]= null;\n\n        emitter.on('removeListener', this._onRemoveListener);\n      }else{\n        listeners[event]= handler;\n        observer._on.call(target, event, handler);\n      }\n    },\n\n    unsubscribe: function(event){\n      var observer= this;\n      var listeners= this._listeners;\n      var emitter= this._emitter;\n      var handler;\n      var events;\n      var off= this._off;\n      var target= this._target;\n      var i;\n\n      if(event && typeof event!=='string'){\n        throw TypeError('event must be a string');\n      }\n\n      function clearRefs(){\n        if(observer._onNewListener){\n          emitter.off('newListener', observer._onNewListener);\n          emitter.off('removeListener', observer._onRemoveListener);\n          observer._onNewListener= null;\n          observer._onRemoveListener= null;\n        }\n        var index= findTargetIndex.call(emitter, observer);\n        emitter._observers.splice(index, 1);\n      }\n\n      if(event){\n        handler= listeners[event];\n        if(!handler) return;\n        off.call(target, event, handler);\n        delete listeners[event];\n        if(!--this._listenersCount){\n          clearRefs();\n        }\n      }else{\n        events= ownKeys(listeners);\n        i= events.length;\n        while(i-->0){\n          event= events[i];\n          off.call(target, event, listeners[event]);\n        }\n        this._listeners= {};\n        this._listenersCount= 0;\n        clearRefs();\n      }\n    }\n  });\n\n  function resolveOptions(options, schema, reducers, allowUnknown) {\n    var computedOptions = Object.assign({}, schema);\n\n    if (!options) return computedOptions;\n\n    if (typeof options !== 'object') {\n      throw TypeError('options must be an object')\n    }\n\n    var keys = Object.keys(options);\n    var length = keys.length;\n    var option, value;\n    var reducer;\n\n    function reject(reason) {\n      throw Error('Invalid \"' + option + '\" option value' + (reason ? '. Reason: ' + reason : ''))\n    }\n\n    for (var i = 0; i < length; i++) {\n      option = keys[i];\n      if (!allowUnknown && !hasOwnProperty.call(schema, option)) {\n        throw Error('Unknown \"' + option + '\" option');\n      }\n      value = options[option];\n      if (value !== undefined) {\n        reducer = reducers[option];\n        computedOptions[option] = reducer ? reducer(value, reject) : value;\n      }\n    }\n    return computedOptions;\n  }\n\n  function constructorReducer(value, reject) {\n    if (typeof value !== 'function' || !value.hasOwnProperty('prototype')) {\n      reject('value must be a constructor');\n    }\n    return value;\n  }\n\n  function makeTypeReducer(types) {\n    var message= 'value must be type of ' + types.join('|');\n    var len= types.length;\n    var firstType= types[0];\n    var secondType= types[1];\n\n    if (len === 1) {\n      return function (v, reject) {\n        if (typeof v === firstType) {\n          return v;\n        }\n        reject(message);\n      }\n    }\n\n    if (len === 2) {\n      return function (v, reject) {\n        var kind= typeof v;\n        if (kind === firstType || kind === secondType) return v;\n        reject(message);\n      }\n    }\n\n    return function (v, reject) {\n      var kind = typeof v;\n      var i = len;\n      while (i-- > 0) {\n        if (kind === types[i]) return v;\n      }\n      reject(message);\n    }\n  }\n\n  var functionReducer= makeTypeReducer(['function']);\n\n  var objectFunctionReducer= makeTypeReducer(['object', 'function']);\n\n  function makeCancelablePromise(Promise, executor, options) {\n    var isCancelable;\n    var callbacks;\n    var timer= 0;\n    var subscriptionClosed;\n\n    var promise = new Promise(function (resolve, reject, onCancel) {\n      options= resolveOptions(options, {\n        timeout: 0,\n        overload: false\n      }, {\n        timeout: function(value, reject){\n          value*= 1;\n          if (typeof value !== 'number' || value < 0 || !Number.isFinite(value)) {\n            reject('timeout must be a positive number');\n          }\n          return value;\n        }\n      });\n\n      isCancelable = !options.overload && typeof Promise.prototype.cancel === 'function' && typeof onCancel === 'function';\n\n      function cleanup() {\n        if (callbacks) {\n          callbacks = null;\n        }\n        if (timer) {\n          clearTimeout(timer);\n          timer = 0;\n        }\n      }\n\n      var _resolve= function(value){\n        cleanup();\n        resolve(value);\n      };\n\n      var _reject= function(err){\n        cleanup();\n        reject(err);\n      };\n\n      if (isCancelable) {\n        executor(_resolve, _reject, onCancel);\n      } else {\n        callbacks = [function(reason){\n          _reject(reason || Error('canceled'));\n        }];\n        executor(_resolve, _reject, function (cb) {\n          if (subscriptionClosed) {\n            throw Error('Unable to subscribe on cancel event asynchronously')\n          }\n          if (typeof cb !== 'function') {\n            throw TypeError('onCancel callback must be a function');\n          }\n          callbacks.push(cb);\n        });\n        subscriptionClosed= true;\n      }\n\n      if (options.timeout > 0) {\n        timer= setTimeout(function(){\n          var reason= Error('timeout');\n          reason.code = 'ETIMEDOUT'\n          timer= 0;\n          promise.cancel(reason);\n          reject(reason);\n        }, options.timeout);\n      }\n    });\n\n    if (!isCancelable) {\n      promise.cancel = function (reason) {\n        if (!callbacks) {\n          return;\n        }\n        var length = callbacks.length;\n        for (var i = 1; i < length; i++) {\n          callbacks[i](reason);\n        }\n        // internal callback to reject the promise\n        callbacks[0](reason);\n        callbacks = null;\n      };\n    }\n\n    return promise;\n  }\n\n  function findTargetIndex(observer) {\n    var observers = this._observers;\n    if(!observers){\n      return -1;\n    }\n    var len = observers.length;\n    for (var i = 0; i < len; i++) {\n      if (observers[i]._target === observer) return i;\n    }\n    return -1;\n  }\n\n  // Attention, function return type now is array, always !\n  // It has zero elements if no any matches found and one or more\n  // elements (leafs) if there are matches\n  //\n  function searchListenerTree(handlers, type, tree, i, typeLength) {\n    if (!tree) {\n      return null;\n    }\n\n    if (i === 0) {\n      var kind = typeof type;\n      if (kind === 'string') {\n        var ns, n, l = 0, j = 0, delimiter = this.delimiter, dl = delimiter.length;\n        if ((n = type.indexOf(delimiter)) !== -1) {\n          ns = new Array(5);\n          do {\n            ns[l++] = type.slice(j, n);\n            j = n + dl;\n          } while ((n = type.indexOf(delimiter, j)) !== -1);\n\n          ns[l++] = type.slice(j);\n          type = ns;\n          typeLength = l;\n        } else {\n          type = [type];\n          typeLength = 1;\n        }\n      } else if (kind === 'object') {\n        typeLength = type.length;\n      } else {\n        type = [type];\n        typeLength = 1;\n      }\n    }\n\n    var listeners= null, branch, xTree, xxTree, isolatedBranch, endReached, currentType = type[i],\n        nextType = type[i + 1], branches, _listeners;\n\n    if (i === typeLength) {\n      //\n      // If at the end of the event(s) list and the tree has listeners\n      // invoke those listeners.\n      //\n\n      if(tree._listeners) {\n        if (typeof tree._listeners === 'function') {\n          handlers && handlers.push(tree._listeners);\n          listeners = [tree];\n        } else {\n          handlers && handlers.push.apply(handlers, tree._listeners);\n          listeners = [tree];\n        }\n      }\n    } else {\n\n      if (currentType === '*') {\n        //\n        // If the event emitted is '*' at this part\n        // or there is a concrete match at this patch\n        //\n        branches = ownKeys(tree);\n        n = branches.length;\n        while (n-- > 0) {\n          branch = branches[n];\n          if (branch !== '_listeners') {\n            _listeners = searchListenerTree(handlers, type, tree[branch], i + 1, typeLength);\n            if (_listeners) {\n              if (listeners) {\n                listeners.push.apply(listeners, _listeners);\n              } else {\n                listeners = _listeners;\n              }\n            }\n          }\n        }\n        return listeners;\n      } else if (currentType === '**') {\n        endReached = (i + 1 === typeLength || (i + 2 === typeLength && nextType === '*'));\n        if (endReached && tree._listeners) {\n          // The next element has a _listeners, add it to the handlers.\n          listeners = searchListenerTree(handlers, type, tree, typeLength, typeLength);\n        }\n\n        branches = ownKeys(tree);\n        n = branches.length;\n        while (n-- > 0) {\n          branch = branches[n];\n          if (branch !== '_listeners') {\n            if (branch === '*' || branch === '**') {\n              if (tree[branch]._listeners && !endReached) {\n                _listeners = searchListenerTree(handlers, type, tree[branch], typeLength, typeLength);\n                if (_listeners) {\n                  if (listeners) {\n                    listeners.push.apply(listeners, _listeners);\n                  } else {\n                    listeners = _listeners;\n                  }\n                }\n              }\n              _listeners = searchListenerTree(handlers, type, tree[branch], i, typeLength);\n            } else if (branch === nextType) {\n              _listeners = searchListenerTree(handlers, type, tree[branch], i + 2, typeLength);\n            } else {\n              // No match on this one, shift into the tree but not in the type array.\n              _listeners = searchListenerTree(handlers, type, tree[branch], i, typeLength);\n            }\n            if (_listeners) {\n              if (listeners) {\n                listeners.push.apply(listeners, _listeners);\n              } else {\n                listeners = _listeners;\n              }\n            }\n          }\n        }\n        return listeners;\n      } else if (tree[currentType]) {\n        listeners = searchListenerTree(handlers, type, tree[currentType], i + 1, typeLength);\n      }\n    }\n\n      xTree = tree['*'];\n    if (xTree) {\n      //\n      // If the listener tree will allow any match for this part,\n      // then recursively explore all branches of the tree\n      //\n      searchListenerTree(handlers, type, xTree, i + 1, typeLength);\n    }\n\n    xxTree = tree['**'];\n    if (xxTree) {\n      if (i < typeLength) {\n        if (xxTree._listeners) {\n          // If we have a listener on a '**', it will catch all, so add its handler.\n          searchListenerTree(handlers, type, xxTree, typeLength, typeLength);\n        }\n\n        // Build arrays of matching next branches and others.\n        branches= ownKeys(xxTree);\n        n= branches.length;\n        while(n-->0){\n          branch= branches[n];\n          if (branch !== '_listeners') {\n            if (branch === nextType) {\n              // We know the next element will match, so jump twice.\n              searchListenerTree(handlers, type, xxTree[branch], i + 2, typeLength);\n            } else if (branch === currentType) {\n              // Current node matches, move into the tree.\n              searchListenerTree(handlers, type, xxTree[branch], i + 1, typeLength);\n            } else {\n              isolatedBranch = {};\n              isolatedBranch[branch] = xxTree[branch];\n              searchListenerTree(handlers, type, {'**': isolatedBranch}, i + 1, typeLength);\n            }\n          }\n        }\n      } else if (xxTree._listeners) {\n        // We have reached the end and still on a '**'\n        searchListenerTree(handlers, type, xxTree, typeLength, typeLength);\n      } else if (xxTree['*'] && xxTree['*']._listeners) {\n        searchListenerTree(handlers, type, xxTree['*'], typeLength, typeLength);\n      }\n    }\n\n    return listeners;\n  }\n\n  function growListenerTree(type, listener, prepend) {\n    var len = 0, j = 0, i, delimiter = this.delimiter, dl= delimiter.length, ns;\n\n    if(typeof type==='string') {\n      if ((i = type.indexOf(delimiter)) !== -1) {\n        ns = new Array(5);\n        do {\n          ns[len++] = type.slice(j, i);\n          j = i + dl;\n        } while ((i = type.indexOf(delimiter, j)) !== -1);\n\n        ns[len++] = type.slice(j);\n      }else{\n        ns= [type];\n        len= 1;\n      }\n    }else{\n      ns= type;\n      len= type.length;\n    }\n\n    //\n    // Looks for two consecutive '**', if so, don't add the event at all.\n    //\n    if (len > 1) {\n      for (i = 0; i + 1 < len; i++) {\n        if (ns[i] === '**' && ns[i + 1] === '**') {\n          return;\n        }\n      }\n    }\n\n\n\n    var tree = this.listenerTree, name;\n\n    for (i = 0; i < len; i++) {\n      name = ns[i];\n\n      tree = tree[name] || (tree[name] = {});\n\n      if (i === len - 1) {\n        if (!tree._listeners) {\n          tree._listeners = listener;\n        } else {\n          if (typeof tree._listeners === 'function') {\n            tree._listeners = [tree._listeners];\n          }\n\n          if (prepend) {\n            tree._listeners.unshift(listener);\n          } else {\n            tree._listeners.push(listener);\n          }\n\n          if (\n              !tree._listeners.warned &&\n              this._maxListeners > 0 &&\n              tree._listeners.length > this._maxListeners\n          ) {\n            tree._listeners.warned = true;\n            logPossibleMemoryLeak.call(this, tree._listeners.length, name);\n          }\n        }\n        return true;\n      }\n    }\n\n    return true;\n  }\n\n  function collectTreeEvents(tree, events, root, asArray){\n     var branches= ownKeys(tree);\n     var i= branches.length;\n     var branch, branchName, path;\n     var hasListeners= tree['_listeners'];\n     var isArrayPath;\n\n     while(i-->0){\n         branchName= branches[i];\n\n         branch= tree[branchName];\n\n         if(branchName==='_listeners'){\n             path= root;\n         }else {\n             path = root ? root.concat(branchName) : [branchName];\n         }\n\n         isArrayPath= asArray || typeof branchName==='symbol';\n\n         hasListeners && events.push(isArrayPath? path : path.join(this.delimiter));\n\n         if(typeof branch==='object'){\n             collectTreeEvents.call(this, branch, events, path, isArrayPath);\n         }\n     }\n\n     return events;\n  }\n\n  function recursivelyGarbageCollect(root) {\n    var keys = ownKeys(root);\n    var i= keys.length;\n    var obj, key, flag;\n    while(i-->0){\n      key = keys[i];\n      obj = root[key];\n\n      if(obj){\n          flag= true;\n          if(key !== '_listeners' && !recursivelyGarbageCollect(obj)){\n             delete root[key];\n          }\n      }\n    }\n\n    return flag;\n  }\n\n  function Listener(emitter, event, listener){\n    this.emitter= emitter;\n    this.event= event;\n    this.listener= listener;\n  }\n\n  Listener.prototype.off= function(){\n    this.emitter.off(this.event, this.listener);\n    return this;\n  };\n\n  function setupListener(event, listener, options){\n      if (options === true) {\n        promisify = true;\n      } else if (options === false) {\n        async = true;\n      } else {\n        if (!options || typeof options !== 'object') {\n          throw TypeError('options should be an object or true');\n        }\n        var async = options.async;\n        var promisify = options.promisify;\n        var nextTick = options.nextTick;\n        var objectify = options.objectify;\n      }\n\n      if (async || nextTick || promisify) {\n        var _listener = listener;\n        var _origin = listener._origin || listener;\n\n        if (nextTick && !nextTickSupported) {\n          throw Error('process.nextTick is not supported');\n        }\n\n        if (promisify === undefined) {\n          promisify = listener.constructor.name === 'AsyncFunction';\n        }\n\n        listener = function () {\n          var args = arguments;\n          var context = this;\n          var event = this.event;\n\n          return promisify ? (nextTick ? Promise.resolve() : new Promise(function (resolve) {\n            _setImmediate(resolve);\n          }).then(function () {\n            context.event = event;\n            return _listener.apply(context, args)\n          })) : (nextTick ? process.nextTick : _setImmediate)(function () {\n            context.event = event;\n            _listener.apply(context, args)\n          });\n        };\n\n        listener._async = true;\n        listener._origin = _origin;\n      }\n\n    return [listener, objectify? new Listener(this, event, listener): this];\n  }\n\n  function EventEmitter(conf) {\n    this._events = {};\n    this._newListener = false;\n    this._removeListener = false;\n    this.verboseMemoryLeak = false;\n    configure.call(this, conf);\n  }\n\n  EventEmitter.EventEmitter2 = EventEmitter; // backwards compatibility for exporting EventEmitter property\n\n  EventEmitter.prototype.listenTo= function(target, events, options){\n    if(typeof target!=='object'){\n      throw TypeError('target musts be an object');\n    }\n\n    var emitter= this;\n\n    options = resolveOptions(options, {\n      on: undefined,\n      off: undefined,\n      reducers: undefined\n    }, {\n      on: functionReducer,\n      off: functionReducer,\n      reducers: objectFunctionReducer\n    });\n\n    function listen(events){\n      if(typeof events!=='object'){\n        throw TypeError('events must be an object');\n      }\n\n      var reducers= options.reducers;\n      var index= findTargetIndex.call(emitter, target);\n      var observer;\n\n      if(index===-1){\n        observer= new TargetObserver(emitter, target, options);\n      }else{\n        observer= emitter._observers[index];\n      }\n\n      var keys= ownKeys(events);\n      var len= keys.length;\n      var event;\n      var isSingleReducer= typeof reducers==='function';\n\n      for(var i=0; i<len; i++){\n        event= keys[i];\n        observer.subscribe(\n            event,\n            events[event] || event,\n            isSingleReducer ? reducers : reducers && reducers[event]\n        );\n      }\n    }\n\n    isArray(events)?\n        listen(toObject(events)) :\n        (typeof events==='string'? listen(toObject(events.split(/\\s+/))): listen(events));\n\n    return this;\n  };\n\n  EventEmitter.prototype.stopListeningTo = function (target, event) {\n    var observers = this._observers;\n\n    if(!observers){\n      return false;\n    }\n\n    var i = observers.length;\n    var observer;\n    var matched= false;\n\n    if(target && typeof target!=='object'){\n      throw TypeError('target should be an object');\n    }\n\n    while (i-- > 0) {\n      observer = observers[i];\n      if (!target || observer._target === target) {\n        observer.unsubscribe(event);\n        matched= true;\n      }\n    }\n\n    return matched;\n  };\n\n  // By default EventEmitters will print a warning if more than\n  // 10 listeners are added to it. This is a useful default which\n  // helps finding memory leaks.\n  //\n  // Obviously not all Emitters should be limited to 10. This function allows\n  // that to be increased. Set to zero for unlimited.\n\n  EventEmitter.prototype.delimiter = '.';\n\n  EventEmitter.prototype.setMaxListeners = function(n) {\n    if (n !== undefined) {\n      this._maxListeners = n;\n      if (!this._conf) this._conf = {};\n      this._conf.maxListeners = n;\n    }\n  };\n\n  EventEmitter.prototype.getMaxListeners = function() {\n    return this._maxListeners;\n  };\n\n  EventEmitter.prototype.event = '';\n\n  EventEmitter.prototype.once = function(event, fn, options) {\n    return this._once(event, fn, false, options);\n  };\n\n  EventEmitter.prototype.prependOnceListener = function(event, fn, options) {\n    return this._once(event, fn, true, options);\n  };\n\n  EventEmitter.prototype._once = function(event, fn, prepend, options) {\n    return this._many(event, 1, fn, prepend, options);\n  };\n\n  EventEmitter.prototype.many = function(event, ttl, fn, options) {\n    return this._many(event, ttl, fn, false, options);\n  };\n\n  EventEmitter.prototype.prependMany = function(event, ttl, fn, options) {\n    return this._many(event, ttl, fn, true, options);\n  };\n\n  EventEmitter.prototype._many = function(event, ttl, fn, prepend, options) {\n    var self = this;\n\n    if (typeof fn !== 'function') {\n      throw new Error('many only accepts instances of Function');\n    }\n\n    function listener() {\n      if (--ttl === 0) {\n        self.off(event, listener);\n      }\n      return fn.apply(this, arguments);\n    }\n\n    listener._origin = fn;\n\n    return this._on(event, listener, prepend, options);\n  };\n\n  EventEmitter.prototype.emit = function() {\n    if (!this._events && !this._all) {\n      return false;\n    }\n\n    this._events || init.call(this);\n\n    var type = arguments[0], ns, wildcard= this.wildcard;\n    var args,l,i,j, containsSymbol;\n\n    if (type === 'newListener' && !this._newListener) {\n      if (!this._events.newListener) {\n        return false;\n      }\n    }\n\n    if (wildcard) {\n      ns= type;\n      if(type!=='newListener' && type!=='removeListener'){\n        if (typeof type === 'object') {\n          l = type.length;\n          if (symbolsSupported) {\n            for (i = 0; i < l; i++) {\n              if (typeof type[i] === 'symbol') {\n                containsSymbol = true;\n                break;\n              }\n            }\n          }\n          if (!containsSymbol) {\n            type = type.join(this.delimiter);\n          }\n        }\n      }\n    }\n\n    var al = arguments.length;\n    var handler;\n\n    if (this._all && this._all.length) {\n      handler = this._all.slice();\n\n      for (i = 0, l = handler.length; i < l; i++) {\n        this.event = type;\n        switch (al) {\n        case 1:\n          handler[i].call(this, type);\n          break;\n        case 2:\n          handler[i].call(this, type, arguments[1]);\n          break;\n        case 3:\n          handler[i].call(this, type, arguments[1], arguments[2]);\n          break;\n        default:\n          handler[i].apply(this, arguments);\n        }\n      }\n    }\n\n    if (wildcard) {\n      handler = [];\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0, l);\n    } else {\n      handler = this._events[type];\n      if (typeof handler === 'function') {\n        this.event = type;\n        switch (al) {\n        case 1:\n          handler.call(this);\n          break;\n        case 2:\n          handler.call(this, arguments[1]);\n          break;\n        case 3:\n          handler.call(this, arguments[1], arguments[2]);\n          break;\n        default:\n          args = new Array(al - 1);\n          for (j = 1; j < al; j++) args[j - 1] = arguments[j];\n          handler.apply(this, args);\n        }\n        return true;\n      } else if (handler) {\n        // need to make copy of handlers because list can change in the middle\n        // of emit call\n        handler = handler.slice();\n      }\n    }\n\n    if (handler && handler.length) {\n      if (al > 3) {\n        args = new Array(al - 1);\n        for (j = 1; j < al; j++) args[j - 1] = arguments[j];\n      }\n      for (i = 0, l = handler.length; i < l; i++) {\n        this.event = type;\n        switch (al) {\n        case 1:\n          handler[i].call(this);\n          break;\n        case 2:\n          handler[i].call(this, arguments[1]);\n          break;\n        case 3:\n          handler[i].call(this, arguments[1], arguments[2]);\n          break;\n        default:\n          handler[i].apply(this, args);\n        }\n      }\n      return true;\n    } else if (!this.ignoreErrors && !this._all && type === 'error') {\n      if (arguments[1] instanceof Error) {\n        throw arguments[1]; // Unhandled 'error' event\n      } else {\n        throw new Error(\"Uncaught, unspecified 'error' event.\");\n      }\n    }\n\n    return !!this._all;\n  };\n\n  EventEmitter.prototype.emitAsync = function() {\n    if (!this._events && !this._all) {\n      return false;\n    }\n\n    this._events || init.call(this);\n\n    var type = arguments[0], wildcard= this.wildcard, ns, containsSymbol;\n    var args,l,i,j;\n\n    if (type === 'newListener' && !this._newListener) {\n        if (!this._events.newListener) { return Promise.resolve([false]); }\n    }\n\n    if (wildcard) {\n      ns= type;\n      if(type!=='newListener' && type!=='removeListener'){\n        if (typeof type === 'object') {\n          l = type.length;\n          if (symbolsSupported) {\n            for (i = 0; i < l; i++) {\n              if (typeof type[i] === 'symbol') {\n                containsSymbol = true;\n                break;\n              }\n            }\n          }\n          if (!containsSymbol) {\n            type = type.join(this.delimiter);\n          }\n        }\n      }\n    }\n\n    var promises= [];\n\n    var al = arguments.length;\n    var handler;\n\n    if (this._all) {\n      for (i = 0, l = this._all.length; i < l; i++) {\n        this.event = type;\n        switch (al) {\n        case 1:\n          promises.push(this._all[i].call(this, type));\n          break;\n        case 2:\n          promises.push(this._all[i].call(this, type, arguments[1]));\n          break;\n        case 3:\n          promises.push(this._all[i].call(this, type, arguments[1], arguments[2]));\n          break;\n        default:\n          promises.push(this._all[i].apply(this, arguments));\n        }\n      }\n    }\n\n    if (wildcard) {\n      handler = [];\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n    } else {\n      handler = this._events[type];\n    }\n\n    if (typeof handler === 'function') {\n      this.event = type;\n      switch (al) {\n      case 1:\n        promises.push(handler.call(this));\n        break;\n      case 2:\n        promises.push(handler.call(this, arguments[1]));\n        break;\n      case 3:\n        promises.push(handler.call(this, arguments[1], arguments[2]));\n        break;\n      default:\n        args = new Array(al - 1);\n        for (j = 1; j < al; j++) args[j - 1] = arguments[j];\n        promises.push(handler.apply(this, args));\n      }\n    } else if (handler && handler.length) {\n      handler = handler.slice();\n      if (al > 3) {\n        args = new Array(al - 1);\n        for (j = 1; j < al; j++) args[j - 1] = arguments[j];\n      }\n      for (i = 0, l = handler.length; i < l; i++) {\n        this.event = type;\n        switch (al) {\n        case 1:\n          promises.push(handler[i].call(this));\n          break;\n        case 2:\n          promises.push(handler[i].call(this, arguments[1]));\n          break;\n        case 3:\n          promises.push(handler[i].call(this, arguments[1], arguments[2]));\n          break;\n        default:\n          promises.push(handler[i].apply(this, args));\n        }\n      }\n    } else if (!this.ignoreErrors && !this._all && type === 'error') {\n      if (arguments[1] instanceof Error) {\n        return Promise.reject(arguments[1]); // Unhandled 'error' event\n      } else {\n        return Promise.reject(\"Uncaught, unspecified 'error' event.\");\n      }\n    }\n\n    return Promise.all(promises);\n  };\n\n  EventEmitter.prototype.on = function(type, listener, options) {\n    return this._on(type, listener, false, options);\n  };\n\n  EventEmitter.prototype.prependListener = function(type, listener, options) {\n    return this._on(type, listener, true, options);\n  };\n\n  EventEmitter.prototype.onAny = function(fn) {\n    return this._onAny(fn, false);\n  };\n\n  EventEmitter.prototype.prependAny = function(fn) {\n    return this._onAny(fn, true);\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  EventEmitter.prototype._onAny = function(fn, prepend){\n    if (typeof fn !== 'function') {\n      throw new Error('onAny only accepts instances of Function');\n    }\n\n    if (!this._all) {\n      this._all = [];\n    }\n\n    // Add the function to the event listener collection.\n    if(prepend){\n      this._all.unshift(fn);\n    }else{\n      this._all.push(fn);\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype._on = function(type, listener, prepend, options) {\n    if (typeof type === 'function') {\n      this._onAny(type, listener);\n      return this;\n    }\n\n    if (typeof listener !== 'function') {\n      throw new Error('on only accepts instances of Function');\n    }\n    this._events || init.call(this);\n\n    var returnValue= this, temp;\n\n    if (options !== undefined) {\n      temp = setupListener.call(this, type, listener, options);\n      listener = temp[0];\n      returnValue = temp[1];\n    }\n\n    // To avoid recursion in the case that type == \"newListeners\"! Before\n    // adding it to the listeners, first emit \"newListeners\".\n    if (this._newListener) {\n      this.emit('newListener', type, listener);\n    }\n\n    if (this.wildcard) {\n      growListenerTree.call(this, type, listener, prepend);\n      return returnValue;\n    }\n\n    if (!this._events[type]) {\n      // Optimize the case of one listener. Don't need the extra array object.\n      this._events[type] = listener;\n    } else {\n      if (typeof this._events[type] === 'function') {\n        // Change to array.\n        this._events[type] = [this._events[type]];\n      }\n\n      // If we've already got an array, just add\n      if(prepend){\n        this._events[type].unshift(listener);\n      }else{\n        this._events[type].push(listener);\n      }\n\n      // Check for listener leak\n      if (\n        !this._events[type].warned &&\n        this._maxListeners > 0 &&\n        this._events[type].length > this._maxListeners\n      ) {\n        this._events[type].warned = true;\n        logPossibleMemoryLeak.call(this, this._events[type].length, type);\n      }\n    }\n\n    return returnValue;\n  };\n\n  EventEmitter.prototype.off = function(type, listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('removeListener only takes instances of Function');\n    }\n\n    var handlers,leafs=[];\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n      if(!leafs) return this;\n    } else {\n      // does not use listeners(), so no side effect of creating _events[type]\n      if (!this._events[type]) return this;\n      handlers = this._events[type];\n      leafs.push({_listeners:handlers});\n    }\n\n    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n      var leaf = leafs[iLeaf];\n      handlers = leaf._listeners;\n      if (isArray(handlers)) {\n\n        var position = -1;\n\n        for (var i = 0, length = handlers.length; i < length; i++) {\n          if (handlers[i] === listener ||\n            (handlers[i].listener && handlers[i].listener === listener) ||\n            (handlers[i]._origin && handlers[i]._origin === listener)) {\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0) {\n          continue;\n        }\n\n        if(this.wildcard) {\n          leaf._listeners.splice(position, 1);\n        }\n        else {\n          this._events[type].splice(position, 1);\n        }\n\n        if (handlers.length === 0) {\n          if(this.wildcard) {\n            delete leaf._listeners;\n          }\n          else {\n            delete this._events[type];\n          }\n        }\n        if (this._removeListener)\n          this.emit(\"removeListener\", type, listener);\n\n        return this;\n      }\n      else if (handlers === listener ||\n        (handlers.listener && handlers.listener === listener) ||\n        (handlers._origin && handlers._origin === listener)) {\n        if(this.wildcard) {\n          delete leaf._listeners;\n        }\n        else {\n          delete this._events[type];\n        }\n        if (this._removeListener)\n          this.emit(\"removeListener\", type, listener);\n      }\n    }\n\n    this.listenerTree && recursivelyGarbageCollect(this.listenerTree);\n\n    return this;\n  };\n\n  EventEmitter.prototype.offAny = function(fn) {\n    var i = 0, l = 0, fns;\n    if (fn && this._all && this._all.length > 0) {\n      fns = this._all;\n      for(i = 0, l = fns.length; i < l; i++) {\n        if(fn === fns[i]) {\n          fns.splice(i, 1);\n          if (this._removeListener)\n            this.emit(\"removeListenerAny\", fn);\n          return this;\n        }\n      }\n    } else {\n      fns = this._all;\n      if (this._removeListener) {\n        for(i = 0, l = fns.length; i < l; i++)\n          this.emit(\"removeListenerAny\", fns[i]);\n      }\n      this._all = [];\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\n  EventEmitter.prototype.removeAllListeners = function (type) {\n    if (type === undefined) {\n      !this._events || init.call(this);\n      return this;\n    }\n\n    if (this.wildcard) {\n      var leafs = searchListenerTree.call(this, null, type, this.listenerTree, 0), leaf, i;\n      if (!leafs) return this;\n      for (i = 0; i < leafs.length; i++) {\n        leaf = leafs[i];\n        leaf._listeners = null;\n      }\n      this.listenerTree && recursivelyGarbageCollect(this.listenerTree);\n    } else if (this._events) {\n      this._events[type] = null;\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.listeners = function (type) {\n    var _events = this._events;\n    var keys, listeners, allListeners;\n    var i;\n    var listenerTree;\n\n    if (type === undefined) {\n      if (this.wildcard) {\n        throw Error('event name required for wildcard emitter');\n      }\n\n      if (!_events) {\n        return [];\n      }\n\n      keys = ownKeys(_events);\n      i = keys.length;\n      allListeners = [];\n      while (i-- > 0) {\n        listeners = _events[keys[i]];\n        if (typeof listeners === 'function') {\n          allListeners.push(listeners);\n        } else {\n          allListeners.push.apply(allListeners, listeners);\n        }\n      }\n      return allListeners;\n    } else {\n      if (this.wildcard) {\n        listenerTree= this.listenerTree;\n        if(!listenerTree) return [];\n        var handlers = [];\n        var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n        searchListenerTree.call(this, handlers, ns, listenerTree, 0);\n        return handlers;\n      }\n\n      if (!_events) {\n        return [];\n      }\n\n      listeners = _events[type];\n\n      if (!listeners) {\n        return [];\n      }\n      return typeof listeners === 'function' ? [listeners] : listeners;\n    }\n  };\n\n  EventEmitter.prototype.eventNames = function(nsAsArray){\n    var _events= this._events;\n    return this.wildcard? collectTreeEvents.call(this, this.listenerTree, [], null, nsAsArray) : (_events? ownKeys(_events) : []);\n  };\n\n  EventEmitter.prototype.listenerCount = function(type) {\n    return this.listeners(type).length;\n  };\n\n  EventEmitter.prototype.hasListeners = function (type) {\n    if (this.wildcard) {\n      var handlers = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n      return handlers.length > 0;\n    }\n\n    var _events = this._events;\n    var _all = this._all;\n\n    return !!(_all && _all.length || _events && (type === undefined ? ownKeys(_events).length : _events[type]));\n  };\n\n  EventEmitter.prototype.listenersAny = function() {\n\n    if(this._all) {\n      return this._all;\n    }\n    else {\n      return [];\n    }\n\n  };\n\n  EventEmitter.prototype.waitFor = function (event, options) {\n    var self = this;\n    var type = typeof options;\n    if (type === 'number') {\n      options = {timeout: options};\n    } else if (type === 'function') {\n      options = {filter: options};\n    }\n\n    options= resolveOptions(options, {\n      timeout: 0,\n      filter: undefined,\n      handleError: false,\n      Promise: Promise,\n      overload: false\n    }, {\n      filter: functionReducer,\n      Promise: constructorReducer\n    });\n\n    return makeCancelablePromise(options.Promise, function (resolve, reject, onCancel) {\n      function listener() {\n        var filter= options.filter;\n        if (filter && !filter.apply(self, arguments)) {\n          return;\n        }\n        self.off(event, listener);\n        if (options.handleError) {\n          var err = arguments[0];\n          err ? reject(err) : resolve(toArray.apply(null, arguments).slice(1));\n        } else {\n          resolve(toArray.apply(null, arguments));\n        }\n      }\n\n      onCancel(function(){\n        self.off(event, listener);\n      });\n\n      self._on(event, listener, false);\n    }, {\n      timeout: options.timeout,\n      overload: options.overload\n    })\n  };\n\n  function once(emitter, name, options) {\n    options= resolveOptions(options, {\n      Promise: Promise,\n      timeout: 0,\n      overload: false\n    }, {\n      Promise: constructorReducer\n    });\n\n    var _Promise= options.Promise;\n\n    return makeCancelablePromise(_Promise, function(resolve, reject, onCancel){\n      var handler;\n      if (typeof emitter.addEventListener === 'function') {\n        handler=  function () {\n          resolve(toArray.apply(null, arguments));\n        };\n\n        onCancel(function(){\n          emitter.removeEventListener(name, handler);\n        });\n\n        emitter.addEventListener(\n            name,\n            handler,\n            {once: true}\n        );\n        return;\n      }\n\n      var eventListener = function(){\n        errorListener && emitter.removeListener('error', errorListener);\n        resolve(toArray.apply(null, arguments));\n      };\n\n      var errorListener;\n\n      if (name !== 'error') {\n        errorListener = function (err){\n          emitter.removeListener(name, eventListener);\n          reject(err);\n        };\n\n        emitter.once('error', errorListener);\n      }\n\n      onCancel(function(){\n        errorListener && emitter.removeListener('error', errorListener);\n        emitter.removeListener(name, eventListener);\n      });\n\n      emitter.once(name, eventListener);\n    }, {\n      timeout: options.timeout,\n      overload: options.overload\n    });\n  }\n\n  var prototype= EventEmitter.prototype;\n\n  Object.defineProperties(EventEmitter, {\n    defaultMaxListeners: {\n      get: function () {\n        return prototype._maxListeners;\n      },\n      set: function (n) {\n        if (typeof n !== 'number' || n < 0 || Number.isNaN(n)) {\n          throw TypeError('n must be a non-negative number')\n        }\n        prototype._maxListeners = n;\n      },\n      enumerable: true\n    },\n    once: {\n      value: once,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  Object.defineProperties(prototype, {\n      _maxListeners: {\n          value: defaultMaxListeners,\n          writable: true,\n          configurable: true\n      },\n      _observers: {value: null, writable: true, configurable: true}\n  });\n\n  if (true) {\n     // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return EventEmitter;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var _global; }\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIyL2xpYi9ldmVudGVtaXR0ZXIyLmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLE9BQU8scUJBQXFCLE9BQU87QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjLE9BQU8sb0JBQW9CLE9BQU87QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLE9BQU87QUFDYixNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsMENBQTBDOztBQUUxQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixZQUFZO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGtEQUFrRCxxQkFBcUI7QUFDdkU7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVOztBQUVWO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsYUFBYTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7O0FBRUEsZ0JBQWdCLFNBQVM7QUFDekI7O0FBRUEsMkNBQTJDOztBQUUzQztBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVyxpQkFBaUIsT0FBTztBQUNuQztBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZDQUE2Qzs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixPQUFPO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxzQ0FBc0MsT0FBTztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQSxzQ0FBc0MsT0FBTztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLDRCQUE0QjtBQUM1QixRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHlDQUF5QztBQUN6Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHdDQUF3QyxPQUFPO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0Esc0NBQXNDLE9BQU87QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsNkNBQTZDO0FBQzdDLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9CQUFvQjtBQUN0Qzs7QUFFQSxzQkFBc0Isb0JBQW9CO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxrREFBa0QsWUFBWTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLE9BQU87QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLG1DQUFtQyxPQUFPO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLE1BQU07QUFDTixpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLG1CQUFtQjtBQUNuQixHQUFHOztBQUVILE1BQU0sSUFBMEM7QUFDaEQ7QUFDQSxJQUFJLG1DQUFPO0FBQ1g7QUFDQSxLQUFLO0FBQUEsa0dBQUM7QUFDTixJQUFJLEtBQUssZ0JBUU47QUFDSCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIyL2xpYi9ldmVudGVtaXR0ZXIyLmpzP2ZlNWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBFdmVudEVtaXR0ZXIyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vaGlqMW54L0V2ZW50RW1pdHRlcjJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMgaGlqMW54XG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cbjshZnVuY3Rpb24odW5kZWZpbmVkKSB7XG4gIHZhciBoYXNPd25Qcm9wZXJ0eT0gT2JqZWN0Lmhhc093blByb3BlcnR5O1xuICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgPyBBcnJheS5pc0FycmF5IDogZnVuY3Rpb24gX2lzQXJyYXkob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSBcIltvYmplY3QgQXJyYXldXCI7XG4gIH07XG4gIHZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG4gIHZhciBuZXh0VGlja1N1cHBvcnRlZD0gdHlwZW9mIHByb2Nlc3M9PSdvYmplY3QnICYmIHR5cGVvZiBwcm9jZXNzLm5leHRUaWNrPT0nZnVuY3Rpb24nO1xuICB2YXIgc3ltYm9sc1N1cHBvcnRlZD0gdHlwZW9mIFN5bWJvbD09PSdmdW5jdGlvbic7XG4gIHZhciByZWZsZWN0U3VwcG9ydGVkPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCc7XG4gIHZhciBzZXRJbW1lZGlhdGVTdXBwb3J0ZWQ9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbic7XG4gIHZhciBfc2V0SW1tZWRpYXRlPSBzZXRJbW1lZGlhdGVTdXBwb3J0ZWQgPyBzZXRJbW1lZGlhdGUgOiBzZXRUaW1lb3V0O1xuICB2YXIgb3duS2V5cz0gc3ltYm9sc1N1cHBvcnRlZD8gKHJlZmxlY3RTdXBwb3J0ZWQgJiYgdHlwZW9mIFJlZmxlY3Qub3duS2V5cz09PSdmdW5jdGlvbic/IFJlZmxlY3Qub3duS2V5cyA6IGZ1bmN0aW9uKG9iail7XG4gICAgdmFyIGFycj0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKTtcbiAgICBhcnIucHVzaC5hcHBseShhcnIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKSk7XG4gICAgcmV0dXJuIGFycjtcbiAgfSkgOiBPYmplY3Qua2V5cztcblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIGlmICh0aGlzLl9jb25mKSB7XG4gICAgICBjb25maWd1cmUuY2FsbCh0aGlzLCB0aGlzLl9jb25mKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb25maWd1cmUoY29uZikge1xuICAgIGlmIChjb25mKSB7XG4gICAgICB0aGlzLl9jb25mID0gY29uZjtcblxuICAgICAgY29uZi5kZWxpbWl0ZXIgJiYgKHRoaXMuZGVsaW1pdGVyID0gY29uZi5kZWxpbWl0ZXIpO1xuXG4gICAgICBpZihjb25mLm1heExpc3RlbmVycyE9PXVuZGVmaW5lZCl7XG4gICAgICAgICAgdGhpcy5fbWF4TGlzdGVuZXJzPSBjb25mLm1heExpc3RlbmVycztcbiAgICAgIH1cblxuICAgICAgY29uZi53aWxkY2FyZCAmJiAodGhpcy53aWxkY2FyZCA9IGNvbmYud2lsZGNhcmQpO1xuICAgICAgY29uZi5uZXdMaXN0ZW5lciAmJiAodGhpcy5fbmV3TGlzdGVuZXIgPSBjb25mLm5ld0xpc3RlbmVyKTtcbiAgICAgIGNvbmYucmVtb3ZlTGlzdGVuZXIgJiYgKHRoaXMuX3JlbW92ZUxpc3RlbmVyID0gY29uZi5yZW1vdmVMaXN0ZW5lcik7XG4gICAgICBjb25mLnZlcmJvc2VNZW1vcnlMZWFrICYmICh0aGlzLnZlcmJvc2VNZW1vcnlMZWFrID0gY29uZi52ZXJib3NlTWVtb3J5TGVhayk7XG4gICAgICBjb25mLmlnbm9yZUVycm9ycyAmJiAodGhpcy5pZ25vcmVFcnJvcnMgPSBjb25mLmlnbm9yZUVycm9ycyk7XG5cbiAgICAgIGlmICh0aGlzLndpbGRjYXJkKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJUcmVlID0ge307XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbG9nUG9zc2libGVNZW1vcnlMZWFrKGNvdW50LCBldmVudE5hbWUpIHtcbiAgICB2YXIgZXJyb3JNc2cgPSAnKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICdsZWFrIGRldGVjdGVkLiAnICsgY291bnQgKyAnIGxpc3RlbmVycyBhZGRlZC4gJyArXG4gICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nO1xuXG4gICAgaWYodGhpcy52ZXJib3NlTWVtb3J5TGVhayl7XG4gICAgICBlcnJvck1zZyArPSAnIEV2ZW50IG5hbWU6ICcgKyBldmVudE5hbWUgKyAnLic7XG4gICAgfVxuXG4gICAgaWYodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW1pdFdhcm5pbmcpe1xuICAgICAgdmFyIGUgPSBuZXcgRXJyb3IoZXJyb3JNc2cpO1xuICAgICAgZS5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICBlLmVtaXR0ZXIgPSB0aGlzO1xuICAgICAgZS5jb3VudCA9IGNvdW50O1xuICAgICAgcHJvY2Vzcy5lbWl0V2FybmluZyhlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvck1zZyk7XG5cbiAgICAgIGlmIChjb25zb2xlLnRyYWNlKXtcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciB0b0FycmF5ID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgc3dpdGNoIChuKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIFthXTtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIFthLCBiXTtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHZhciBhcnIgPSBuZXcgQXJyYXkobik7XG4gICAgICAgIHdoaWxlIChuLS0pIHtcbiAgICAgICAgICBhcnJbbl0gPSBhcmd1bWVudHNbbl07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9PYmplY3Qoa2V5cywgdmFsdWVzKSB7XG4gICAgdmFyIG9iaiA9IHt9O1xuICAgIHZhciBrZXk7XG4gICAgdmFyIGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWx1ZXNDb3VudCA9IHZhbHVlcyA/IHZhbHVlcy5sZW5ndGggOiAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBvYmpba2V5XSA9IGkgPCB2YWx1ZXNDb3VudCA/IHZhbHVlc1tpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRhcmdldE9ic2VydmVyKGVtaXR0ZXIsIHRhcmdldCwgb3B0aW9ucykge1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBlbWl0dGVyO1xuICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICB0aGlzLl9saXN0ZW5lcnNDb3VudCA9IDA7XG5cbiAgICB2YXIgb24sIG9mZjtcblxuICAgIGlmIChvcHRpb25zLm9uIHx8IG9wdGlvbnMub2ZmKSB7XG4gICAgICBvbiA9IG9wdGlvbnMub247XG4gICAgICBvZmYgPSBvcHRpb25zLm9mZjtcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIG9uID0gdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXI7XG4gICAgICBvZmYgPSB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcjtcbiAgICB9IGVsc2UgaWYgKHRhcmdldC5hZGRMaXN0ZW5lcikge1xuICAgICAgb24gPSB0YXJnZXQuYWRkTGlzdGVuZXI7XG4gICAgICBvZmYgPSB0YXJnZXQucmVtb3ZlTGlzdGVuZXI7XG4gICAgfSBlbHNlIGlmICh0YXJnZXQub24pIHtcbiAgICAgIG9uID0gdGFyZ2V0Lm9uO1xuICAgICAgb2ZmID0gdGFyZ2V0Lm9mZjtcbiAgICB9XG5cbiAgICBpZiAoIW9uICYmICFvZmYpIHtcbiAgICAgIHRocm93IEVycm9yKCd0YXJnZXQgZG9lcyBub3QgaW1wbGVtZW50IGFueSBrbm93biBldmVudCBBUEknKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9uICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ29uIG1ldGhvZCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9mZiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdvZmYgbWV0aG9kIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIHRoaXMuX29uID0gb247XG4gICAgdGhpcy5fb2ZmID0gb2ZmO1xuXG4gICAgdmFyIF9vYnNlcnZlcnM9IGVtaXR0ZXIuX29ic2VydmVycztcbiAgICBpZihfb2JzZXJ2ZXJzKXtcbiAgICAgIF9vYnNlcnZlcnMucHVzaCh0aGlzKTtcbiAgICB9ZWxzZXtcbiAgICAgIGVtaXR0ZXIuX29ic2VydmVycz0gW3RoaXNdO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5hc3NpZ24oVGFyZ2V0T2JzZXJ2ZXIucHJvdG90eXBlLCB7XG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbihldmVudCwgbG9jYWxFdmVudCwgcmVkdWNlcil7XG4gICAgICB2YXIgb2JzZXJ2ZXI9IHRoaXM7XG4gICAgICB2YXIgdGFyZ2V0PSB0aGlzLl90YXJnZXQ7XG4gICAgICB2YXIgZW1pdHRlcj0gdGhpcy5fZW1pdHRlcjtcbiAgICAgIHZhciBsaXN0ZW5lcnM9IHRoaXMuX2xpc3RlbmVycztcbiAgICAgIHZhciBoYW5kbGVyPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgYXJncz0gdG9BcnJheS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICB2YXIgZXZlbnRPYmo9IHtcbiAgICAgICAgICBkYXRhOiBhcmdzLFxuICAgICAgICAgIG5hbWU6IGxvY2FsRXZlbnQsXG4gICAgICAgICAgb3JpZ2luYWw6IGV2ZW50XG4gICAgICAgIH07XG4gICAgICAgIGlmKHJlZHVjZXIpe1xuICAgICAgICAgIHZhciByZXN1bHQ9IHJlZHVjZXIuY2FsbCh0YXJnZXQsIGV2ZW50T2JqKTtcbiAgICAgICAgICBpZihyZXN1bHQhPT1mYWxzZSl7XG4gICAgICAgICAgICBlbWl0dGVyLmVtaXQuYXBwbHkoZW1pdHRlciwgW2V2ZW50T2JqLm5hbWVdLmNvbmNhdChhcmdzKSlcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVtaXR0ZXIuZW1pdC5hcHBseShlbWl0dGVyLCBbbG9jYWxFdmVudF0uY29uY2F0KGFyZ3MpKTtcbiAgICAgIH07XG5cblxuICAgICAgaWYobGlzdGVuZXJzW2V2ZW50XSl7XG4gICAgICAgIHRocm93IEVycm9yKCdFdmVudCBcXCcnICsgZXZlbnQgKyAnXFwnIGlzIGFscmVhZHkgbGlzdGVuaW5nJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2xpc3RlbmVyc0NvdW50Kys7XG5cbiAgICAgIGlmKGVtaXR0ZXIuX25ld0xpc3RlbmVyICYmIGVtaXR0ZXIuX3JlbW92ZUxpc3RlbmVyICYmICFvYnNlcnZlci5fb25OZXdMaXN0ZW5lcil7XG5cbiAgICAgICAgdGhpcy5fb25OZXdMaXN0ZW5lciA9IGZ1bmN0aW9uIChfZXZlbnQpIHtcbiAgICAgICAgICBpZiAoX2V2ZW50ID09PSBsb2NhbEV2ZW50ICYmIGxpc3RlbmVyc1tldmVudF0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyc1tldmVudF0gPSBoYW5kbGVyO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuX29uLmNhbGwodGFyZ2V0LCBldmVudCwgaGFuZGxlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGVtaXR0ZXIub24oJ25ld0xpc3RlbmVyJywgdGhpcy5fb25OZXdMaXN0ZW5lcik7XG5cbiAgICAgICAgdGhpcy5fb25SZW1vdmVMaXN0ZW5lcj0gZnVuY3Rpb24oX2V2ZW50KXtcbiAgICAgICAgICBpZihfZXZlbnQgPT09IGxvY2FsRXZlbnQgJiYgIWVtaXR0ZXIuaGFzTGlzdGVuZXJzKF9ldmVudCkgJiYgbGlzdGVuZXJzW2V2ZW50XSl7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbZXZlbnRdPSBudWxsO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuX29mZi5jYWxsKHRhcmdldCwgZXZlbnQsIGhhbmRsZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBsaXN0ZW5lcnNbZXZlbnRdPSBudWxsO1xuXG4gICAgICAgIGVtaXR0ZXIub24oJ3JlbW92ZUxpc3RlbmVyJywgdGhpcy5fb25SZW1vdmVMaXN0ZW5lcik7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgbGlzdGVuZXJzW2V2ZW50XT0gaGFuZGxlcjtcbiAgICAgICAgb2JzZXJ2ZXIuX29uLmNhbGwodGFyZ2V0LCBldmVudCwgaGFuZGxlcik7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbihldmVudCl7XG4gICAgICB2YXIgb2JzZXJ2ZXI9IHRoaXM7XG4gICAgICB2YXIgbGlzdGVuZXJzPSB0aGlzLl9saXN0ZW5lcnM7XG4gICAgICB2YXIgZW1pdHRlcj0gdGhpcy5fZW1pdHRlcjtcbiAgICAgIHZhciBoYW5kbGVyO1xuICAgICAgdmFyIGV2ZW50cztcbiAgICAgIHZhciBvZmY9IHRoaXMuX29mZjtcbiAgICAgIHZhciB0YXJnZXQ9IHRoaXMuX3RhcmdldDtcbiAgICAgIHZhciBpO1xuXG4gICAgICBpZihldmVudCAmJiB0eXBlb2YgZXZlbnQhPT0nc3RyaW5nJyl7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignZXZlbnQgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbGVhclJlZnMoKXtcbiAgICAgICAgaWYob2JzZXJ2ZXIuX29uTmV3TGlzdGVuZXIpe1xuICAgICAgICAgIGVtaXR0ZXIub2ZmKCduZXdMaXN0ZW5lcicsIG9ic2VydmVyLl9vbk5ld0xpc3RlbmVyKTtcbiAgICAgICAgICBlbWl0dGVyLm9mZigncmVtb3ZlTGlzdGVuZXInLCBvYnNlcnZlci5fb25SZW1vdmVMaXN0ZW5lcik7XG4gICAgICAgICAgb2JzZXJ2ZXIuX29uTmV3TGlzdGVuZXI9IG51bGw7XG4gICAgICAgICAgb2JzZXJ2ZXIuX29uUmVtb3ZlTGlzdGVuZXI9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4PSBmaW5kVGFyZ2V0SW5kZXguY2FsbChlbWl0dGVyLCBvYnNlcnZlcik7XG4gICAgICAgIGVtaXR0ZXIuX29ic2VydmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuXG4gICAgICBpZihldmVudCl7XG4gICAgICAgIGhhbmRsZXI9IGxpc3RlbmVyc1tldmVudF07XG4gICAgICAgIGlmKCFoYW5kbGVyKSByZXR1cm47XG4gICAgICAgIG9mZi5jYWxsKHRhcmdldCwgZXZlbnQsIGhhbmRsZXIpO1xuICAgICAgICBkZWxldGUgbGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgICAgaWYoIS0tdGhpcy5fbGlzdGVuZXJzQ291bnQpe1xuICAgICAgICAgIGNsZWFyUmVmcygpO1xuICAgICAgICB9XG4gICAgICB9ZWxzZXtcbiAgICAgICAgZXZlbnRzPSBvd25LZXlzKGxpc3RlbmVycyk7XG4gICAgICAgIGk9IGV2ZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlKGktLT4wKXtcbiAgICAgICAgICBldmVudD0gZXZlbnRzW2ldO1xuICAgICAgICAgIG9mZi5jYWxsKHRhcmdldCwgZXZlbnQsIGxpc3RlbmVyc1tldmVudF0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycz0ge307XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyc0NvdW50PSAwO1xuICAgICAgICBjbGVhclJlZnMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHJlc29sdmVPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgcmVkdWNlcnMsIGFsbG93VW5rbm93bikge1xuICAgIHZhciBjb21wdXRlZE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBzY2hlbWEpO1xuXG4gICAgaWYgKCFvcHRpb25zKSByZXR1cm4gY29tcHV0ZWRPcHRpb25zO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JylcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgb3B0aW9uLCB2YWx1ZTtcbiAgICB2YXIgcmVkdWNlcjtcblxuICAgIGZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIFwiJyArIG9wdGlvbiArICdcIiBvcHRpb24gdmFsdWUnICsgKHJlYXNvbiA/ICcuIFJlYXNvbjogJyArIHJlYXNvbiA6ICcnKSlcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBvcHRpb24gPSBrZXlzW2ldO1xuICAgICAgaWYgKCFhbGxvd1Vua25vd24gJiYgIWhhc093blByb3BlcnR5LmNhbGwoc2NoZW1hLCBvcHRpb24pKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdVbmtub3duIFwiJyArIG9wdGlvbiArICdcIiBvcHRpb24nKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gb3B0aW9uc1tvcHRpb25dO1xuICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVkdWNlciA9IHJlZHVjZXJzW29wdGlvbl07XG4gICAgICAgIGNvbXB1dGVkT3B0aW9uc1tvcHRpb25dID0gcmVkdWNlciA/IHJlZHVjZXIodmFsdWUsIHJlamVjdCkgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbXB1dGVkT3B0aW9ucztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0cnVjdG9yUmVkdWNlcih2YWx1ZSwgcmVqZWN0KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyB8fCAhdmFsdWUuaGFzT3duUHJvcGVydHkoJ3Byb3RvdHlwZScpKSB7XG4gICAgICByZWplY3QoJ3ZhbHVlIG11c3QgYmUgYSBjb25zdHJ1Y3RvcicpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBtYWtlVHlwZVJlZHVjZXIodHlwZXMpIHtcbiAgICB2YXIgbWVzc2FnZT0gJ3ZhbHVlIG11c3QgYmUgdHlwZSBvZiAnICsgdHlwZXMuam9pbignfCcpO1xuICAgIHZhciBsZW49IHR5cGVzLmxlbmd0aDtcbiAgICB2YXIgZmlyc3RUeXBlPSB0eXBlc1swXTtcbiAgICB2YXIgc2Vjb25kVHlwZT0gdHlwZXNbMV07XG5cbiAgICBpZiAobGVuID09PSAxKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHYsIHJlamVjdCkge1xuICAgICAgICBpZiAodHlwZW9mIHYgPT09IGZpcnN0VHlwZSkge1xuICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdChtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobGVuID09PSAyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHYsIHJlamVjdCkge1xuICAgICAgICB2YXIga2luZD0gdHlwZW9mIHY7XG4gICAgICAgIGlmIChraW5kID09PSBmaXJzdFR5cGUgfHwga2luZCA9PT0gc2Vjb25kVHlwZSkgcmV0dXJuIHY7XG4gICAgICAgIHJlamVjdChtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHYsIHJlamVjdCkge1xuICAgICAgdmFyIGtpbmQgPSB0eXBlb2YgdjtcbiAgICAgIHZhciBpID0gbGVuO1xuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgaWYgKGtpbmQgPT09IHR5cGVzW2ldKSByZXR1cm4gdjtcbiAgICAgIH1cbiAgICAgIHJlamVjdChtZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgZnVuY3Rpb25SZWR1Y2VyPSBtYWtlVHlwZVJlZHVjZXIoWydmdW5jdGlvbiddKTtcblxuICB2YXIgb2JqZWN0RnVuY3Rpb25SZWR1Y2VyPSBtYWtlVHlwZVJlZHVjZXIoWydvYmplY3QnLCAnZnVuY3Rpb24nXSk7XG5cbiAgZnVuY3Rpb24gbWFrZUNhbmNlbGFibGVQcm9taXNlKFByb21pc2UsIGV4ZWN1dG9yLCBvcHRpb25zKSB7XG4gICAgdmFyIGlzQ2FuY2VsYWJsZTtcbiAgICB2YXIgY2FsbGJhY2tzO1xuICAgIHZhciB0aW1lcj0gMDtcbiAgICB2YXIgc3Vic2NyaXB0aW9uQ2xvc2VkO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0LCBvbkNhbmNlbCkge1xuICAgICAgb3B0aW9ucz0gcmVzb2x2ZU9wdGlvbnMob3B0aW9ucywge1xuICAgICAgICB0aW1lb3V0OiAwLFxuICAgICAgICBvdmVybG9hZDogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgdGltZW91dDogZnVuY3Rpb24odmFsdWUsIHJlamVjdCl7XG4gICAgICAgICAgdmFsdWUqPSAxO1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlIDwgMCB8fCAhTnVtYmVyLmlzRmluaXRlKHZhbHVlKSkge1xuICAgICAgICAgICAgcmVqZWN0KCd0aW1lb3V0IG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaXNDYW5jZWxhYmxlID0gIW9wdGlvbnMub3ZlcmxvYWQgJiYgdHlwZW9mIFByb21pc2UucHJvdG90eXBlLmNhbmNlbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb25DYW5jZWwgPT09ICdmdW5jdGlvbic7XG5cbiAgICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgICBjYWxsYmFja3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lcikge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgdGltZXIgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBfcmVzb2x2ZT0gZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgfTtcblxuICAgICAgdmFyIF9yZWplY3Q9IGZ1bmN0aW9uKGVycil7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9O1xuXG4gICAgICBpZiAoaXNDYW5jZWxhYmxlKSB7XG4gICAgICAgIGV4ZWN1dG9yKF9yZXNvbHZlLCBfcmVqZWN0LCBvbkNhbmNlbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFja3MgPSBbZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgICAgICBfcmVqZWN0KHJlYXNvbiB8fCBFcnJvcignY2FuY2VsZWQnKSk7XG4gICAgICAgIH1dO1xuICAgICAgICBleGVjdXRvcihfcmVzb2x2ZSwgX3JlamVjdCwgZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1VuYWJsZSB0byBzdWJzY3JpYmUgb24gY2FuY2VsIGV2ZW50IGFzeW5jaHJvbm91c2x5JylcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdvbkNhbmNlbCBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FsbGJhY2tzLnB1c2goY2IpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3Vic2NyaXB0aW9uQ2xvc2VkPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy50aW1lb3V0ID4gMCkge1xuICAgICAgICB0aW1lcj0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgIHZhciByZWFzb249IEVycm9yKCd0aW1lb3V0Jyk7XG4gICAgICAgICAgcmVhc29uLmNvZGUgPSAnRVRJTUVET1VUJ1xuICAgICAgICAgIHRpbWVyPSAwO1xuICAgICAgICAgIHByb21pc2UuY2FuY2VsKHJlYXNvbik7XG4gICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgIH0sIG9wdGlvbnMudGltZW91dCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIWlzQ2FuY2VsYWJsZSkge1xuICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIGlmICghY2FsbGJhY2tzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY2FsbGJhY2tzW2ldKHJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW50ZXJuYWwgY2FsbGJhY2sgdG8gcmVqZWN0IHRoZSBwcm9taXNlXG4gICAgICAgIGNhbGxiYWNrc1swXShyZWFzb24pO1xuICAgICAgICBjYWxsYmFja3MgPSBudWxsO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRUYXJnZXRJbmRleChvYnNlcnZlcikge1xuICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLl9vYnNlcnZlcnM7XG4gICAgaWYoIW9ic2VydmVycyl7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChvYnNlcnZlcnNbaV0uX3RhcmdldCA9PT0gb2JzZXJ2ZXIpIHJldHVybiBpO1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvLyBBdHRlbnRpb24sIGZ1bmN0aW9uIHJldHVybiB0eXBlIG5vdyBpcyBhcnJheSwgYWx3YXlzICFcbiAgLy8gSXQgaGFzIHplcm8gZWxlbWVudHMgaWYgbm8gYW55IG1hdGNoZXMgZm91bmQgYW5kIG9uZSBvciBtb3JlXG4gIC8vIGVsZW1lbnRzIChsZWFmcykgaWYgdGhlcmUgYXJlIG1hdGNoZXNcbiAgLy9cbiAgZnVuY3Rpb24gc2VhcmNoTGlzdGVuZXJUcmVlKGhhbmRsZXJzLCB0eXBlLCB0cmVlLCBpLCB0eXBlTGVuZ3RoKSB7XG4gICAgaWYgKCF0cmVlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgdmFyIGtpbmQgPSB0eXBlb2YgdHlwZTtcbiAgICAgIGlmIChraW5kID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgbnMsIG4sIGwgPSAwLCBqID0gMCwgZGVsaW1pdGVyID0gdGhpcy5kZWxpbWl0ZXIsIGRsID0gZGVsaW1pdGVyLmxlbmd0aDtcbiAgICAgICAgaWYgKChuID0gdHlwZS5pbmRleE9mKGRlbGltaXRlcikpICE9PSAtMSkge1xuICAgICAgICAgIG5zID0gbmV3IEFycmF5KDUpO1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIG5zW2wrK10gPSB0eXBlLnNsaWNlKGosIG4pO1xuICAgICAgICAgICAgaiA9IG4gKyBkbDtcbiAgICAgICAgICB9IHdoaWxlICgobiA9IHR5cGUuaW5kZXhPZihkZWxpbWl0ZXIsIGopKSAhPT0gLTEpO1xuXG4gICAgICAgICAgbnNbbCsrXSA9IHR5cGUuc2xpY2Uoaik7XG4gICAgICAgICAgdHlwZSA9IG5zO1xuICAgICAgICAgIHR5cGVMZW5ndGggPSBsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHR5cGUgPSBbdHlwZV07XG4gICAgICAgICAgdHlwZUxlbmd0aCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdHlwZUxlbmd0aCA9IHR5cGUubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICAgICAgdHlwZUxlbmd0aCA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycz0gbnVsbCwgYnJhbmNoLCB4VHJlZSwgeHhUcmVlLCBpc29sYXRlZEJyYW5jaCwgZW5kUmVhY2hlZCwgY3VycmVudFR5cGUgPSB0eXBlW2ldLFxuICAgICAgICBuZXh0VHlwZSA9IHR5cGVbaSArIDFdLCBicmFuY2hlcywgX2xpc3RlbmVycztcblxuICAgIGlmIChpID09PSB0eXBlTGVuZ3RoKSB7XG4gICAgICAvL1xuICAgICAgLy8gSWYgYXQgdGhlIGVuZCBvZiB0aGUgZXZlbnQocykgbGlzdCBhbmQgdGhlIHRyZWUgaGFzIGxpc3RlbmVyc1xuICAgICAgLy8gaW52b2tlIHRob3NlIGxpc3RlbmVycy5cbiAgICAgIC8vXG5cbiAgICAgIGlmKHRyZWUuX2xpc3RlbmVycykge1xuICAgICAgICBpZiAodHlwZW9mIHRyZWUuX2xpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGhhbmRsZXJzICYmIGhhbmRsZXJzLnB1c2godHJlZS5fbGlzdGVuZXJzKTtcbiAgICAgICAgICBsaXN0ZW5lcnMgPSBbdHJlZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGFuZGxlcnMgJiYgaGFuZGxlcnMucHVzaC5hcHBseShoYW5kbGVycywgdHJlZS5fbGlzdGVuZXJzKTtcbiAgICAgICAgICBsaXN0ZW5lcnMgPSBbdHJlZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuXG4gICAgICBpZiAoY3VycmVudFR5cGUgPT09ICcqJykge1xuICAgICAgICAvL1xuICAgICAgICAvLyBJZiB0aGUgZXZlbnQgZW1pdHRlZCBpcyAnKicgYXQgdGhpcyBwYXJ0XG4gICAgICAgIC8vIG9yIHRoZXJlIGlzIGEgY29uY3JldGUgbWF0Y2ggYXQgdGhpcyBwYXRjaFxuICAgICAgICAvL1xuICAgICAgICBicmFuY2hlcyA9IG93bktleXModHJlZSk7XG4gICAgICAgIG4gPSBicmFuY2hlcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChuLS0gPiAwKSB7XG4gICAgICAgICAgYnJhbmNoID0gYnJhbmNoZXNbbl07XG4gICAgICAgICAgaWYgKGJyYW5jaCAhPT0gJ19saXN0ZW5lcnMnKSB7XG4gICAgICAgICAgICBfbGlzdGVuZXJzID0gc2VhcmNoTGlzdGVuZXJUcmVlKGhhbmRsZXJzLCB0eXBlLCB0cmVlW2JyYW5jaF0sIGkgKyAxLCB0eXBlTGVuZ3RoKTtcbiAgICAgICAgICAgIGlmIChfbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMucHVzaC5hcHBseShsaXN0ZW5lcnMsIF9saXN0ZW5lcnMpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycyA9IF9saXN0ZW5lcnM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFR5cGUgPT09ICcqKicpIHtcbiAgICAgICAgZW5kUmVhY2hlZCA9IChpICsgMSA9PT0gdHlwZUxlbmd0aCB8fCAoaSArIDIgPT09IHR5cGVMZW5ndGggJiYgbmV4dFR5cGUgPT09ICcqJykpO1xuICAgICAgICBpZiAoZW5kUmVhY2hlZCAmJiB0cmVlLl9saXN0ZW5lcnMpIHtcbiAgICAgICAgICAvLyBUaGUgbmV4dCBlbGVtZW50IGhhcyBhIF9saXN0ZW5lcnMsIGFkZCBpdCB0byB0aGUgaGFuZGxlcnMuXG4gICAgICAgICAgbGlzdGVuZXJzID0gc2VhcmNoTGlzdGVuZXJUcmVlKGhhbmRsZXJzLCB0eXBlLCB0cmVlLCB0eXBlTGVuZ3RoLCB0eXBlTGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyYW5jaGVzID0gb3duS2V5cyh0cmVlKTtcbiAgICAgICAgbiA9IGJyYW5jaGVzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKG4tLSA+IDApIHtcbiAgICAgICAgICBicmFuY2ggPSBicmFuY2hlc1tuXTtcbiAgICAgICAgICBpZiAoYnJhbmNoICE9PSAnX2xpc3RlbmVycycpIHtcbiAgICAgICAgICAgIGlmIChicmFuY2ggPT09ICcqJyB8fCBicmFuY2ggPT09ICcqKicpIHtcbiAgICAgICAgICAgICAgaWYgKHRyZWVbYnJhbmNoXS5fbGlzdGVuZXJzICYmICFlbmRSZWFjaGVkKSB7XG4gICAgICAgICAgICAgICAgX2xpc3RlbmVycyA9IHNlYXJjaExpc3RlbmVyVHJlZShoYW5kbGVycywgdHlwZSwgdHJlZVticmFuY2hdLCB0eXBlTGVuZ3RoLCB0eXBlTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBpZiAoX2xpc3RlbmVycykge1xuICAgICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVycykge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMucHVzaC5hcHBseShsaXN0ZW5lcnMsIF9saXN0ZW5lcnMpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzID0gX2xpc3RlbmVycztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgX2xpc3RlbmVycyA9IHNlYXJjaExpc3RlbmVyVHJlZShoYW5kbGVycywgdHlwZSwgdHJlZVticmFuY2hdLCBpLCB0eXBlTGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYnJhbmNoID09PSBuZXh0VHlwZSkge1xuICAgICAgICAgICAgICBfbGlzdGVuZXJzID0gc2VhcmNoTGlzdGVuZXJUcmVlKGhhbmRsZXJzLCB0eXBlLCB0cmVlW2JyYW5jaF0sIGkgKyAyLCB0eXBlTGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIE5vIG1hdGNoIG9uIHRoaXMgb25lLCBzaGlmdCBpbnRvIHRoZSB0cmVlIGJ1dCBub3QgaW4gdGhlIHR5cGUgYXJyYXkuXG4gICAgICAgICAgICAgIF9saXN0ZW5lcnMgPSBzZWFyY2hMaXN0ZW5lclRyZWUoaGFuZGxlcnMsIHR5cGUsIHRyZWVbYnJhbmNoXSwgaSwgdHlwZUxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX2xpc3RlbmVycykge1xuICAgICAgICAgICAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzLnB1c2guYXBwbHkobGlzdGVuZXJzLCBfbGlzdGVuZXJzKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMgPSBfbGlzdGVuZXJzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2UgaWYgKHRyZWVbY3VycmVudFR5cGVdKSB7XG4gICAgICAgIGxpc3RlbmVycyA9IHNlYXJjaExpc3RlbmVyVHJlZShoYW5kbGVycywgdHlwZSwgdHJlZVtjdXJyZW50VHlwZV0sIGkgKyAxLCB0eXBlTGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAgIHhUcmVlID0gdHJlZVsnKiddO1xuICAgIGlmICh4VHJlZSkge1xuICAgICAgLy9cbiAgICAgIC8vIElmIHRoZSBsaXN0ZW5lciB0cmVlIHdpbGwgYWxsb3cgYW55IG1hdGNoIGZvciB0aGlzIHBhcnQsXG4gICAgICAvLyB0aGVuIHJlY3Vyc2l2ZWx5IGV4cGxvcmUgYWxsIGJyYW5jaGVzIG9mIHRoZSB0cmVlXG4gICAgICAvL1xuICAgICAgc2VhcmNoTGlzdGVuZXJUcmVlKGhhbmRsZXJzLCB0eXBlLCB4VHJlZSwgaSArIDEsIHR5cGVMZW5ndGgpO1xuICAgIH1cblxuICAgIHh4VHJlZSA9IHRyZWVbJyoqJ107XG4gICAgaWYgKHh4VHJlZSkge1xuICAgICAgaWYgKGkgPCB0eXBlTGVuZ3RoKSB7XG4gICAgICAgIGlmICh4eFRyZWUuX2xpc3RlbmVycykge1xuICAgICAgICAgIC8vIElmIHdlIGhhdmUgYSBsaXN0ZW5lciBvbiBhICcqKicsIGl0IHdpbGwgY2F0Y2ggYWxsLCBzbyBhZGQgaXRzIGhhbmRsZXIuXG4gICAgICAgICAgc2VhcmNoTGlzdGVuZXJUcmVlKGhhbmRsZXJzLCB0eXBlLCB4eFRyZWUsIHR5cGVMZW5ndGgsIHR5cGVMZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQnVpbGQgYXJyYXlzIG9mIG1hdGNoaW5nIG5leHQgYnJhbmNoZXMgYW5kIG90aGVycy5cbiAgICAgICAgYnJhbmNoZXM9IG93bktleXMoeHhUcmVlKTtcbiAgICAgICAgbj0gYnJhbmNoZXMubGVuZ3RoO1xuICAgICAgICB3aGlsZShuLS0+MCl7XG4gICAgICAgICAgYnJhbmNoPSBicmFuY2hlc1tuXTtcbiAgICAgICAgICBpZiAoYnJhbmNoICE9PSAnX2xpc3RlbmVycycpIHtcbiAgICAgICAgICAgIGlmIChicmFuY2ggPT09IG5leHRUeXBlKSB7XG4gICAgICAgICAgICAgIC8vIFdlIGtub3cgdGhlIG5leHQgZWxlbWVudCB3aWxsIG1hdGNoLCBzbyBqdW1wIHR3aWNlLlxuICAgICAgICAgICAgICBzZWFyY2hMaXN0ZW5lclRyZWUoaGFuZGxlcnMsIHR5cGUsIHh4VHJlZVticmFuY2hdLCBpICsgMiwgdHlwZUxlbmd0aCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJyYW5jaCA9PT0gY3VycmVudFR5cGUpIHtcbiAgICAgICAgICAgICAgLy8gQ3VycmVudCBub2RlIG1hdGNoZXMsIG1vdmUgaW50byB0aGUgdHJlZS5cbiAgICAgICAgICAgICAgc2VhcmNoTGlzdGVuZXJUcmVlKGhhbmRsZXJzLCB0eXBlLCB4eFRyZWVbYnJhbmNoXSwgaSArIDEsIHR5cGVMZW5ndGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaXNvbGF0ZWRCcmFuY2ggPSB7fTtcbiAgICAgICAgICAgICAgaXNvbGF0ZWRCcmFuY2hbYnJhbmNoXSA9IHh4VHJlZVticmFuY2hdO1xuICAgICAgICAgICAgICBzZWFyY2hMaXN0ZW5lclRyZWUoaGFuZGxlcnMsIHR5cGUsIHsnKionOiBpc29sYXRlZEJyYW5jaH0sIGkgKyAxLCB0eXBlTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoeHhUcmVlLl9saXN0ZW5lcnMpIHtcbiAgICAgICAgLy8gV2UgaGF2ZSByZWFjaGVkIHRoZSBlbmQgYW5kIHN0aWxsIG9uIGEgJyoqJ1xuICAgICAgICBzZWFyY2hMaXN0ZW5lclRyZWUoaGFuZGxlcnMsIHR5cGUsIHh4VHJlZSwgdHlwZUxlbmd0aCwgdHlwZUxlbmd0aCk7XG4gICAgICB9IGVsc2UgaWYgKHh4VHJlZVsnKiddICYmIHh4VHJlZVsnKiddLl9saXN0ZW5lcnMpIHtcbiAgICAgICAgc2VhcmNoTGlzdGVuZXJUcmVlKGhhbmRsZXJzLCB0eXBlLCB4eFRyZWVbJyonXSwgdHlwZUxlbmd0aCwgdHlwZUxlbmd0aCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpc3RlbmVycztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdyb3dMaXN0ZW5lclRyZWUodHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgICB2YXIgbGVuID0gMCwgaiA9IDAsIGksIGRlbGltaXRlciA9IHRoaXMuZGVsaW1pdGVyLCBkbD0gZGVsaW1pdGVyLmxlbmd0aCwgbnM7XG5cbiAgICBpZih0eXBlb2YgdHlwZT09PSdzdHJpbmcnKSB7XG4gICAgICBpZiAoKGkgPSB0eXBlLmluZGV4T2YoZGVsaW1pdGVyKSkgIT09IC0xKSB7XG4gICAgICAgIG5zID0gbmV3IEFycmF5KDUpO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgbnNbbGVuKytdID0gdHlwZS5zbGljZShqLCBpKTtcbiAgICAgICAgICBqID0gaSArIGRsO1xuICAgICAgICB9IHdoaWxlICgoaSA9IHR5cGUuaW5kZXhPZihkZWxpbWl0ZXIsIGopKSAhPT0gLTEpO1xuXG4gICAgICAgIG5zW2xlbisrXSA9IHR5cGUuc2xpY2Uoaik7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgbnM9IFt0eXBlXTtcbiAgICAgICAgbGVuPSAxO1xuICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgbnM9IHR5cGU7XG4gICAgICBsZW49IHR5cGUubGVuZ3RoO1xuICAgIH1cblxuICAgIC8vXG4gICAgLy8gTG9va3MgZm9yIHR3byBjb25zZWN1dGl2ZSAnKionLCBpZiBzbywgZG9uJ3QgYWRkIHRoZSBldmVudCBhdCBhbGwuXG4gICAgLy9cbiAgICBpZiAobGVuID4gMSkge1xuICAgICAgZm9yIChpID0gMDsgaSArIDEgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAobnNbaV0gPT09ICcqKicgJiYgbnNbaSArIDFdID09PSAnKionKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cblxuICAgIHZhciB0cmVlID0gdGhpcy5saXN0ZW5lclRyZWUsIG5hbWU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIG5hbWUgPSBuc1tpXTtcblxuICAgICAgdHJlZSA9IHRyZWVbbmFtZV0gfHwgKHRyZWVbbmFtZV0gPSB7fSk7XG5cbiAgICAgIGlmIChpID09PSBsZW4gLSAxKSB7XG4gICAgICAgIGlmICghdHJlZS5fbGlzdGVuZXJzKSB7XG4gICAgICAgICAgdHJlZS5fbGlzdGVuZXJzID0gbGlzdGVuZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0cmVlLl9saXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRyZWUuX2xpc3RlbmVycyA9IFt0cmVlLl9saXN0ZW5lcnNdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwcmVwZW5kKSB7XG4gICAgICAgICAgICB0cmVlLl9saXN0ZW5lcnMudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyZWUuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICF0cmVlLl9saXN0ZW5lcnMud2FybmVkICYmXG4gICAgICAgICAgICAgIHRoaXMuX21heExpc3RlbmVycyA+IDAgJiZcbiAgICAgICAgICAgICAgdHJlZS5fbGlzdGVuZXJzLmxlbmd0aCA+IHRoaXMuX21heExpc3RlbmVyc1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdHJlZS5fbGlzdGVuZXJzLndhcm5lZCA9IHRydWU7XG4gICAgICAgICAgICBsb2dQb3NzaWJsZU1lbW9yeUxlYWsuY2FsbCh0aGlzLCB0cmVlLl9saXN0ZW5lcnMubGVuZ3RoLCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBjb2xsZWN0VHJlZUV2ZW50cyh0cmVlLCBldmVudHMsIHJvb3QsIGFzQXJyYXkpe1xuICAgICB2YXIgYnJhbmNoZXM9IG93bktleXModHJlZSk7XG4gICAgIHZhciBpPSBicmFuY2hlcy5sZW5ndGg7XG4gICAgIHZhciBicmFuY2gsIGJyYW5jaE5hbWUsIHBhdGg7XG4gICAgIHZhciBoYXNMaXN0ZW5lcnM9IHRyZWVbJ19saXN0ZW5lcnMnXTtcbiAgICAgdmFyIGlzQXJyYXlQYXRoO1xuXG4gICAgIHdoaWxlKGktLT4wKXtcbiAgICAgICAgIGJyYW5jaE5hbWU9IGJyYW5jaGVzW2ldO1xuXG4gICAgICAgICBicmFuY2g9IHRyZWVbYnJhbmNoTmFtZV07XG5cbiAgICAgICAgIGlmKGJyYW5jaE5hbWU9PT0nX2xpc3RlbmVycycpe1xuICAgICAgICAgICAgIHBhdGg9IHJvb3Q7XG4gICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgcGF0aCA9IHJvb3QgPyByb290LmNvbmNhdChicmFuY2hOYW1lKSA6IFticmFuY2hOYW1lXTtcbiAgICAgICAgIH1cblxuICAgICAgICAgaXNBcnJheVBhdGg9IGFzQXJyYXkgfHwgdHlwZW9mIGJyYW5jaE5hbWU9PT0nc3ltYm9sJztcblxuICAgICAgICAgaGFzTGlzdGVuZXJzICYmIGV2ZW50cy5wdXNoKGlzQXJyYXlQYXRoPyBwYXRoIDogcGF0aC5qb2luKHRoaXMuZGVsaW1pdGVyKSk7XG5cbiAgICAgICAgIGlmKHR5cGVvZiBicmFuY2g9PT0nb2JqZWN0Jyl7XG4gICAgICAgICAgICAgY29sbGVjdFRyZWVFdmVudHMuY2FsbCh0aGlzLCBicmFuY2gsIGV2ZW50cywgcGF0aCwgaXNBcnJheVBhdGgpO1xuICAgICAgICAgfVxuICAgICB9XG5cbiAgICAgcmV0dXJuIGV2ZW50cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY3Vyc2l2ZWx5R2FyYmFnZUNvbGxlY3Qocm9vdCkge1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhyb290KTtcbiAgICB2YXIgaT0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIG9iaiwga2V5LCBmbGFnO1xuICAgIHdoaWxlKGktLT4wKXtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBvYmogPSByb290W2tleV07XG5cbiAgICAgIGlmKG9iail7XG4gICAgICAgICAgZmxhZz0gdHJ1ZTtcbiAgICAgICAgICBpZihrZXkgIT09ICdfbGlzdGVuZXJzJyAmJiAhcmVjdXJzaXZlbHlHYXJiYWdlQ29sbGVjdChvYmopKXtcbiAgICAgICAgICAgICBkZWxldGUgcm9vdFtrZXldO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmxhZztcbiAgfVxuXG4gIGZ1bmN0aW9uIExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBsaXN0ZW5lcil7XG4gICAgdGhpcy5lbWl0dGVyPSBlbWl0dGVyO1xuICAgIHRoaXMuZXZlbnQ9IGV2ZW50O1xuICAgIHRoaXMubGlzdGVuZXI9IGxpc3RlbmVyO1xuICB9XG5cbiAgTGlzdGVuZXIucHJvdG90eXBlLm9mZj0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmVtaXR0ZXIub2ZmKHRoaXMuZXZlbnQsIHRoaXMubGlzdGVuZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNldHVwTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBvcHRpb25zKXtcbiAgICAgIGlmIChvcHRpb25zID09PSB0cnVlKSB7XG4gICAgICAgIHByb21pc2lmeSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgIGFzeW5jID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ29wdGlvbnMgc2hvdWxkIGJlIGFuIG9iamVjdCBvciB0cnVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFzeW5jID0gb3B0aW9ucy5hc3luYztcbiAgICAgICAgdmFyIHByb21pc2lmeSA9IG9wdGlvbnMucHJvbWlzaWZ5O1xuICAgICAgICB2YXIgbmV4dFRpY2sgPSBvcHRpb25zLm5leHRUaWNrO1xuICAgICAgICB2YXIgb2JqZWN0aWZ5ID0gb3B0aW9ucy5vYmplY3RpZnk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhc3luYyB8fCBuZXh0VGljayB8fCBwcm9taXNpZnkpIHtcbiAgICAgICAgdmFyIF9saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgICAgICB2YXIgX29yaWdpbiA9IGxpc3RlbmVyLl9vcmlnaW4gfHwgbGlzdGVuZXI7XG5cbiAgICAgICAgaWYgKG5leHRUaWNrICYmICFuZXh0VGlja1N1cHBvcnRlZCkge1xuICAgICAgICAgIHRocm93IEVycm9yKCdwcm9jZXNzLm5leHRUaWNrIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9taXNpZnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHByb21pc2lmeSA9IGxpc3RlbmVyLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdBc3luY0Z1bmN0aW9uJztcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgICAgICB2YXIgZXZlbnQgPSB0aGlzLmV2ZW50O1xuXG4gICAgICAgICAgcmV0dXJuIHByb21pc2lmeSA/IChuZXh0VGljayA/IFByb21pc2UucmVzb2x2ZSgpIDogbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIF9zZXRJbW1lZGlhdGUocmVzb2x2ZSk7XG4gICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb250ZXh0LmV2ZW50ID0gZXZlbnQ7XG4gICAgICAgICAgICByZXR1cm4gX2xpc3RlbmVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpXG4gICAgICAgICAgfSkpIDogKG5leHRUaWNrID8gcHJvY2Vzcy5uZXh0VGljayA6IF9zZXRJbW1lZGlhdGUpKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnRleHQuZXZlbnQgPSBldmVudDtcbiAgICAgICAgICAgIF9saXN0ZW5lci5hcHBseShjb250ZXh0LCBhcmdzKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGxpc3RlbmVyLl9hc3luYyA9IHRydWU7XG4gICAgICAgIGxpc3RlbmVyLl9vcmlnaW4gPSBfb3JpZ2luO1xuICAgICAgfVxuXG4gICAgcmV0dXJuIFtsaXN0ZW5lciwgb2JqZWN0aWZ5PyBuZXcgTGlzdGVuZXIodGhpcywgZXZlbnQsIGxpc3RlbmVyKTogdGhpc107XG4gIH1cblxuICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIoY29uZikge1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIHRoaXMuX25ld0xpc3RlbmVyID0gZmFsc2U7XG4gICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXIgPSBmYWxzZTtcbiAgICB0aGlzLnZlcmJvc2VNZW1vcnlMZWFrID0gZmFsc2U7XG4gICAgY29uZmlndXJlLmNhbGwodGhpcywgY29uZik7XG4gIH1cblxuICBFdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyMiA9IEV2ZW50RW1pdHRlcjsgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIGV4cG9ydGluZyBFdmVudEVtaXR0ZXIgcHJvcGVydHlcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlblRvPSBmdW5jdGlvbih0YXJnZXQsIGV2ZW50cywgb3B0aW9ucyl7XG4gICAgaWYodHlwZW9mIHRhcmdldCE9PSdvYmplY3QnKXtcbiAgICAgIHRocm93IFR5cGVFcnJvcigndGFyZ2V0IG11c3RzIGJlIGFuIG9iamVjdCcpO1xuICAgIH1cblxuICAgIHZhciBlbWl0dGVyPSB0aGlzO1xuXG4gICAgb3B0aW9ucyA9IHJlc29sdmVPcHRpb25zKG9wdGlvbnMsIHtcbiAgICAgIG9uOiB1bmRlZmluZWQsXG4gICAgICBvZmY6IHVuZGVmaW5lZCxcbiAgICAgIHJlZHVjZXJzOiB1bmRlZmluZWRcbiAgICB9LCB7XG4gICAgICBvbjogZnVuY3Rpb25SZWR1Y2VyLFxuICAgICAgb2ZmOiBmdW5jdGlvblJlZHVjZXIsXG4gICAgICByZWR1Y2Vyczogb2JqZWN0RnVuY3Rpb25SZWR1Y2VyXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW4oZXZlbnRzKXtcbiAgICAgIGlmKHR5cGVvZiBldmVudHMhPT0nb2JqZWN0Jyl7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignZXZlbnRzIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWR1Y2Vycz0gb3B0aW9ucy5yZWR1Y2VycztcbiAgICAgIHZhciBpbmRleD0gZmluZFRhcmdldEluZGV4LmNhbGwoZW1pdHRlciwgdGFyZ2V0KTtcbiAgICAgIHZhciBvYnNlcnZlcjtcblxuICAgICAgaWYoaW5kZXg9PT0tMSl7XG4gICAgICAgIG9ic2VydmVyPSBuZXcgVGFyZ2V0T2JzZXJ2ZXIoZW1pdHRlciwgdGFyZ2V0LCBvcHRpb25zKTtcbiAgICAgIH1lbHNle1xuICAgICAgICBvYnNlcnZlcj0gZW1pdHRlci5fb2JzZXJ2ZXJzW2luZGV4XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXM9IG93bktleXMoZXZlbnRzKTtcbiAgICAgIHZhciBsZW49IGtleXMubGVuZ3RoO1xuICAgICAgdmFyIGV2ZW50O1xuICAgICAgdmFyIGlzU2luZ2xlUmVkdWNlcj0gdHlwZW9mIHJlZHVjZXJzPT09J2Z1bmN0aW9uJztcblxuICAgICAgZm9yKHZhciBpPTA7IGk8bGVuOyBpKyspe1xuICAgICAgICBldmVudD0ga2V5c1tpXTtcbiAgICAgICAgb2JzZXJ2ZXIuc3Vic2NyaWJlKFxuICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICBldmVudHNbZXZlbnRdIHx8IGV2ZW50LFxuICAgICAgICAgICAgaXNTaW5nbGVSZWR1Y2VyID8gcmVkdWNlcnMgOiByZWR1Y2VycyAmJiByZWR1Y2Vyc1tldmVudF1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpc0FycmF5KGV2ZW50cyk/XG4gICAgICAgIGxpc3Rlbih0b09iamVjdChldmVudHMpKSA6XG4gICAgICAgICh0eXBlb2YgZXZlbnRzPT09J3N0cmluZyc/IGxpc3Rlbih0b09iamVjdChldmVudHMuc3BsaXQoL1xccysvKSkpOiBsaXN0ZW4oZXZlbnRzKSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnN0b3BMaXN0ZW5pbmdUbyA9IGZ1bmN0aW9uICh0YXJnZXQsIGV2ZW50KSB7XG4gICAgdmFyIG9ic2VydmVycyA9IHRoaXMuX29ic2VydmVycztcblxuICAgIGlmKCFvYnNlcnZlcnMpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBpID0gb2JzZXJ2ZXJzLmxlbmd0aDtcbiAgICB2YXIgb2JzZXJ2ZXI7XG4gICAgdmFyIG1hdGNoZWQ9IGZhbHNlO1xuXG4gICAgaWYodGFyZ2V0ICYmIHR5cGVvZiB0YXJnZXQhPT0nb2JqZWN0Jyl7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ3RhcmdldCBzaG91bGQgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgIG9ic2VydmVyID0gb2JzZXJ2ZXJzW2ldO1xuICAgICAgaWYgKCF0YXJnZXQgfHwgb2JzZXJ2ZXIuX3RhcmdldCA9PT0gdGFyZ2V0KSB7XG4gICAgICAgIG9ic2VydmVyLnVuc3Vic2NyaWJlKGV2ZW50KTtcbiAgICAgICAgbWF0Y2hlZD0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2hlZDtcbiAgfTtcblxuICAvLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuXG4gIC8vIDEwIGxpc3RlbmVycyBhcmUgYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaFxuICAvLyBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbiAgLy9cbiAgLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4gIC8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUuZGVsaW1pdGVyID0gJy4nO1xuXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikge1xuICAgIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gICAgICBpZiAoIXRoaXMuX2NvbmYpIHRoaXMuX2NvbmYgPSB7fTtcbiAgICAgIHRoaXMuX2NvbmYubWF4TGlzdGVuZXJzID0gbjtcbiAgICB9XG4gIH07XG5cbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4TGlzdGVuZXJzO1xuICB9O1xuXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnQgPSAnJztcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fb25jZShldmVudCwgZm4sIGZhbHNlLCBvcHRpb25zKTtcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fb25jZShldmVudCwgZm4sIHRydWUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUuX29uY2UgPSBmdW5jdGlvbihldmVudCwgZm4sIHByZXBlbmQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFueShldmVudCwgMSwgZm4sIHByZXBlbmQsIG9wdGlvbnMpO1xuICB9O1xuXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUubWFueSA9IGZ1bmN0aW9uKGV2ZW50LCB0dGwsIGZuLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hbnkoZXZlbnQsIHR0bCwgZm4sIGZhbHNlLCBvcHRpb25zKTtcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRNYW55ID0gZnVuY3Rpb24oZXZlbnQsIHR0bCwgZm4sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFueShldmVudCwgdHRsLCBmbiwgdHJ1ZSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWFueSA9IGZ1bmN0aW9uKGV2ZW50LCB0dGwsIGZuLCBwcmVwZW5kLCBvcHRpb25zKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYW55IG9ubHkgYWNjZXB0cyBpbnN0YW5jZXMgb2YgRnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmICgtLXR0bCA9PT0gMCkge1xuICAgICAgICBzZWxmLm9mZihldmVudCwgbGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXIuX29yaWdpbiA9IGZuO1xuXG4gICAgcmV0dXJuIHRoaXMuX29uKGV2ZW50LCBsaXN0ZW5lciwgcHJlcGVuZCwgb3B0aW9ucyk7XG4gIH07XG5cbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHMgJiYgIXRoaXMuX2FsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuX2V2ZW50cyB8fCBpbml0LmNhbGwodGhpcyk7XG5cbiAgICB2YXIgdHlwZSA9IGFyZ3VtZW50c1swXSwgbnMsIHdpbGRjYXJkPSB0aGlzLndpbGRjYXJkO1xuICAgIHZhciBhcmdzLGwsaSxqLCBjb250YWluc1N5bWJvbDtcblxuICAgIGlmICh0eXBlID09PSAnbmV3TGlzdGVuZXInICYmICF0aGlzLl9uZXdMaXN0ZW5lcikge1xuICAgICAgaWYgKCF0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh3aWxkY2FyZCkge1xuICAgICAgbnM9IHR5cGU7XG4gICAgICBpZih0eXBlIT09J25ld0xpc3RlbmVyJyAmJiB0eXBlIT09J3JlbW92ZUxpc3RlbmVyJyl7XG4gICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBsID0gdHlwZS5sZW5ndGg7XG4gICAgICAgICAgaWYgKHN5bWJvbHNTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0eXBlW2ldID09PSAnc3ltYm9sJykge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5zU3ltYm9sID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWNvbnRhaW5zU3ltYm9sKSB7XG4gICAgICAgICAgICB0eXBlID0gdHlwZS5qb2luKHRoaXMuZGVsaW1pdGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYWwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBoYW5kbGVyO1xuXG4gICAgaWYgKHRoaXMuX2FsbCAmJiB0aGlzLl9hbGwubGVuZ3RoKSB7XG4gICAgICBoYW5kbGVyID0gdGhpcy5fYWxsLnNsaWNlKCk7XG5cbiAgICAgIGZvciAoaSA9IDAsIGwgPSBoYW5kbGVyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzLmV2ZW50ID0gdHlwZTtcbiAgICAgICAgc3dpdGNoIChhbCkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaGFuZGxlcltpXS5jYWxsKHRoaXMsIHR5cGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgaGFuZGxlcltpXS5jYWxsKHRoaXMsIHR5cGUsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBoYW5kbGVyW2ldLmNhbGwodGhpcywgdHlwZSwgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGhhbmRsZXJbaV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh3aWxkY2FyZCkge1xuICAgICAgaGFuZGxlciA9IFtdO1xuICAgICAgc2VhcmNoTGlzdGVuZXJUcmVlLmNhbGwodGhpcywgaGFuZGxlciwgbnMsIHRoaXMubGlzdGVuZXJUcmVlLCAwLCBsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLmV2ZW50ID0gdHlwZTtcbiAgICAgICAgc3dpdGNoIChhbCkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGFyZ3MgPSBuZXcgQXJyYXkoYWwgLSAxKTtcbiAgICAgICAgICBmb3IgKGogPSAxOyBqIDwgYWw7IGorKykgYXJnc1tqIC0gMV0gPSBhcmd1bWVudHNbal07XG4gICAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoaGFuZGxlcikge1xuICAgICAgICAvLyBuZWVkIHRvIG1ha2UgY29weSBvZiBoYW5kbGVycyBiZWNhdXNlIGxpc3QgY2FuIGNoYW5nZSBpbiB0aGUgbWlkZGxlXG4gICAgICAgIC8vIG9mIGVtaXQgY2FsbFxuICAgICAgICBoYW5kbGVyID0gaGFuZGxlci5zbGljZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChoYW5kbGVyICYmIGhhbmRsZXIubGVuZ3RoKSB7XG4gICAgICBpZiAoYWwgPiAzKSB7XG4gICAgICAgIGFyZ3MgPSBuZXcgQXJyYXkoYWwgLSAxKTtcbiAgICAgICAgZm9yIChqID0gMTsgaiA8IGFsOyBqKyspIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMCwgbCA9IGhhbmRsZXIubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMuZXZlbnQgPSB0eXBlO1xuICAgICAgICBzd2l0Y2ggKGFsKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBoYW5kbGVyW2ldLmNhbGwodGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBoYW5kbGVyW2ldLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGhhbmRsZXJbaV0uY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaGFuZGxlcltpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmICghdGhpcy5pZ25vcmVFcnJvcnMgJiYgIXRoaXMuX2FsbCAmJiB0eXBlID09PSAnZXJyb3InKSB7XG4gICAgICBpZiAoYXJndW1lbnRzWzFdIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgYXJndW1lbnRzWzFdOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5jYXVnaHQsIHVuc3BlY2lmaWVkICdlcnJvcicgZXZlbnQuXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAhIXRoaXMuX2FsbDtcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXRBc3luYyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5fZXZlbnRzICYmICF0aGlzLl9hbGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLl9ldmVudHMgfHwgaW5pdC5jYWxsKHRoaXMpO1xuXG4gICAgdmFyIHR5cGUgPSBhcmd1bWVudHNbMF0sIHdpbGRjYXJkPSB0aGlzLndpbGRjYXJkLCBucywgY29udGFpbnNTeW1ib2w7XG4gICAgdmFyIGFyZ3MsbCxpLGo7XG5cbiAgICBpZiAodHlwZSA9PT0gJ25ld0xpc3RlbmVyJyAmJiAhdGhpcy5fbmV3TGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbZmFsc2VdKTsgfVxuICAgIH1cblxuICAgIGlmICh3aWxkY2FyZCkge1xuICAgICAgbnM9IHR5cGU7XG4gICAgICBpZih0eXBlIT09J25ld0xpc3RlbmVyJyAmJiB0eXBlIT09J3JlbW92ZUxpc3RlbmVyJyl7XG4gICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBsID0gdHlwZS5sZW5ndGg7XG4gICAgICAgICAgaWYgKHN5bWJvbHNTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0eXBlW2ldID09PSAnc3ltYm9sJykge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5zU3ltYm9sID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWNvbnRhaW5zU3ltYm9sKSB7XG4gICAgICAgICAgICB0eXBlID0gdHlwZS5qb2luKHRoaXMuZGVsaW1pdGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJvbWlzZXM9IFtdO1xuXG4gICAgdmFyIGFsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaGFuZGxlcjtcblxuICAgIGlmICh0aGlzLl9hbGwpIHtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLl9hbGwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMuZXZlbnQgPSB0eXBlO1xuICAgICAgICBzd2l0Y2ggKGFsKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMuX2FsbFtpXS5jYWxsKHRoaXMsIHR5cGUpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHByb21pc2VzLnB1c2godGhpcy5fYWxsW2ldLmNhbGwodGhpcywgdHlwZSwgYXJndW1lbnRzWzFdKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMuX2FsbFtpXS5jYWxsKHRoaXMsIHR5cGUsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLl9hbGxbaV0uYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAod2lsZGNhcmQpIHtcbiAgICAgIGhhbmRsZXIgPSBbXTtcbiAgICAgIHNlYXJjaExpc3RlbmVyVHJlZS5jYWxsKHRoaXMsIGhhbmRsZXIsIG5zLCB0aGlzLmxpc3RlbmVyVHJlZSwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmV2ZW50ID0gdHlwZTtcbiAgICAgIHN3aXRjaCAoYWwpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcHJvbWlzZXMucHVzaChoYW5kbGVyLmNhbGwodGhpcykpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcHJvbWlzZXMucHVzaChoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBwcm9taXNlcy5wdXNoKGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFyZ3MgPSBuZXcgQXJyYXkoYWwgLSAxKTtcbiAgICAgICAgZm9yIChqID0gMTsgaiA8IGFsOyBqKyspIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgICBwcm9taXNlcy5wdXNoKGhhbmRsZXIuYXBwbHkodGhpcywgYXJncykpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaGFuZGxlciAmJiBoYW5kbGVyLmxlbmd0aCkge1xuICAgICAgaGFuZGxlciA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICAgIGlmIChhbCA+IDMpIHtcbiAgICAgICAgYXJncyA9IG5ldyBBcnJheShhbCAtIDEpO1xuICAgICAgICBmb3IgKGogPSAxOyBqIDwgYWw7IGorKykgYXJnc1tqIC0gMV0gPSBhcmd1bWVudHNbal07XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwLCBsID0gaGFuZGxlci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5ldmVudCA9IHR5cGU7XG4gICAgICAgIHN3aXRjaCAoYWwpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHByb21pc2VzLnB1c2goaGFuZGxlcltpXS5jYWxsKHRoaXMpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHByb21pc2VzLnB1c2goaGFuZGxlcltpXS5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgcHJvbWlzZXMucHVzaChoYW5kbGVyW2ldLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBwcm9taXNlcy5wdXNoKGhhbmRsZXJbaV0uYXBwbHkodGhpcywgYXJncykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghdGhpcy5pZ25vcmVFcnJvcnMgJiYgIXRoaXMuX2FsbCAmJiB0eXBlID09PSAnZXJyb3InKSB7XG4gICAgICBpZiAoYXJndW1lbnRzWzFdIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGFyZ3VtZW50c1sxXSk7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJVbmNhdWdodCwgdW5zcGVjaWZpZWQgJ2Vycm9yJyBldmVudC5cIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fb24odHlwZSwgbGlzdGVuZXIsIGZhbHNlLCBvcHRpb25zKTtcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX29uKHR5cGUsIGxpc3RlbmVyLCB0cnVlLCBvcHRpb25zKTtcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uQW55ID0gZnVuY3Rpb24oZm4pIHtcbiAgICByZXR1cm4gdGhpcy5fb25BbnkoZm4sIGZhbHNlKTtcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRBbnkgPSBmdW5jdGlvbihmbikge1xuICAgIHJldHVybiB0aGlzLl9vbkFueShmbiwgdHJ1ZSk7XG4gIH07XG5cbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fb25BbnkgPSBmdW5jdGlvbihmbiwgcHJlcGVuZCl7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdvbkFueSBvbmx5IGFjY2VwdHMgaW5zdGFuY2VzIG9mIEZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9hbGwpIHtcbiAgICAgIHRoaXMuX2FsbCA9IFtdO1xuICAgIH1cblxuICAgIC8vIEFkZCB0aGUgZnVuY3Rpb24gdG8gdGhlIGV2ZW50IGxpc3RlbmVyIGNvbGxlY3Rpb24uXG4gICAgaWYocHJlcGVuZCl7XG4gICAgICB0aGlzLl9hbGwudW5zaGlmdChmbik7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLl9hbGwucHVzaChmbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fb24gPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCwgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fb25BbnkodHlwZSwgbGlzdGVuZXIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdvbiBvbmx5IGFjY2VwdHMgaW5zdGFuY2VzIG9mIEZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHRoaXMuX2V2ZW50cyB8fCBpbml0LmNhbGwodGhpcyk7XG5cbiAgICB2YXIgcmV0dXJuVmFsdWU9IHRoaXMsIHRlbXA7XG5cbiAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0ZW1wID0gc2V0dXBMaXN0ZW5lci5jYWxsKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICAgIGxpc3RlbmVyID0gdGVtcFswXTtcbiAgICAgIHJldHVyblZhbHVlID0gdGVtcFsxXTtcbiAgICB9XG5cbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09IFwibmV3TGlzdGVuZXJzXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJzXCIuXG4gICAgaWYgKHRoaXMuX25ld0xpc3RlbmVyKSB7XG4gICAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLndpbGRjYXJkKSB7XG4gICAgICBncm93TGlzdGVuZXJUcmVlLmNhbGwodGhpcywgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpO1xuICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKSB7XG4gICAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuX2V2ZW50c1t0eXBlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBDaGFuZ2UgdG8gYXJyYXkuXG4gICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV1dO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhZGRcbiAgICAgIGlmKHByZXBlbmQpe1xuICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0udW5zaGlmdChsaXN0ZW5lcik7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgICAgaWYgKFxuICAgICAgICAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCAmJlxuICAgICAgICB0aGlzLl9tYXhMaXN0ZW5lcnMgPiAwICYmXG4gICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiB0aGlzLl9tYXhMaXN0ZW5lcnNcbiAgICAgICkge1xuICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcbiAgICAgICAgbG9nUG9zc2libGVNZW1vcnlMZWFrLmNhbGwodGhpcywgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCwgdHlwZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9O1xuXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlbW92ZUxpc3RlbmVyIG9ubHkgdGFrZXMgaW5zdGFuY2VzIG9mIEZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZXJzLGxlYWZzPVtdO1xuXG4gICAgaWYodGhpcy53aWxkY2FyZCkge1xuICAgICAgdmFyIG5zID0gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnID8gdHlwZS5zcGxpdCh0aGlzLmRlbGltaXRlcikgOiB0eXBlLnNsaWNlKCk7XG4gICAgICBsZWFmcyA9IHNlYXJjaExpc3RlbmVyVHJlZS5jYWxsKHRoaXMsIG51bGwsIG5zLCB0aGlzLmxpc3RlbmVyVHJlZSwgMCk7XG4gICAgICBpZighbGVhZnMpIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBkb2VzIG5vdCB1c2UgbGlzdGVuZXJzKCksIHNvIG5vIHNpZGUgZWZmZWN0IG9mIGNyZWF0aW5nIF9ldmVudHNbdHlwZV1cbiAgICAgIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKSByZXR1cm4gdGhpcztcbiAgICAgIGhhbmRsZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgICAgbGVhZnMucHVzaCh7X2xpc3RlbmVyczpoYW5kbGVyc30pO1xuICAgIH1cblxuICAgIGZvciAodmFyIGlMZWFmPTA7IGlMZWFmPGxlYWZzLmxlbmd0aDsgaUxlYWYrKykge1xuICAgICAgdmFyIGxlYWYgPSBsZWFmc1tpTGVhZl07XG4gICAgICBoYW5kbGVycyA9IGxlYWYuX2xpc3RlbmVycztcbiAgICAgIGlmIChpc0FycmF5KGhhbmRsZXJzKSkge1xuXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IC0xO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChoYW5kbGVyc1tpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAgIChoYW5kbGVyc1tpXS5saXN0ZW5lciAmJiBoYW5kbGVyc1tpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHx8XG4gICAgICAgICAgICAoaGFuZGxlcnNbaV0uX29yaWdpbiAmJiBoYW5kbGVyc1tpXS5fb3JpZ2luID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRoaXMud2lsZGNhcmQpIHtcbiAgICAgICAgICBsZWFmLl9saXN0ZW5lcnMuc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0uc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYW5kbGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZih0aGlzLndpbGRjYXJkKSB7XG4gICAgICAgICAgICBkZWxldGUgbGVhZi5fbGlzdGVuZXJzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICB0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLCB0eXBlLCBsaXN0ZW5lcik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChoYW5kbGVycyA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgKGhhbmRsZXJzLmxpc3RlbmVyICYmIGhhbmRsZXJzLmxpc3RlbmVyID09PSBsaXN0ZW5lcikgfHxcbiAgICAgICAgKGhhbmRsZXJzLl9vcmlnaW4gJiYgaGFuZGxlcnMuX29yaWdpbiA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIGlmKHRoaXMud2lsZGNhcmQpIHtcbiAgICAgICAgICBkZWxldGUgbGVhZi5fbGlzdGVuZXJzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3JlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgIHRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyXCIsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxpc3RlbmVyVHJlZSAmJiByZWN1cnNpdmVseUdhcmJhZ2VDb2xsZWN0KHRoaXMubGlzdGVuZXJUcmVlKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmQW55ID0gZnVuY3Rpb24oZm4pIHtcbiAgICB2YXIgaSA9IDAsIGwgPSAwLCBmbnM7XG4gICAgaWYgKGZuICYmIHRoaXMuX2FsbCAmJiB0aGlzLl9hbGwubGVuZ3RoID4gMCkge1xuICAgICAgZm5zID0gdGhpcy5fYWxsO1xuICAgICAgZm9yKGkgPSAwLCBsID0gZm5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZihmbiA9PT0gZm5zW2ldKSB7XG4gICAgICAgICAgZm5zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBpZiAodGhpcy5fcmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lckFueVwiLCBmbik7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm5zID0gdGhpcy5fYWxsO1xuICAgICAgaWYgKHRoaXMuX3JlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgIGZvcihpID0gMCwgbCA9IGZucy5sZW5ndGg7IGkgPCBsOyBpKyspXG4gICAgICAgICAgdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJBbnlcIiwgZm5zW2ldKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2FsbCA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmY7XG5cbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgIGlmICh0eXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICF0aGlzLl9ldmVudHMgfHwgaW5pdC5jYWxsKHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMud2lsZGNhcmQpIHtcbiAgICAgIHZhciBsZWFmcyA9IHNlYXJjaExpc3RlbmVyVHJlZS5jYWxsKHRoaXMsIG51bGwsIHR5cGUsIHRoaXMubGlzdGVuZXJUcmVlLCAwKSwgbGVhZiwgaTtcbiAgICAgIGlmICghbGVhZnMpIHJldHVybiB0aGlzO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlYWZzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxlYWYgPSBsZWFmc1tpXTtcbiAgICAgICAgbGVhZi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMubGlzdGVuZXJUcmVlICYmIHJlY3Vyc2l2ZWx5R2FyYmFnZUNvbGxlY3QodGhpcy5saXN0ZW5lclRyZWUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fZXZlbnRzKSB7XG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdmFyIF9ldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgdmFyIGtleXMsIGxpc3RlbmVycywgYWxsTGlzdGVuZXJzO1xuICAgIHZhciBpO1xuICAgIHZhciBsaXN0ZW5lclRyZWU7XG5cbiAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodGhpcy53aWxkY2FyZCkge1xuICAgICAgICB0aHJvdyBFcnJvcignZXZlbnQgbmFtZSByZXF1aXJlZCBmb3Igd2lsZGNhcmQgZW1pdHRlcicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV9ldmVudHMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICBrZXlzID0gb3duS2V5cyhfZXZlbnRzKTtcbiAgICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICAgIGFsbExpc3RlbmVycyA9IFtdO1xuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgbGlzdGVuZXJzID0gX2V2ZW50c1trZXlzW2ldXTtcbiAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBhbGxMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFsbExpc3RlbmVycy5wdXNoLmFwcGx5KGFsbExpc3RlbmVycywgbGlzdGVuZXJzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFsbExpc3RlbmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMud2lsZGNhcmQpIHtcbiAgICAgICAgbGlzdGVuZXJUcmVlPSB0aGlzLmxpc3RlbmVyVHJlZTtcbiAgICAgICAgaWYoIWxpc3RlbmVyVHJlZSkgcmV0dXJuIFtdO1xuICAgICAgICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgICAgICAgdmFyIG5zID0gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnID8gdHlwZS5zcGxpdCh0aGlzLmRlbGltaXRlcikgOiB0eXBlLnNsaWNlKCk7XG4gICAgICAgIHNlYXJjaExpc3RlbmVyVHJlZS5jYWxsKHRoaXMsIGhhbmRsZXJzLCBucywgbGlzdGVuZXJUcmVlLCAwKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXJzO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV9ldmVudHMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcnMgPSBfZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAoIWxpc3RlbmVycykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJyA/IFtsaXN0ZW5lcnNdIDogbGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbihuc0FzQXJyYXkpe1xuICAgIHZhciBfZXZlbnRzPSB0aGlzLl9ldmVudHM7XG4gICAgcmV0dXJuIHRoaXMud2lsZGNhcmQ/IGNvbGxlY3RUcmVlRXZlbnRzLmNhbGwodGhpcywgdGhpcy5saXN0ZW5lclRyZWUsIFtdLCBudWxsLCBuc0FzQXJyYXkpIDogKF9ldmVudHM/IG93bktleXMoX2V2ZW50cykgOiBbXSk7XG4gIH07XG5cbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24odHlwZSkge1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7XG4gIH07XG5cbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgIGlmICh0aGlzLndpbGRjYXJkKSB7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgICAgIHZhciBucyA9IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyA/IHR5cGUuc3BsaXQodGhpcy5kZWxpbWl0ZXIpIDogdHlwZS5zbGljZSgpO1xuICAgICAgc2VhcmNoTGlzdGVuZXJUcmVlLmNhbGwodGhpcywgaGFuZGxlcnMsIG5zLCB0aGlzLmxpc3RlbmVyVHJlZSwgMCk7XG4gICAgICByZXR1cm4gaGFuZGxlcnMubGVuZ3RoID4gMDtcbiAgICB9XG5cbiAgICB2YXIgX2V2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICB2YXIgX2FsbCA9IHRoaXMuX2FsbDtcblxuICAgIHJldHVybiAhIShfYWxsICYmIF9hbGwubGVuZ3RoIHx8IF9ldmVudHMgJiYgKHR5cGUgPT09IHVuZGVmaW5lZCA/IG93bktleXMoX2V2ZW50cykubGVuZ3RoIDogX2V2ZW50c1t0eXBlXSkpO1xuICB9O1xuXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzQW55ID0gZnVuY3Rpb24oKSB7XG5cbiAgICBpZih0aGlzLl9hbGwpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hbGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICB9O1xuXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUud2FpdEZvciA9IGZ1bmN0aW9uIChldmVudCwgb3B0aW9ucykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvcHRpb25zO1xuICAgIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgb3B0aW9ucyA9IHt0aW1lb3V0OiBvcHRpb25zfTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9wdGlvbnMgPSB7ZmlsdGVyOiBvcHRpb25zfTtcbiAgICB9XG5cbiAgICBvcHRpb25zPSByZXNvbHZlT3B0aW9ucyhvcHRpb25zLCB7XG4gICAgICB0aW1lb3V0OiAwLFxuICAgICAgZmlsdGVyOiB1bmRlZmluZWQsXG4gICAgICBoYW5kbGVFcnJvcjogZmFsc2UsXG4gICAgICBQcm9taXNlOiBQcm9taXNlLFxuICAgICAgb3ZlcmxvYWQ6IGZhbHNlXG4gICAgfSwge1xuICAgICAgZmlsdGVyOiBmdW5jdGlvblJlZHVjZXIsXG4gICAgICBQcm9taXNlOiBjb25zdHJ1Y3RvclJlZHVjZXJcbiAgICB9KTtcblxuICAgIHJldHVybiBtYWtlQ2FuY2VsYWJsZVByb21pc2Uob3B0aW9ucy5Qcm9taXNlLCBmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0LCBvbkNhbmNlbCkge1xuICAgICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICAgIHZhciBmaWx0ZXI9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICBpZiAoZmlsdGVyICYmICFmaWx0ZXIuYXBwbHkoc2VsZiwgYXJndW1lbnRzKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLm9mZihldmVudCwgbGlzdGVuZXIpO1xuICAgICAgICBpZiAob3B0aW9ucy5oYW5kbGVFcnJvcikge1xuICAgICAgICAgIHZhciBlcnIgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHRvQXJyYXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5zbGljZSgxKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZSh0b0FycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG9uQ2FuY2VsKGZ1bmN0aW9uKCl7XG4gICAgICAgIHNlbGYub2ZmKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICB9KTtcblxuICAgICAgc2VsZi5fb24oZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgfSwge1xuICAgICAgdGltZW91dDogb3B0aW9ucy50aW1lb3V0LFxuICAgICAgb3ZlcmxvYWQ6IG9wdGlvbnMub3ZlcmxvYWRcbiAgICB9KVxuICB9O1xuXG4gIGZ1bmN0aW9uIG9uY2UoZW1pdHRlciwgbmFtZSwgb3B0aW9ucykge1xuICAgIG9wdGlvbnM9IHJlc29sdmVPcHRpb25zKG9wdGlvbnMsIHtcbiAgICAgIFByb21pc2U6IFByb21pc2UsXG4gICAgICB0aW1lb3V0OiAwLFxuICAgICAgb3ZlcmxvYWQ6IGZhbHNlXG4gICAgfSwge1xuICAgICAgUHJvbWlzZTogY29uc3RydWN0b3JSZWR1Y2VyXG4gICAgfSk7XG5cbiAgICB2YXIgX1Byb21pc2U9IG9wdGlvbnMuUHJvbWlzZTtcblxuICAgIHJldHVybiBtYWtlQ2FuY2VsYWJsZVByb21pc2UoX1Byb21pc2UsIGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCwgb25DYW5jZWwpe1xuICAgICAgdmFyIGhhbmRsZXI7XG4gICAgICBpZiAodHlwZW9mIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBoYW5kbGVyPSAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlc29sdmUodG9BcnJheS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfTtcblxuICAgICAgICBvbkNhbmNlbChmdW5jdGlvbigpe1xuICAgICAgICAgIGVtaXR0ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGhhbmRsZXIsXG4gICAgICAgICAgICB7b25jZTogdHJ1ZX1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGVycm9yTGlzdGVuZXIgJiYgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgICAgcmVzb2x2ZSh0b0FycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGVycm9yTGlzdGVuZXI7XG5cbiAgICAgIGlmIChuYW1lICE9PSAnZXJyb3InKSB7XG4gICAgICAgIGVycm9yTGlzdGVuZXIgPSBmdW5jdGlvbiAoZXJyKXtcbiAgICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKG5hbWUsIGV2ZW50TGlzdGVuZXIpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGVtaXR0ZXIub25jZSgnZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgb25DYW5jZWwoZnVuY3Rpb24oKXtcbiAgICAgICAgZXJyb3JMaXN0ZW5lciAmJiBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKG5hbWUsIGV2ZW50TGlzdGVuZXIpO1xuICAgICAgfSk7XG5cbiAgICAgIGVtaXR0ZXIub25jZShuYW1lLCBldmVudExpc3RlbmVyKTtcbiAgICB9LCB7XG4gICAgICB0aW1lb3V0OiBvcHRpb25zLnRpbWVvdXQsXG4gICAgICBvdmVybG9hZDogb3B0aW9ucy5vdmVybG9hZFxuICAgIH0pO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZT0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhFdmVudEVtaXR0ZXIsIHtcbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHByb3RvdHlwZS5fbWF4TGlzdGVuZXJzO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXIuaXNOYU4obikpIHtcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXInKVxuICAgICAgICB9XG4gICAgICAgIHByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gbjtcbiAgICAgIH0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSxcbiAgICBvbmNlOiB7XG4gICAgICB2YWx1ZTogb25jZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhwcm90b3R5cGUsIHtcbiAgICAgIF9tYXhMaXN0ZW5lcnM6IHtcbiAgICAgICAgICB2YWx1ZTogZGVmYXVsdE1heExpc3RlbmVycyxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBfb2JzZXJ2ZXJzOiB7dmFsdWU6IG51bGwsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9XG4gIH0pO1xuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBFdmVudEVtaXR0ZXI7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBnbG9iYWwgZm9yIGFueSBraW5kIG9mIGVudmlyb25tZW50LlxuICAgIHZhciBfZ2xvYmFsPSBuZXcgRnVuY3Rpb24oJycsJ3JldHVybiB0aGlzJykoKTtcbiAgICBfZ2xvYmFsLkV2ZW50RW1pdHRlcjIgPSBFdmVudEVtaXR0ZXI7XG4gIH1cbn0oKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/eventemitter2/lib/eventemitter2.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash.isequal/index.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash.isequal/index.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && \"object\" == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash.isequal/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/process.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = __webpack_require__.g.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = __webpack_require__.g.process) == null ? void 0 : _global_process1.env) === \"object\" ? __webpack_require__.g.process : __webpack_require__(/*! next/dist/compiled/process */ \"(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js\");\n\n//# sourceMappingURL=process.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLHFDQUFxQyxxQkFBTSxpRkFBaUYscUJBQU0sa0VBQWtFLHFCQUFNLFdBQVcsbUJBQU8sQ0FBQyw0R0FBNEI7O0FBRXpQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanM/OGQ5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfZ2xvYmFsX3Byb2Nlc3MsIF9nbG9iYWxfcHJvY2VzczE7XG5tb2R1bGUuZXhwb3J0cyA9ICgoX2dsb2JhbF9wcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsX3Byb2Nlc3MuZW52KSAmJiB0eXBlb2YgKChfZ2xvYmFsX3Byb2Nlc3MxID0gZ2xvYmFsLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsX3Byb2Nlc3MxLmVudikgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwucHJvY2VzcyA6IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzc1wiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvY2Vzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/compiled/process/browser.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzcy9icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxZQUFZLE9BQU8sZ0JBQWdCLG1CQUFtQixNQUFNLE1BQU0sNEJBQTRCLG1EQUFtRCwrQkFBK0IscURBQXFELFlBQVksSUFBSSxtQ0FBbUMsYUFBYSxLQUFLLG9CQUFvQixTQUFTLG1CQUFtQixJQUFJLHFDQUFxQyxlQUFlLEtBQUssdUJBQXVCLFNBQVMsdUJBQXVCLElBQUksdUJBQXVCLG1CQUFtQix1QkFBdUIsMkNBQTJDLGFBQWEsdUJBQXVCLElBQUksY0FBYyxTQUFTLElBQUksd0JBQXdCLFNBQVMsMEJBQTBCLDRCQUE0QixxQkFBcUIsdUJBQXVCLGdEQUFnRCxlQUFlLHVCQUF1QixJQUFJLFlBQVksU0FBUyxJQUFJLHNCQUFzQixTQUFTLHdCQUF3QixTQUFTLFlBQVksTUFBTSxTQUFTLDJCQUEyQixXQUFXLE9BQU8sUUFBUSxhQUFhLGNBQWMsS0FBSyxLQUFLLGFBQWEsY0FBYyxzQkFBc0IsTUFBTSxPQUFPLGtDQUFrQyxPQUFPLGVBQWUsU0FBUyxJQUFJLEtBQUssYUFBYSxNQUFNLFlBQVksS0FBSyxXQUFXLE9BQU8sUUFBUSxtQkFBbUIsdUJBQXVCLG9DQUFvQyx1QkFBdUIsWUFBWSxtQkFBbUIsS0FBSyxxQkFBcUIsc0JBQXNCLHFCQUFxQix5QkFBeUIsbUJBQW1CLFdBQVcsYUFBYSw4QkFBOEIsaUNBQWlDLGtCQUFrQixlQUFlLFNBQVMsVUFBVSxhQUFhLGNBQWMsaUJBQWlCLFVBQVUsbUJBQW1CLFlBQVksV0FBVyxzQkFBc0IsMEJBQTBCLFlBQVksdUJBQXVCLDJCQUEyQix3QkFBd0IsVUFBVSxzQkFBc0IscURBQXFELGlCQUFpQixXQUFXLG9CQUFvQixtREFBbUQsbUJBQW1CLFlBQVksU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssK0JBQStCLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3Byb2Nlc3MvYnJvd3Nlci5qcz9kNmRmIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe3ZhciBlPXsyMjk6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5leHBvcnRzPXt9O3ZhciByO3ZhciBuO2Z1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9KGZ1bmN0aW9uKCl7dHJ5e2lmKHR5cGVvZiBzZXRUaW1lb3V0PT09XCJmdW5jdGlvblwiKXtyPXNldFRpbWVvdXR9ZWxzZXtyPWRlZmF1bHRTZXRUaW1vdXR9fWNhdGNoKGUpe3I9ZGVmYXVsdFNldFRpbW91dH10cnl7aWYodHlwZW9mIGNsZWFyVGltZW91dD09PVwiZnVuY3Rpb25cIil7bj1jbGVhclRpbWVvdXR9ZWxzZXtuPWRlZmF1bHRDbGVhclRpbWVvdXR9fWNhdGNoKGUpe249ZGVmYXVsdENsZWFyVGltZW91dH19KSgpO2Z1bmN0aW9uIHJ1blRpbWVvdXQoZSl7aWYocj09PXNldFRpbWVvdXQpe3JldHVybiBzZXRUaW1lb3V0KGUsMCl9aWYoKHI9PT1kZWZhdWx0U2V0VGltb3V0fHwhcikmJnNldFRpbWVvdXQpe3I9c2V0VGltZW91dDtyZXR1cm4gc2V0VGltZW91dChlLDApfXRyeXtyZXR1cm4gcihlLDApfWNhdGNoKHQpe3RyeXtyZXR1cm4gci5jYWxsKG51bGwsZSwwKX1jYXRjaCh0KXtyZXR1cm4gci5jYWxsKHRoaXMsZSwwKX19fWZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChlKXtpZihuPT09Y2xlYXJUaW1lb3V0KXtyZXR1cm4gY2xlYXJUaW1lb3V0KGUpfWlmKChuPT09ZGVmYXVsdENsZWFyVGltZW91dHx8IW4pJiZjbGVhclRpbWVvdXQpe249Y2xlYXJUaW1lb3V0O3JldHVybiBjbGVhclRpbWVvdXQoZSl9dHJ5e3JldHVybiBuKGUpfWNhdGNoKHQpe3RyeXtyZXR1cm4gbi5jYWxsKG51bGwsZSl9Y2F0Y2godCl7cmV0dXJuIG4uY2FsbCh0aGlzLGUpfX19dmFyIGk9W107dmFyIG89ZmFsc2U7dmFyIHU7dmFyIGE9LTE7ZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCl7aWYoIW98fCF1KXtyZXR1cm59bz1mYWxzZTtpZih1Lmxlbmd0aCl7aT11LmNvbmNhdChpKX1lbHNle2E9LTF9aWYoaS5sZW5ndGgpe2RyYWluUXVldWUoKX19ZnVuY3Rpb24gZHJhaW5RdWV1ZSgpe2lmKG8pe3JldHVybn12YXIgZT1ydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7bz10cnVlO3ZhciB0PWkubGVuZ3RoO3doaWxlKHQpe3U9aTtpPVtdO3doaWxlKCsrYTx0KXtpZih1KXt1W2FdLnJ1bigpfX1hPS0xO3Q9aS5sZW5ndGh9dT1udWxsO289ZmFsc2U7cnVuQ2xlYXJUaW1lb3V0KGUpfXQubmV4dFRpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKXtmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXt0W3ItMV09YXJndW1lbnRzW3JdfX1pLnB1c2gobmV3IEl0ZW0oZSx0KSk7aWYoaS5sZW5ndGg9PT0xJiYhbyl7cnVuVGltZW91dChkcmFpblF1ZXVlKX19O2Z1bmN0aW9uIEl0ZW0oZSx0KXt0aGlzLmZ1bj1lO3RoaXMuYXJyYXk9dH1JdGVtLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfTt0LnRpdGxlPVwiYnJvd3NlclwiO3QuYnJvd3Nlcj10cnVlO3QuZW52PXt9O3QuYXJndj1bXTt0LnZlcnNpb249XCJcIjt0LnZlcnNpb25zPXt9O2Z1bmN0aW9uIG5vb3AoKXt9dC5vbj1ub29wO3QuYWRkTGlzdGVuZXI9bm9vcDt0Lm9uY2U9bm9vcDt0Lm9mZj1ub29wO3QucmVtb3ZlTGlzdGVuZXI9bm9vcDt0LnJlbW92ZUFsbExpc3RlbmVycz1ub29wO3QuZW1pdD1ub29wO3QucHJlcGVuZExpc3RlbmVyPW5vb3A7dC5wcmVwZW5kT25jZUxpc3RlbmVyPW5vb3A7dC5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuW119O3QuYmluZGluZz1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX07dC5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn07dC5jaGRpcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3QudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19fTt2YXIgdD17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKHIpe3ZhciBuPXRbcl07aWYobiE9PXVuZGVmaW5lZCl7cmV0dXJuIG4uZXhwb3J0c312YXIgaT10W3JdPXtleHBvcnRzOnt9fTt2YXIgbz10cnVlO3RyeXtlW3JdKGksaS5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO289ZmFsc2V9ZmluYWxseXtpZihvKWRlbGV0ZSB0W3JdfXJldHVybiBpLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciByPV9fbmNjd3Bja19yZXF1aXJlX18oMjI5KTttb2R1bGUuZXhwb3J0cz1yfSkoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/reselect/es/index.js":
/*!*******************************************!*\
  !*** ./node_modules/reselect/es/index.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSelector: function() { return /* binding */ createSelector; },\n/* harmony export */   createSelectorCreator: function() { return /* binding */ createSelectorCreator; },\n/* harmony export */   createStructuredSelector: function() { return /* binding */ createStructuredSelector; },\n/* harmony export */   defaultMemoize: function() { return /* binding */ defaultMemoize; }\n/* harmony export */ });\nfunction defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nfunction createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nvar createSelector = createSelectorCreator(defaultMemoize);\n\nfunction createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZXNlbGVjdC9lcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsWUFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRU87QUFDUCwrRkFBK0YsYUFBYTtBQUM1RztBQUNBOztBQUVBO0FBQ0Esd0VBQXdFLGVBQWU7QUFDdkY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNCQUFzQixZQUFZO0FBQ2xDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPOztBQUVBO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILHlFQUF5RSxlQUFlO0FBQ3hGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSyxJQUFJO0FBQ1QsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9yZXNlbGVjdC9lcy9pbmRleC5qcz83ZWUxIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGRlZmF1bHRFcXVhbGl0eUNoZWNrKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbmZ1bmN0aW9uIGFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsKGVxdWFsaXR5Q2hlY2ssIHByZXYsIG5leHQpIHtcbiAgaWYgKHByZXYgPT09IG51bGwgfHwgbmV4dCA9PT0gbnVsbCB8fCBwcmV2Lmxlbmd0aCAhPT0gbmV4dC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBEbyB0aGlzIGluIGEgZm9yIGxvb3AgKGFuZCBub3QgYSBgZm9yRWFjaGAgb3IgYW4gYGV2ZXJ5YCkgc28gd2UgY2FuIGRldGVybWluZSBlcXVhbGl0eSBhcyBmYXN0IGFzIHBvc3NpYmxlLlxuICB2YXIgbGVuZ3RoID0gcHJldi5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWVxdWFsaXR5Q2hlY2socHJldltpXSwgbmV4dFtpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZW1vaXplKGZ1bmMpIHtcbiAgdmFyIGVxdWFsaXR5Q2hlY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGRlZmF1bHRFcXVhbGl0eUNoZWNrO1xuXG4gIHZhciBsYXN0QXJncyA9IG51bGw7XG4gIHZhciBsYXN0UmVzdWx0ID0gbnVsbDtcbiAgLy8gd2UgcmVmZXJlbmNlIGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyB0aGVtIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFhcmVBcmd1bWVudHNTaGFsbG93bHlFcXVhbChlcXVhbGl0eUNoZWNrLCBsYXN0QXJncywgYXJndW1lbnRzKSkge1xuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIGxhc3RSZXN1bHQgPSBmdW5jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERlcGVuZGVuY2llcyhmdW5jcykge1xuICB2YXIgZGVwZW5kZW5jaWVzID0gQXJyYXkuaXNBcnJheShmdW5jc1swXSkgPyBmdW5jc1swXSA6IGZ1bmNzO1xuXG4gIGlmICghZGVwZW5kZW5jaWVzLmV2ZXJ5KGZ1bmN0aW9uIChkZXApIHtcbiAgICByZXR1cm4gdHlwZW9mIGRlcCA9PT0gJ2Z1bmN0aW9uJztcbiAgfSkpIHtcbiAgICB2YXIgZGVwZW5kZW5jeVR5cGVzID0gZGVwZW5kZW5jaWVzLm1hcChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGRlcDtcbiAgICB9KS5qb2luKCcsICcpO1xuICAgIHRocm93IG5ldyBFcnJvcignU2VsZWN0b3IgY3JlYXRvcnMgZXhwZWN0IGFsbCBpbnB1dC1zZWxlY3RvcnMgdG8gYmUgZnVuY3Rpb25zLCAnICsgKCdpbnN0ZWFkIHJlY2VpdmVkIHRoZSBmb2xsb3dpbmcgdHlwZXM6IFsnICsgZGVwZW5kZW5jeVR5cGVzICsgJ10nKSk7XG4gIH1cblxuICByZXR1cm4gZGVwZW5kZW5jaWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKG1lbW9pemUpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1lbW9pemVPcHRpb25zID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1lbW9pemVPcHRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBmdW5jc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHZhciByZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgdmFyIHJlc3VsdEZ1bmMgPSBmdW5jcy5wb3AoKTtcbiAgICB2YXIgZGVwZW5kZW5jaWVzID0gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKTtcblxuICAgIHZhciBtZW1vaXplZFJlc3VsdEZ1bmMgPSBtZW1vaXplLmFwcGx5KHVuZGVmaW5lZCwgW2Z1bmN0aW9uICgpIHtcbiAgICAgIHJlY29tcHV0YXRpb25zKys7XG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgcmV0dXJuIHJlc3VsdEZ1bmMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XS5jb25jYXQobWVtb2l6ZU9wdGlvbnMpKTtcblxuICAgIC8vIElmIGEgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIGV4YWN0IHNhbWUgYXJndW1lbnRzIHdlIGRvbid0IG5lZWQgdG8gdHJhdmVyc2Ugb3VyIGRlcGVuZGVuY2llcyBhZ2Fpbi5cbiAgICB2YXIgc2VsZWN0b3IgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJhbXMgPSBbXTtcbiAgICAgIHZhciBsZW5ndGggPSBkZXBlbmRlbmNpZXMubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBhbmQgbXV0YXRlIGEgbG9jYWwgbGlzdCBvZiBwYXJhbXMgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgICBwYXJhbXMucHVzaChkZXBlbmRlbmNpZXNbaV0uYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICByZXR1cm4gbWVtb2l6ZWRSZXN1bHRGdW5jLmFwcGx5KG51bGwsIHBhcmFtcyk7XG4gICAgfSk7XG5cbiAgICBzZWxlY3Rvci5yZXN1bHRGdW5jID0gcmVzdWx0RnVuYztcbiAgICBzZWxlY3Rvci5kZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXM7XG4gICAgc2VsZWN0b3IucmVjb21wdXRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVjb21wdXRhdGlvbnM7XG4gICAgfTtcbiAgICBzZWxlY3Rvci5yZXNldFJlY29tcHV0YXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlY29tcHV0YXRpb25zID0gMDtcbiAgICB9O1xuICAgIHJldHVybiBzZWxlY3RvcjtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBjcmVhdGVTZWxlY3RvciA9IGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcihkZWZhdWx0TWVtb2l6ZSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3Ioc2VsZWN0b3JzKSB7XG4gIHZhciBzZWxlY3RvckNyZWF0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGNyZWF0ZVNlbGVjdG9yO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3JzICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBFcnJvcignY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yIGV4cGVjdHMgZmlyc3QgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0ICcgKyAoJ3doZXJlIGVhY2ggcHJvcGVydHkgaXMgYSBzZWxlY3RvciwgaW5zdGVhZCByZWNlaXZlZCBhICcgKyB0eXBlb2Ygc2VsZWN0b3JzKSk7XG4gIH1cbiAgdmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyhzZWxlY3RvcnMpO1xuICByZXR1cm4gc2VsZWN0b3JDcmVhdG9yKG9iamVjdEtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gc2VsZWN0b3JzW2tleV07XG4gIH0pLCBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCB2YWx1ZXMgPSBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgdmFsdWVzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24gKGNvbXBvc2l0aW9uLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIGNvbXBvc2l0aW9uW29iamVjdEtleXNbaW5kZXhdXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGNvbXBvc2l0aW9uO1xuICAgIH0sIHt9KTtcbiAgfSk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/reselect/es/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/sdp-transform/lib/grammar.js":
/*!***************************************************!*\
  !*** ./node_modules/sdp-transform/lib/grammar.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/sdp-transform/lib/grammar.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/sdp-transform/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/sdp-transform/lib/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("var parser = __webpack_require__(/*! ./parser */ \"(app-pages-browser)/./node_modules/sdp-transform/lib/parser.js\");\nvar writer = __webpack_require__(/*! ./writer */ \"(app-pages-browser)/./node_modules/sdp-transform/lib/writer.js\");\nvar grammar = __webpack_require__(/*! ./grammar */ \"(app-pages-browser)/./node_modules/sdp-transform/lib/grammar.js\");\n\nexports.grammar = grammar;\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zZHAtdHJhbnNmb3JtL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsZ0ZBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLGdGQUFVO0FBQy9CLGNBQWMsbUJBQU8sQ0FBQyxrRkFBVzs7QUFFakMsZUFBZTtBQUNmLGFBQWE7QUFDYixhQUFhO0FBQ2IsbUJBQW1CO0FBQ25CLHVCQUF1QiwyQkFBMkI7QUFDbEQscUJBQXFCO0FBQ3JCLDZCQUE2QjtBQUM3Qiw0QkFBNEI7QUFDNUIsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zZHAtdHJhbnNmb3JtL2xpYi9pbmRleC5qcz9kNGM2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBwYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcicpO1xudmFyIHdyaXRlciA9IHJlcXVpcmUoJy4vd3JpdGVyJyk7XG52YXIgZ3JhbW1hciA9IHJlcXVpcmUoJy4vZ3JhbW1hcicpO1xuXG5leHBvcnRzLmdyYW1tYXIgPSBncmFtbWFyO1xuZXhwb3J0cy53cml0ZSA9IHdyaXRlcjtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZXIucGFyc2U7XG5leHBvcnRzLnBhcnNlUGFyYW1zID0gcGFyc2VyLnBhcnNlUGFyYW1zO1xuZXhwb3J0cy5wYXJzZUZtdHBDb25maWcgPSBwYXJzZXIucGFyc2VGbXRwQ29uZmlnOyAvLyBBbGlhcyBvZiBwYXJzZVBhcmFtcygpLlxuZXhwb3J0cy5wYXJzZVBheWxvYWRzID0gcGFyc2VyLnBhcnNlUGF5bG9hZHM7XG5leHBvcnRzLnBhcnNlUmVtb3RlQ2FuZGlkYXRlcyA9IHBhcnNlci5wYXJzZVJlbW90ZUNhbmRpZGF0ZXM7XG5leHBvcnRzLnBhcnNlSW1hZ2VBdHRyaWJ1dGVzID0gcGFyc2VyLnBhcnNlSW1hZ2VBdHRyaWJ1dGVzO1xuZXhwb3J0cy5wYXJzZVNpbXVsY2FzdFN0cmVhbUxpc3QgPSBwYXJzZXIucGFyc2VTaW11bGNhc3RTdHJlYW1MaXN0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/sdp-transform/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/sdp-transform/lib/parser.js":
/*!**************************************************!*\
  !*** ./node_modules/sdp-transform/lib/parser.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = __webpack_require__(/*! ./grammar */ \"(app-pages-browser)/./node_modules/sdp-transform/lib/grammar.js\");\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zZHAtdHJhbnNmb3JtL2xpYi9wYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsZ0RBQWdEOztBQUVoRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjLG1CQUFPLENBQUMsa0ZBQVc7QUFDakM7O0FBRUEsYUFBYTtBQUNiO0FBQ0E7QUFDQSwwQkFBMEI7O0FBRTFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isa0JBQWtCO0FBQ3BDLHdDQUF3QztBQUN4Qzs7QUFFQSxvQkFBb0Isa0NBQWtDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILHlCQUF5QjtBQUN6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQixxQkFBcUIsNkJBQTZCO0FBQ2xEOztBQUVBO0FBQ0EsdUJBQXVCOztBQUV2QixxQkFBcUI7QUFDckI7QUFDQTs7QUFFQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLDRCQUE0QjtBQUM1QjtBQUNBLDhFQUE4RTtBQUM5RSxHQUFHO0FBQ0g7O0FBRUEsZ0NBQWdDO0FBQ2hDLHFCQUFxQjtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc2RwLXRyYW5zZm9ybS9saWIvcGFyc2VyLmpzP2EwMTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvSW50SWZJbnQgPSBmdW5jdGlvbiAodikge1xuICByZXR1cm4gU3RyaW5nKE51bWJlcih2KSkgPT09IHYgPyBOdW1iZXIodikgOiB2O1xufTtcblxudmFyIGF0dGFjaFByb3BlcnRpZXMgPSBmdW5jdGlvbiAobWF0Y2gsIGxvY2F0aW9uLCBuYW1lcywgcmF3TmFtZSkge1xuICBpZiAocmF3TmFtZSAmJiAhbmFtZXMpIHtcbiAgICBsb2NhdGlvbltyYXdOYW1lXSA9IHRvSW50SWZJbnQobWF0Y2hbMV0pO1xuICB9XG4gIGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChtYXRjaFtpKzFdICE9IG51bGwpIHtcbiAgICAgICAgbG9jYXRpb25bbmFtZXNbaV1dID0gdG9JbnRJZkludChtYXRjaFtpKzFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciBwYXJzZVJlZyA9IGZ1bmN0aW9uIChvYmosIGxvY2F0aW9uLCBjb250ZW50KSB7XG4gIHZhciBuZWVkc0JsYW5rID0gb2JqLm5hbWUgJiYgb2JqLm5hbWVzO1xuICBpZiAob2JqLnB1c2ggJiYgIWxvY2F0aW9uW29iai5wdXNoXSkge1xuICAgIGxvY2F0aW9uW29iai5wdXNoXSA9IFtdO1xuICB9XG4gIGVsc2UgaWYgKG5lZWRzQmxhbmsgJiYgIWxvY2F0aW9uW29iai5uYW1lXSkge1xuICAgIGxvY2F0aW9uW29iai5uYW1lXSA9IHt9O1xuICB9XG4gIHZhciBrZXlMb2NhdGlvbiA9IG9iai5wdXNoID9cbiAgICB7fSA6ICAvLyBibGFuayBvYmplY3QgdGhhdCB3aWxsIGJlIHB1c2hlZFxuICAgIG5lZWRzQmxhbmsgPyBsb2NhdGlvbltvYmoubmFtZV0gOiBsb2NhdGlvbjsgLy8gb3RoZXJ3aXNlLCBuYW1lZCBsb2NhdGlvbiBvciByb290XG5cbiAgYXR0YWNoUHJvcGVydGllcyhjb250ZW50Lm1hdGNoKG9iai5yZWcpLCBrZXlMb2NhdGlvbiwgb2JqLm5hbWVzLCBvYmoubmFtZSk7XG5cbiAgaWYgKG9iai5wdXNoKSB7XG4gICAgbG9jYXRpb25bb2JqLnB1c2hdLnB1c2goa2V5TG9jYXRpb24pO1xuICB9XG59O1xuXG52YXIgZ3JhbW1hciA9IHJlcXVpcmUoJy4vZ3JhbW1hcicpO1xudmFyIHZhbGlkTGluZSA9IFJlZ0V4cC5wcm90b3R5cGUudGVzdC5iaW5kKC9eKFthLXpdKT0oLiopLyk7XG5cbmV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAoc2RwKSB7XG4gIHZhciBzZXNzaW9uID0ge31cbiAgICAsIG1lZGlhID0gW11cbiAgICAsIGxvY2F0aW9uID0gc2Vzc2lvbjsgLy8gcG9pbnRzIGF0IHdoZXJlIHByb3BlcnRpZXMgZ28gdW5kZXIgKG9uZSBvZiB0aGUgYWJvdmUpXG5cbiAgLy8gcGFyc2UgbGluZXMgd2UgdW5kZXJzdGFuZFxuICBzZHAuc3BsaXQoLyhcXHJcXG58XFxyfFxcbikvKS5maWx0ZXIodmFsaWRMaW5lKS5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XG4gICAgdmFyIHR5cGUgPSBsWzBdO1xuICAgIHZhciBjb250ZW50ID0gbC5zbGljZSgyKTtcbiAgICBpZiAodHlwZSA9PT0gJ20nKSB7XG4gICAgICBtZWRpYS5wdXNoKHtydHA6IFtdLCBmbXRwOiBbXX0pO1xuICAgICAgbG9jYXRpb24gPSBtZWRpYVttZWRpYS5sZW5ndGgtMV07IC8vIHBvaW50IGF0IGxhdGVzdCBtZWRpYSBsaW5lXG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCAoZ3JhbW1hclt0eXBlXSB8fCBbXSkubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIHZhciBvYmogPSBncmFtbWFyW3R5cGVdW2pdO1xuICAgICAgaWYgKG9iai5yZWcudGVzdChjb250ZW50KSkge1xuICAgICAgICByZXR1cm4gcGFyc2VSZWcob2JqLCBsb2NhdGlvbiwgY29udGVudCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBzZXNzaW9uLm1lZGlhID0gbWVkaWE7IC8vIGxpbmsgaXQgdXBcbiAgcmV0dXJuIHNlc3Npb247XG59O1xuXG52YXIgcGFyYW1SZWR1Y2VyID0gZnVuY3Rpb24gKGFjYywgZXhwcikge1xuICB2YXIgcyA9IGV4cHIuc3BsaXQoLz0oLispLywgMik7XG4gIGlmIChzLmxlbmd0aCA9PT0gMikge1xuICAgIGFjY1tzWzBdXSA9IHRvSW50SWZJbnQoc1sxXSk7XG4gIH0gZWxzZSBpZiAocy5sZW5ndGggPT09IDEgJiYgZXhwci5sZW5ndGggPiAxKSB7XG4gICAgYWNjW3NbMF1dID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBhY2M7XG59O1xuXG5leHBvcnRzLnBhcnNlUGFyYW1zID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KC87XFxzPy8pLnJlZHVjZShwYXJhbVJlZHVjZXIsIHt9KTtcbn07XG5cbi8vIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IC0gYWxpYXMgd2lsbCBiZSByZW1vdmVkIGluIDMuMC4wXG5leHBvcnRzLnBhcnNlRm10cENvbmZpZyA9IGV4cG9ydHMucGFyc2VQYXJhbXM7XG5cbmV4cG9ydHMucGFyc2VQYXlsb2FkcyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci50b1N0cmluZygpLnNwbGl0KCcgJykubWFwKE51bWJlcik7XG59O1xuXG5leHBvcnRzLnBhcnNlUmVtb3RlQ2FuZGlkYXRlcyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgdmFyIGNhbmRpZGF0ZXMgPSBbXTtcbiAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KCcgJykubWFwKHRvSW50SWZJbnQpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgY2FuZGlkYXRlcy5wdXNoKHtcbiAgICAgIGNvbXBvbmVudDogcGFydHNbaV0sXG4gICAgICBpcDogcGFydHNbaSArIDFdLFxuICAgICAgcG9ydDogcGFydHNbaSArIDJdXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGNhbmRpZGF0ZXM7XG59O1xuXG5leHBvcnRzLnBhcnNlSW1hZ2VBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KCcgJykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0uc3Vic3RyaW5nKDEsIGl0ZW0ubGVuZ3RoLTEpLnNwbGl0KCcsJykucmVkdWNlKHBhcmFtUmVkdWNlciwge30pO1xuICB9KTtcbn07XG5cbmV4cG9ydHMucGFyc2VTaW11bGNhc3RTdHJlYW1MaXN0ID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KCc7JykubWFwKGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICByZXR1cm4gc3RyZWFtLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgIHZhciBzY2lkLCBwYXVzZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKGZvcm1hdFswXSAhPT0gJ34nKSB7XG4gICAgICAgIHNjaWQgPSB0b0ludElmSW50KGZvcm1hdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY2lkID0gdG9JbnRJZkludChmb3JtYXQuc3Vic3RyaW5nKDEsIGZvcm1hdC5sZW5ndGgpKTtcbiAgICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2NpZDogc2NpZCxcbiAgICAgICAgcGF1c2VkOiBwYXVzZWRcbiAgICAgIH07XG4gICAgfSk7XG4gIH0pO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/sdp-transform/lib/parser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/sdp-transform/lib/writer.js":
/*!**************************************************!*\
  !*** ./node_modules/sdp-transform/lib/writer.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var grammar = __webpack_require__(/*! ./grammar */ \"(app-pages-browser)/./node_modules/sdp-transform/lib/grammar.js\");\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zZHAtdHJhbnNmb3JtL2xpYi93cml0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxtQkFBTyxDQUFDLGtGQUFXOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3NkcC10cmFuc2Zvcm0vbGliL3dyaXRlci5qcz82MDlmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBncmFtbWFyID0gcmVxdWlyZSgnLi9ncmFtbWFyJyk7XG5cbi8vIGN1c3RvbWl6ZWQgdXRpbC5mb3JtYXQgLSBkaXNjYXJkcyBleGNlc3MgYXJndW1lbnRzIGFuZCBjYW4gdm9pZCBtaWRkbGUgb25lc1xudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkdiVdL2c7XG52YXIgZm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdFN0cikge1xuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHJldHVybiBmb3JtYXRTdHIucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uICh4KSB7XG4gICAgaWYgKGkgPj0gbGVuKSB7XG4gICAgICByZXR1cm4geDsgLy8gbWlzc2luZyBhcmd1bWVudFxuICAgIH1cbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpICs9IDE7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgY2FzZSAnJSUnOlxuICAgICAgcmV0dXJuICclJztcbiAgICBjYXNlICclcyc6XG4gICAgICByZXR1cm4gU3RyaW5nKGFyZyk7XG4gICAgY2FzZSAnJWQnOlxuICAgICAgcmV0dXJuIE51bWJlcihhcmcpO1xuICAgIGNhc2UgJyV2JzpcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH0pO1xuICAvLyBOQjogd2UgZGlzY2FyZCBleGNlc3MgYXJndW1lbnRzIC0gdGhleSBhcmUgdHlwaWNhbGx5IHVuZGVmaW5lZCBmcm9tIG1ha2VMaW5lXG59O1xuXG52YXIgbWFrZUxpbmUgPSBmdW5jdGlvbiAodHlwZSwgb2JqLCBsb2NhdGlvbikge1xuICB2YXIgc3RyID0gb2JqLmZvcm1hdCBpbnN0YW5jZW9mIEZ1bmN0aW9uID9cbiAgICAob2JqLmZvcm1hdChvYmoucHVzaCA/IGxvY2F0aW9uIDogbG9jYXRpb25bb2JqLm5hbWVdKSkgOlxuICAgIG9iai5mb3JtYXQ7XG5cbiAgdmFyIGFyZ3MgPSBbdHlwZSArICc9JyArIHN0cl07XG4gIGlmIChvYmoubmFtZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5uYW1lcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIG4gPSBvYmoubmFtZXNbaV07XG4gICAgICBpZiAob2JqLm5hbWUpIHtcbiAgICAgICAgYXJncy5wdXNoKGxvY2F0aW9uW29iai5uYW1lXVtuXSk7XG4gICAgICB9XG4gICAgICBlbHNlIHsgLy8gZm9yIG1MaW5lIGFuZCBwdXNoIGF0dHJpYnV0ZXNcbiAgICAgICAgYXJncy5wdXNoKGxvY2F0aW9uW29iai5uYW1lc1tpXV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBhcmdzLnB1c2gobG9jYXRpb25bb2JqLm5hbWVdKTtcbiAgfVxuICByZXR1cm4gZm9ybWF0LmFwcGx5KG51bGwsIGFyZ3MpO1xufTtcblxuLy8gUkZDIHNwZWNpZmllZCBvcmRlclxuLy8gVE9ETzogZXh0ZW5kIHRoaXMgd2l0aCBhbGwgdGhlIHJlc3RcbnZhciBkZWZhdWx0T3V0ZXJPcmRlciA9IFtcbiAgJ3YnLCAnbycsICdzJywgJ2knLFxuICAndScsICdlJywgJ3AnLCAnYycsXG4gICdiJywgJ3QnLCAncicsICd6JywgJ2EnXG5dO1xudmFyIGRlZmF1bHRJbm5lck9yZGVyID0gWydpJywgJ2MnLCAnYicsICdhJ107XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2Vzc2lvbiwgb3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgLy8gZW5zdXJlIGNlcnRhaW4gcHJvcGVydGllcyBleGlzdFxuICBpZiAoc2Vzc2lvbi52ZXJzaW9uID09IG51bGwpIHtcbiAgICBzZXNzaW9uLnZlcnNpb24gPSAwOyAvLyAndj0wJyBtdXN0IGJlIHRoZXJlIChvbmx5IGRlZmluZWQgdmVyc2lvbiBhdG0pXG4gIH1cbiAgaWYgKHNlc3Npb24ubmFtZSA9PSBudWxsKSB7XG4gICAgc2Vzc2lvbi5uYW1lID0gJyAnOyAvLyAncz0gJyBtdXN0IGJlIHRoZXJlIGlmIG5vIG1lYW5pbmdmdWwgbmFtZSBzZXRcbiAgfVxuICBzZXNzaW9uLm1lZGlhLmZvckVhY2goZnVuY3Rpb24gKG1MaW5lKSB7XG4gICAgaWYgKG1MaW5lLnBheWxvYWRzID09IG51bGwpIHtcbiAgICAgIG1MaW5lLnBheWxvYWRzID0gJyc7XG4gICAgfVxuICB9KTtcblxuICB2YXIgb3V0ZXJPcmRlciA9IG9wdHMub3V0ZXJPcmRlciB8fCBkZWZhdWx0T3V0ZXJPcmRlcjtcbiAgdmFyIGlubmVyT3JkZXIgPSBvcHRzLmlubmVyT3JkZXIgfHwgZGVmYXVsdElubmVyT3JkZXI7XG4gIHZhciBzZHAgPSBbXTtcblxuICAvLyBsb29wIHRocm91Z2ggb3V0ZXJPcmRlciBmb3IgbWF0Y2hpbmcgcHJvcGVydGllcyBvbiBzZXNzaW9uXG4gIG91dGVyT3JkZXIuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIGdyYW1tYXJbdHlwZV0uZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICBpZiAob2JqLm5hbWUgaW4gc2Vzc2lvbiAmJiBzZXNzaW9uW29iai5uYW1lXSAhPSBudWxsKSB7XG4gICAgICAgIHNkcC5wdXNoKG1ha2VMaW5lKHR5cGUsIG9iaiwgc2Vzc2lvbikpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAob2JqLnB1c2ggaW4gc2Vzc2lvbiAmJiBzZXNzaW9uW29iai5wdXNoXSAhPSBudWxsKSB7XG4gICAgICAgIHNlc3Npb25bb2JqLnB1c2hdLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgc2RwLnB1c2gobWFrZUxpbmUodHlwZSwgb2JqLCBlbCkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gdGhlbiBmb3IgZWFjaCBtZWRpYSBsaW5lLCBmb2xsb3cgdGhlIGlubmVyT3JkZXJcbiAgc2Vzc2lvbi5tZWRpYS5mb3JFYWNoKGZ1bmN0aW9uIChtTGluZSkge1xuICAgIHNkcC5wdXNoKG1ha2VMaW5lKCdtJywgZ3JhbW1hci5tWzBdLCBtTGluZSkpO1xuXG4gICAgaW5uZXJPcmRlci5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBncmFtbWFyW3R5cGVdLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICBpZiAob2JqLm5hbWUgaW4gbUxpbmUgJiYgbUxpbmVbb2JqLm5hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICBzZHAucHVzaChtYWtlTGluZSh0eXBlLCBvYmosIG1MaW5lKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JqLnB1c2ggaW4gbUxpbmUgJiYgbUxpbmVbb2JqLnB1c2hdICE9IG51bGwpIHtcbiAgICAgICAgICBtTGluZVtvYmoucHVzaF0uZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIHNkcC5wdXNoKG1ha2VMaW5lKHR5cGUsIG9iaiwgZWwpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBzZHAuam9pbignXFxyXFxuJykgKyAnXFxyXFxuJztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/sdp-transform/lib/writer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/sdp/sdp.js":
/*!*********************************!*\
  !*** ./node_modules/sdp/sdp.js ***!
  \*********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* eslint-env node */\n\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substring(2, 12);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substring(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substring(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substring(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n    attributes: parts.slice(2).join(' '),\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri +\n      (headerExtension.attributes ? ' ' + headerExtension.attributes : '') +\n      '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\n// Non-key-value such as telephone-events `0-15` get parsed as\n// {`0-15`:undefined}\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substring(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substring(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substring(7, sp), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substring(sp + 1, colon);\n    parts.value = line.substring(colon + 1);\n  } else {\n    parts.attribute = line.substring(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substring(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substring(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substring(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substring(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substring(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substring(12),\n    password: pwd.substring(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  description.profile = mline[2];\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ')\n    .map(SDPUtils.parseRtcpFb);\n  description.codecs.forEach(codec => {\n    wildcardRtcpFb.forEach(fb=> {\n      const duplicate = codec.rtcpFeedback.find(existingFeedback => {\n        return existingFeedback.type === fb.type &&\n          existingFeedback.parameter === fb.parameter;\n      });\n      if (!duplicate) {\n        codec.rtcpFeedback.push(fb);\n      }\n    });\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' ' + (caps.profile || 'UDP/TLS/RTP/SAVPF') + ' ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substring(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substring(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substring(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substring(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substring(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 22);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substring(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substring(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substring(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substring(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (true) {\n  module.exports = SDPUtils;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/sdp/sdp.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ua-parser-js/src/ua-parser.js":
/*!****************************************************!*\
  !*** ./node_modules/ua-parser-js/src/ua-parser.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("var __WEBPACK_AMD_DEFINE_RESULT__;/////////////////////////////////////////////////////////////////////////////////\n/* UAParser.js v1.0.40\n   Copyright © 2012-2024 Faisal Salman <f@faisalman.com>\n   MIT License *//*\n   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.\n   Supports browser & node.js environment. \n   Demo   : https://faisalman.github.io/ua-parser-js\n   Source : https://github.com/faisalman/ua-parser-js */\n/////////////////////////////////////////////////////////////////////////////////\n\n(function (window, undefined) {\n\n    'use strict';\n\n    //////////////\n    // Constants\n    /////////////\n\n\n    var LIBVERSION  = '1.0.40',\n        EMPTY       = '',\n        UNKNOWN     = '?',\n        FUNC_TYPE   = 'function',\n        UNDEF_TYPE  = 'undefined',\n        OBJ_TYPE    = 'object',\n        STR_TYPE    = 'string',\n        MAJOR       = 'major',\n        MODEL       = 'model',\n        NAME        = 'name',\n        TYPE        = 'type',\n        VENDOR      = 'vendor',\n        VERSION     = 'version',\n        ARCHITECTURE= 'architecture',\n        CONSOLE     = 'console',\n        MOBILE      = 'mobile',\n        TABLET      = 'tablet',\n        SMARTTV     = 'smarttv',\n        WEARABLE    = 'wearable',\n        EMBEDDED    = 'embedded',\n        UA_MAX_LENGTH = 500;\n\n    var AMAZON  = 'Amazon',\n        APPLE   = 'Apple',\n        ASUS    = 'ASUS',\n        BLACKBERRY = 'BlackBerry',\n        BROWSER = 'Browser',\n        CHROME  = 'Chrome',\n        EDGE    = 'Edge',\n        FIREFOX = 'Firefox',\n        GOOGLE  = 'Google',\n        HUAWEI  = 'Huawei',\n        LG      = 'LG',\n        MICROSOFT = 'Microsoft',\n        MOTOROLA  = 'Motorola',\n        OPERA   = 'Opera',\n        SAMSUNG = 'Samsung',\n        SHARP   = 'Sharp',\n        SONY    = 'Sony',\n        XIAOMI  = 'Xiaomi',\n        ZEBRA   = 'Zebra',\n        FACEBOOK    = 'Facebook',\n        CHROMIUM_OS = 'Chromium OS',\n        MAC_OS  = 'Mac OS',\n        SUFFIX_BROWSER = ' Browser';\n\n    ///////////\n    // Helper\n    //////////\n\n    var extend = function (regexes, extensions) {\n            var mergedRegexes = {};\n            for (var i in regexes) {\n                if (extensions[i] && extensions[i].length % 2 === 0) {\n                    mergedRegexes[i] = extensions[i].concat(regexes[i]);\n                } else {\n                    mergedRegexes[i] = regexes[i];\n                }\n            }\n            return mergedRegexes;\n        },\n        enumerize = function (arr) {\n            var enums = {};\n            for (var i=0; i<arr.length; i++) {\n                enums[arr[i].toUpperCase()] = arr[i];\n            }\n            return enums;\n        },\n        has = function (str1, str2) {\n            return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;\n        },\n        lowerize = function (str) {\n            return str.toLowerCase();\n        },\n        majorize = function (version) {\n            return typeof(version) === STR_TYPE ? version.replace(/[^\\d\\.]/g, EMPTY).split('.')[0] : undefined;\n        },\n        trim = function (str, len) {\n            if (typeof(str) === STR_TYPE) {\n                str = str.replace(/^\\s\\s*/, EMPTY);\n                return typeof(len) === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);\n            }\n    };\n\n    ///////////////\n    // Map helper\n    //////////////\n\n    var rgxMapper = function (ua, arrays) {\n\n            var i = 0, j, k, p, q, matches, match;\n\n            // loop through all regexes maps\n            while (i < arrays.length && !matches) {\n\n                var regex = arrays[i],       // even sequence (0,2,4,..)\n                    props = arrays[i + 1];   // odd sequence (1,3,5,..)\n                j = k = 0;\n\n                // try matching uastring with regexes\n                while (j < regex.length && !matches) {\n\n                    if (!regex[j]) { break; }\n                    matches = regex[j++].exec(ua);\n\n                    if (!!matches) {\n                        for (p = 0; p < props.length; p++) {\n                            match = matches[++k];\n                            q = props[p];\n                            // check if given property is actually array\n                            if (typeof q === OBJ_TYPE && q.length > 0) {\n                                if (q.length === 2) {\n                                    if (typeof q[1] == FUNC_TYPE) {\n                                        // assign modified match\n                                        this[q[0]] = q[1].call(this, match);\n                                    } else {\n                                        // assign given value, ignore regex match\n                                        this[q[0]] = q[1];\n                                    }\n                                } else if (q.length === 3) {\n                                    // check whether function or regex\n                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {\n                                        // call function (usually string mapper)\n                                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;\n                                    } else {\n                                        // sanitize match using given regex\n                                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;\n                                    }\n                                } else if (q.length === 4) {\n                                        this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;\n                                }\n                            } else {\n                                this[q] = match ? match : undefined;\n                            }\n                        }\n                    }\n                }\n                i += 2;\n            }\n        },\n\n        strMapper = function (str, map) {\n\n            for (var i in map) {\n                // check if current value is array\n                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {\n                    for (var j = 0; j < map[i].length; j++) {\n                        if (has(map[i][j], str)) {\n                            return (i === UNKNOWN) ? undefined : i;\n                        }\n                    }\n                } else if (has(map[i], str)) {\n                    return (i === UNKNOWN) ? undefined : i;\n                }\n            }\n            return map.hasOwnProperty('*') ? map['*'] : str;\n    };\n\n    ///////////////\n    // String map\n    //////////////\n\n    // Safari < 3.0\n    var oldSafariMap = {\n            '1.0'   : '/8',\n            '1.2'   : '/1',\n            '1.3'   : '/3',\n            '2.0'   : '/412',\n            '2.0.2' : '/416',\n            '2.0.3' : '/417',\n            '2.0.4' : '/419',\n            '?'     : '/'\n        },\n        windowsVersionMap = {\n            'ME'        : '4.90',\n            'NT 3.11'   : 'NT3.51',\n            'NT 4.0'    : 'NT4.0',\n            '2000'      : 'NT 5.0',\n            'XP'        : ['NT 5.1', 'NT 5.2'],\n            'Vista'     : 'NT 6.0',\n            '7'         : 'NT 6.1',\n            '8'         : 'NT 6.2',\n            '8.1'       : 'NT 6.3',\n            '10'        : ['NT 6.4', 'NT 10.0'],\n            'RT'        : 'ARM'\n    };\n\n    //////////////\n    // Regex map\n    /////////////\n\n    var regexes = {\n\n        browser : [[\n\n            /\\b(?:crmo|crios)\\/([\\w\\.]+)/i                                      // Chrome for Android/iOS\n            ], [VERSION, [NAME, 'Chrome']], [\n            /edg(?:e|ios|a)?\\/([\\w\\.]+)/i                                       // Microsoft Edge\n            ], [VERSION, [NAME, 'Edge']], [\n\n            // Presto based\n            /(opera mini)\\/([-\\w\\.]+)/i,                                        // Opera Mini\n            /(opera [mobiletab]{3,6})\\b.+version\\/([-\\w\\.]+)/i,                 // Opera Mobi/Tablet\n            /(opera)(?:.+version\\/|[\\/ ]+)([\\w\\.]+)/i                           // Opera\n            ], [NAME, VERSION], [\n            /opios[\\/ ]+([\\w\\.]+)/i                                             // Opera mini on iphone >= 8.0\n            ], [VERSION, [NAME, OPERA+' Mini']], [\n            /\\bop(?:rg)?x\\/([\\w\\.]+)/i                                          // Opera GX\n            ], [VERSION, [NAME, OPERA+' GX']], [\n            /\\bopr\\/([\\w\\.]+)/i                                                 // Opera Webkit\n            ], [VERSION, [NAME, OPERA]], [\n\n            // Mixed\n            /\\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\\/ ]?([\\w\\.]+)/i            // Baidu\n            ], [VERSION, [NAME, 'Baidu']], [\n            /\\b(?:mxbrowser|mxios|myie2)\\/?([-\\w\\.]*)\\b/i                       // Maxthon\n            ], [VERSION, [NAME, 'Maxthon']], [\n            /(kindle)\\/([\\w\\.]+)/i,                                             // Kindle\n            /(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\\/ ]?([\\w\\.]*)/i,      \n                                                                                // Lunascape/Maxthon/Netfront/Jasmine/Blazer/Sleipnir\n            // Trident based\n            /(avant|iemobile|slim(?:browser|boat|jet))[\\/ ]?([\\d\\.]*)/i,        // Avant/IEMobile/SlimBrowser/SlimBoat/Slimjet\n            /(?:ms|\\()(ie) ([\\w\\.]+)/i,                                         // Internet Explorer\n\n            // Blink/Webkit/KHTML based                                         // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon\n            /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio|(?=comodo_)?dragon)\\/([-\\w\\.]+)/i,\n                                                                                // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ//Vivaldi/DuckDuckGo/Klar/Helio/Dragon\n            /(heytap|ovi|115)browser\\/([\\d\\.]+)/i,                              // HeyTap/Ovi/115\n            /(weibo)__([\\d\\.]+)/i                                               // Weibo\n            ], [NAME, VERSION], [\n            /quark(?:pc)?\\/([-\\w\\.]+)/i                                         // Quark\n            ], [VERSION, [NAME, 'Quark']], [\n            /\\bddg\\/([\\w\\.]+)/i                                                 // DuckDuckGo\n            ], [VERSION, [NAME, 'DuckDuckGo']], [\n            /(?:\\buc? ?browser|(?:juc.+)ucweb)[\\/ ]?([\\w\\.]+)/i                 // UCBrowser\n            ], [VERSION, [NAME, 'UC'+BROWSER]], [\n            /microm.+\\bqbcore\\/([\\w\\.]+)/i,                                     // WeChat Desktop for Windows Built-in Browser\n            /\\bqbcore\\/([\\w\\.]+).+microm/i,\n            /micromessenger\\/([\\w\\.]+)/i                                        // WeChat\n            ], [VERSION, [NAME, 'WeChat']], [\n            /konqueror\\/([\\w\\.]+)/i                                             // Konqueror\n            ], [VERSION, [NAME, 'Konqueror']], [\n            /trident.+rv[: ]([\\w\\.]{1,9})\\b.+like gecko/i                       // IE11\n            ], [VERSION, [NAME, 'IE']], [\n            /ya(?:search)?browser\\/([\\w\\.]+)/i                                  // Yandex\n            ], [VERSION, [NAME, 'Yandex']], [\n            /slbrowser\\/([\\w\\.]+)/i                                             // Smart Lenovo Browser\n            ], [VERSION, [NAME, 'Smart Lenovo '+BROWSER]], [\n            /(avast|avg)\\/([\\w\\.]+)/i                                           // Avast/AVG Secure Browser\n            ], [[NAME, /(.+)/, '$1 Secure '+BROWSER], VERSION], [\n            /\\bfocus\\/([\\w\\.]+)/i                                               // Firefox Focus\n            ], [VERSION, [NAME, FIREFOX+' Focus']], [\n            /\\bopt\\/([\\w\\.]+)/i                                                 // Opera Touch\n            ], [VERSION, [NAME, OPERA+' Touch']], [\n            /coc_coc\\w+\\/([\\w\\.]+)/i                                            // Coc Coc Browser\n            ], [VERSION, [NAME, 'Coc Coc']], [\n            /dolfin\\/([\\w\\.]+)/i                                                // Dolphin\n            ], [VERSION, [NAME, 'Dolphin']], [\n            /coast\\/([\\w\\.]+)/i                                                 // Opera Coast\n            ], [VERSION, [NAME, OPERA+' Coast']], [\n            /miuibrowser\\/([\\w\\.]+)/i                                           // MIUI Browser\n            ], [VERSION, [NAME, 'MIUI' + SUFFIX_BROWSER]], [\n            /fxios\\/([\\w\\.-]+)/i                                                // Firefox for iOS\n            ], [VERSION, [NAME, FIREFOX]], [\n            /\\bqihoobrowser\\/?([\\w\\.]*)/i                                       // 360\n            ], [VERSION, [NAME, '360']], [\n            /\\b(qq)\\/([\\w\\.]+)/i                                                // QQ\n            ], [[NAME, /(.+)/, '$1Browser'], VERSION], [\n            /(oculus|sailfish|huawei|vivo|pico)browser\\/([\\w\\.]+)/i\n            ], [[NAME, /(.+)/, '$1' + SUFFIX_BROWSER], VERSION], [              // Oculus/Sailfish/HuaweiBrowser/VivoBrowser/PicoBrowser\n            /samsungbrowser\\/([\\w\\.]+)/i                                        // Samsung Internet\n            ], [VERSION, [NAME, SAMSUNG + ' Internet']], [\n            /metasr[\\/ ]?([\\d\\.]+)/i                                            // Sogou Explorer\n            ], [VERSION, [NAME, 'Sogou Explorer']], [\n            /(sogou)mo\\w+\\/([\\d\\.]+)/i                                          // Sogou Mobile\n            ], [[NAME, 'Sogou Mobile'], VERSION], [\n            /(electron)\\/([\\w\\.]+) safari/i,                                    // Electron-based App\n            /(tesla)(?: qtcarbrowser|\\/(20\\d\\d\\.[-\\w\\.]+))/i,                   // Tesla\n            /m?(qqbrowser|2345(?=browser|chrome|explorer))\\w*[\\/ ]?v?([\\w\\.]+)/i   // QQ/2345\n            ], [NAME, VERSION], [\n            /(lbbrowser|rekonq)/i,                                              // LieBao Browser/Rekonq\n            /\\[(linkedin)app\\]/i                                                // LinkedIn App for iOS & Android\n            ], [NAME], [\n            /ome\\/([\\w\\.]+) \\w* ?(iron) saf/i,                                  // Iron\n            /ome\\/([\\w\\.]+).+qihu (360)[es]e/i                                  // 360\n            ], [VERSION, NAME], [\n\n            // WebView\n            /((?:fban\\/fbios|fb_iab\\/fb4a)(?!.+fbav)|;fbav\\/([\\w\\.]+);)/i       // Facebook App for iOS & Android\n            ], [[NAME, FACEBOOK], VERSION], [\n            /(Klarna)\\/([\\w\\.]+)/i,                                             // Klarna Shopping Browser for iOS & Android\n            /(kakao(?:talk|story))[\\/ ]([\\w\\.]+)/i,                             // Kakao App\n            /(naver)\\(.*?(\\d+\\.[\\w\\.]+).*\\)/i,                                  // Naver InApp\n            /safari (line)\\/([\\w\\.]+)/i,                                        // Line App for iOS\n            /\\b(line)\\/([\\w\\.]+)\\/iab/i,                                        // Line App for Android\n            /(alipay)client\\/([\\w\\.]+)/i,                                       // Alipay\n            /(twitter)(?:and| f.+e\\/([\\w\\.]+))/i,                               // Twitter\n            /(chromium|instagram|snapchat)[\\/ ]([-\\w\\.]+)/i                     // Chromium/Instagram/Snapchat\n            ], [NAME, VERSION], [\n            /\\bgsa\\/([\\w\\.]+) .*safari\\//i                                      // Google Search Appliance on iOS\n            ], [VERSION, [NAME, 'GSA']], [\n            /musical_ly(?:.+app_?version\\/|_)([\\w\\.]+)/i                        // TikTok\n            ], [VERSION, [NAME, 'TikTok']], [\n\n            /headlesschrome(?:\\/([\\w\\.]+)| )/i                                  // Chrome Headless\n            ], [VERSION, [NAME, CHROME+' Headless']], [\n\n            / wv\\).+(chrome)\\/([\\w\\.]+)/i                                       // Chrome WebView\n            ], [[NAME, CHROME+' WebView'], VERSION], [\n\n            /droid.+ version\\/([\\w\\.]+)\\b.+(?:mobile safari|safari)/i           // Android Browser\n            ], [VERSION, [NAME, 'Android '+BROWSER]], [\n\n            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\\/v?([\\w\\.]+)/i       // Chrome/OmniWeb/Arora/Tizen/Nokia\n            ], [NAME, VERSION], [\n\n            /version\\/([\\w\\.\\,]+) .*mobile\\/\\w+ (safari)/i                      // Mobile Safari\n            ], [VERSION, [NAME, 'Mobile Safari']], [\n            /version\\/([\\w(\\.|\\,)]+) .*(mobile ?safari|safari)/i                // Safari & Safari Mobile\n            ], [VERSION, NAME], [\n            /webkit.+?(mobile ?safari|safari)(\\/[\\w\\.]+)/i                      // Safari < 3.0\n            ], [NAME, [VERSION, strMapper, oldSafariMap]], [\n\n            /(webkit|khtml)\\/([\\w\\.]+)/i\n            ], [NAME, VERSION], [\n\n            // Gecko based\n            /(navigator|netscape\\d?)\\/([-\\w\\.]+)/i                              // Netscape\n            ], [[NAME, 'Netscape'], VERSION], [\n            /(wolvic|librewolf)\\/([\\w\\.]+)/i                                    // Wolvic/LibreWolf\n            ], [NAME, VERSION], [\n            /mobile vr; rv:([\\w\\.]+)\\).+firefox/i                               // Firefox Reality\n            ], [VERSION, [NAME, FIREFOX+' Reality']], [\n            /ekiohf.+(flow)\\/([\\w\\.]+)/i,                                       // Flow\n            /(swiftfox)/i,                                                      // Swiftfox\n            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\\/ ]?([\\w\\.\\+]+)/i,\n                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror\n            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\\/([-\\w\\.]+)$/i,\n                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix\n            /(firefox)\\/([\\w\\.]+)/i,                                            // Other Firefox-based\n            /(mozilla)\\/([\\w\\.]+) .+rv\\:.+gecko\\/\\d+/i,                         // Mozilla\n\n            // Other\n            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|obigo|mosaic|(?:go|ice|up)[\\. ]?browser)[-\\/ ]?v?([\\w\\.]+)/i,\n                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Obigo/Mosaic/Go/ICE/UP.Browser\n            /(links) \\(([\\w\\.]+)/i                                              // Links\n            ], [NAME, [VERSION, /_/g, '.']], [\n            \n            /(cobalt)\\/([\\w\\.]+)/i                                              // Cobalt\n            ], [NAME, [VERSION, /master.|lts./, \"\"]]\n        ],\n\n        cpu : [[\n\n            /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\\)]/i                     // AMD64 (x64)\n            ], [[ARCHITECTURE, 'amd64']], [\n\n            /(ia32(?=;))/i                                                      // IA32 (quicktime)\n            ], [[ARCHITECTURE, lowerize]], [\n\n            /((?:i[346]|x)86)[;\\)]/i                                            // IA32 (x86)\n            ], [[ARCHITECTURE, 'ia32']], [\n\n            /\\b(aarch64|arm(v?8e?l?|_?64))\\b/i                                 // ARM64\n            ], [[ARCHITECTURE, 'arm64']], [\n\n            /\\b(arm(?:v[67])?ht?n?[fl]p?)\\b/i                                   // ARMHF\n            ], [[ARCHITECTURE, 'armhf']], [\n\n            // PocketPC mistakenly identified as PowerPC\n            /windows (ce|mobile); ppc;/i\n            ], [[ARCHITECTURE, 'arm']], [\n\n            /((?:ppc|powerpc)(?:64)?)(?: mac|;|\\))/i                            // PowerPC\n            ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [\n\n            /(sun4\\w)[;\\)]/i                                                    // SPARC\n            ], [[ARCHITECTURE, 'sparc']], [\n\n            /((?:avr32|ia64(?=;))|68k(?=\\))|\\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\\b|pa-risc)/i\n                                                                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC\n            ], [[ARCHITECTURE, lowerize]]\n        ],\n\n        device : [[\n\n            //////////////////////////\n            // MOBILES & TABLETS\n            /////////////////////////\n\n            // Samsung\n            /\\b(sch-i[89]0\\d|shw-m380s|sm-[ptx]\\w{2,4}|gt-[pn]\\d{2,4}|sgh-t8[56]9|nexus 10)/i\n            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [\n            /\\b((?:s[cgp]h|gt|sm)-(?![lr])\\w+|sc[g-]?[\\d]+a?|galaxy nexus)/i,\n            /samsung[- ]((?!sm-[lr])[-\\w]+)/i,\n            /sec-(sgh\\w+)/i\n            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [\n\n            // Apple\n            /(?:\\/|\\()(ip(?:hone|od)[\\w, ]*)(?:\\/|;)/i                          // iPod/iPhone\n            ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [\n            /\\((ipad);[-\\w\\),; ]+apple/i,                                       // iPad\n            /applecoremedia\\/[\\w\\.]+ \\((ipad)/i,\n            /\\b(ipad)\\d\\d?,\\d\\d?[;\\]].+ios/i\n            ], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [\n            /(macintosh);/i\n            ], [MODEL, [VENDOR, APPLE]], [\n\n            // Sharp\n            /\\b(sh-?[altvz]?\\d\\d[a-ekm]?)/i\n            ], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [\n\n            // Honor\n            /(?:honor)([-\\w ]+)[;\\)]/i\n            ], [MODEL, [VENDOR, 'Honor'], [TYPE, MOBILE]], [\n\n            // Huawei\n            /\\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\\d{2})\\b(?!.+d\\/s)/i\n            ], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [\n            /(?:huawei)([-\\w ]+)[;\\)]/i,\n            /\\b(nexus 6p|\\w{2,4}e?-[atu]?[ln][\\dx][012359c][adn]?)\\b(?!.+d\\/s)/i\n            ], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [\n\n            // Xiaomi\n            /\\b(poco[\\w ]+|m2\\d{3}j\\d\\d[a-z]{2})(?: bui|\\))/i,                  // Xiaomi POCO\n            /\\b; (\\w+) build\\/hm\\1/i,                                           // Xiaomi Hongmi 'numeric' models\n            /\\b(hm[-_ ]?note?[_ ]?(?:\\d\\w)?) bui/i,                             // Xiaomi Hongmi\n            /\\b(redmi[\\-_ ]?(?:note|k)?[\\w_ ]+)(?: bui|\\))/i,                   // Xiaomi Redmi\n            /oid[^\\)]+; (m?[12][0-389][01]\\w{3,6}[c-y])( bui|; wv|\\))/i,        // Xiaomi Redmi 'numeric' models\n            /\\b(mi[-_ ]?(?:a\\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\\d?\\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\\))/i // Xiaomi Mi\n            ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [\n            /oid[^\\)]+; (2\\d{4}(283|rpbf)[cgl])( bui|\\))/i,                     // Redmi Pad\n            /\\b(mi[-_ ]?(?:pad)(?:[\\w_ ]+))(?: bui|\\))/i                        // Mi Pad tablets\n            ],[[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [\n\n            // OPPO\n            /; (\\w+) bui.+ oppo/i,\n            /\\b(cph[12]\\d{3}|p(?:af|c[al]|d\\w|e[ar])[mt]\\d0|x9007|a101op)\\b/i\n            ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [\n            /\\b(opd2\\d{3}a?) bui/i\n            ], [MODEL, [VENDOR, 'OPPO'], [TYPE, TABLET]], [\n\n            // Vivo\n            /vivo (\\w+)(?: bui|\\))/i,\n            /\\b(v[12]\\d{3}\\w?[at])(?: bui|;)/i\n            ], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [\n\n            // Realme\n            /\\b(rmx[1-3]\\d{3})(?: bui|;|\\))/i\n            ], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [\n\n            // Motorola\n            /\\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\\b[\\w ]+build\\//i,\n            /\\bmot(?:orola)?[- ](\\w*)/i,\n            /((?:moto[\\w\\(\\) ]+|xt\\d{3,4}|nexus 6)(?= bui|\\)))/i\n            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [\n            /\\b(mz60\\d|xoom[2 ]{0,2}) build\\//i\n            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [\n\n            // LG\n            /((?=lg)?[vl]k\\-?\\d{3}) bui| 3\\.[-\\w; ]{10}lg?-([06cv9]{3,4})/i\n            ], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [\n            /(lm(?:-?f100[nv]?|-[\\w\\.]+)(?= bui|\\))|nexus [45])/i,\n            /\\blg[-e;\\/ ]+((?!browser|netcast|android tv)\\w+)/i,\n            /\\blg-?([\\d\\w]+) bui/i\n            ], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [\n\n            // Lenovo\n            /(ideatab[-\\w ]+)/i,\n            /lenovo ?(s[56]000[-\\w]+|tab(?:[\\w ]+)|yt[-\\d\\w]{6}|tb[-\\d\\w]{6})/i\n            ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [\n\n            // Nokia\n            /(?:maemo|nokia).*(n900|lumia \\d+)/i,\n            /nokia[-_ ]?([-\\w\\.]*)/i\n            ], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [\n\n            // Google\n            /(pixel c)\\b/i                                                      // Google Pixel C\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [\n            /droid.+; (pixel[\\daxl ]{0,6})(?: bui|\\))/i                         // Google Pixel\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [\n\n            // Sony\n            /droid.+; (a?\\d[0-2]{2}so|[c-g]\\d{4}|so[-gl]\\w+|xq-a\\w[4-7][12])(?= bui|\\).+chrome\\/(?![1-6]{0,1}\\d\\.))/i\n            ], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [\n            /sony tablet [ps]/i,\n            /\\b(?:sony)?sgp\\w+(?: bui|\\))/i\n            ], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [\n\n            // OnePlus\n            / (kb2005|in20[12]5|be20[12][59])\\b/i,\n            /(?:one)?(?:plus)? (a\\d0\\d\\d)(?: b|\\))/i\n            ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [\n\n            // Amazon\n            /(alexa)webm/i,\n            /(kf[a-z]{2}wi|aeo(?!bc)\\w\\w)( bui|\\))/i,                           // Kindle Fire without Silk / Echo Show\n            /(kf[a-z]+)( bui|\\)).+silk\\//i                                      // Kindle Fire HD\n            ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [\n            /((?:sd|kf)[0349hijorstuw]+)( bui|\\)).+silk\\//i                     // Fire Phone\n            ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [\n\n            // BlackBerry\n            /(playbook);[-\\w\\),; ]+(rim)/i                                      // BlackBerry PlayBook\n            ], [MODEL, VENDOR, [TYPE, TABLET]], [\n            /\\b((?:bb[a-f]|st[hv])100-\\d)/i,\n            /\\(bb10; (\\w+)/i                                                    // BlackBerry 10\n            ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [\n\n            // Asus\n            /(?:\\b|asus_)(transfo[prime ]{4,10} \\w+|eeepc|slider \\w+|nexus 7|padfone|p00[cj])/i\n            ], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [\n            / (z[bes]6[027][012][km][ls]|zenfone \\d\\w?)\\b/i\n            ], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [\n\n            // HTC\n            /(nexus 9)/i                                                        // HTC Nexus 9\n            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [\n            /(htc)[-;_ ]{1,2}([\\w ]+(?=\\)| bui)|\\w+)/i,                         // HTC\n\n            // ZTE\n            /(zte)[- ]([\\w ]+?)(?: bui|\\/|\\))/i,\n            /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\\.))|sony(?!-bra))[-_ ]?([-\\w]*)/i         // Alcatel/GeeksPhone/Nexian/Panasonic/Sony\n            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [\n\n            // TCL\n            /droid [\\w\\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])\\w*(\\)| bui)/i\n            ], [MODEL, [VENDOR, 'TCL'], [TYPE, TABLET]], [\n\n            // itel\n            /(itel) ((\\w+))/i\n            ], [[VENDOR, lowerize], MODEL, [TYPE, strMapper, { 'tablet' : ['p10001l', 'w7001'], '*' : 'mobile' }]], [\n\n            // Acer\n            /droid.+; ([ab][1-7]-?[0178a]\\d\\d?)/i\n            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [\n\n            // Meizu\n            /droid.+; (m[1-5] note) bui/i,\n            /\\bmz-([-\\w]{2,})/i\n            ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [\n                \n            // Ulefone\n            /; ((?:power )?armor(?:[\\w ]{0,8}))(?: bui|\\))/i\n            ], [MODEL, [VENDOR, 'Ulefone'], [TYPE, MOBILE]], [\n\n            // Energizer\n            /; (energy ?\\w+)(?: bui|\\))/i,\n            /; energizer ([\\w ]+)(?: bui|\\))/i\n            ], [MODEL, [VENDOR, 'Energizer'], [TYPE, MOBILE]], [\n\n            // Cat\n            /; cat (b35);/i,\n            /; (b15q?|s22 flip|s48c|s62 pro)(?: bui|\\))/i\n            ], [MODEL, [VENDOR, 'Cat'], [TYPE, MOBILE]], [\n\n            // Smartfren\n            /((?:new )?andromax[\\w- ]+)(?: bui|\\))/i\n            ], [MODEL, [VENDOR, 'Smartfren'], [TYPE, MOBILE]], [\n\n            // Nothing\n            /droid.+; (a(?:015|06[35]|142p?))/i\n            ], [MODEL, [VENDOR, 'Nothing'], [TYPE, MOBILE]], [\n\n            // MIXED\n            /(blackberry|benq|palm(?=\\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno|micromax|advan)[-_ ]?([-\\w]*)/i,\n                                                                                // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron/Infinix/Tecno/Micromax/Advan\n            /; (imo) ((?!tab)[\\w ]+?)(?: bui|\\))/i,                             // IMO\n            /(hp) ([\\w ]+\\w)/i,                                                 // HP iPAQ\n            /(asus)-?(\\w+)/i,                                                   // Asus\n            /(microsoft); (lumia[\\w ]+)/i,                                      // Microsoft Lumia\n            /(lenovo)[-_ ]?([-\\w]+)/i,                                          // Lenovo\n            /(jolla)/i,                                                         // Jolla\n            /(oppo) ?([\\w ]+) bui/i                                             // OPPO\n            ], [VENDOR, MODEL, [TYPE, MOBILE]], [\n\n            /(imo) (tab \\w+)/i,                                                 // IMO\n            /(kobo)\\s(ereader|touch)/i,                                         // Kobo\n            /(archos) (gamepad2?)/i,                                            // Archos\n            /(hp).+(touchpad(?!.+tablet)|tablet)/i,                             // HP TouchPad\n            /(kindle)\\/([\\w\\.]+)/i,                                             // Kindle\n            /(nook)[\\w ]+build\\/(\\w+)/i,                                        // Nook\n            /(dell) (strea[kpr\\d ]*[\\dko])/i,                                   // Dell Streak\n            /(le[- ]+pan)[- ]+(\\w{1,9}) bui/i,                                  // Le Pan Tablets\n            /(trinity)[- ]*(t\\d{3}) bui/i,                                      // Trinity Tablets\n            /(gigaset)[- ]+(q\\w{1,9}) bui/i,                                    // Gigaset Tablets\n            /(vodafone) ([\\w ]+)(?:\\)| bui)/i                                   // Vodafone\n            ], [VENDOR, MODEL, [TYPE, TABLET]], [\n\n            /(surface duo)/i                                                    // Surface Duo\n            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [\n            /droid [\\d\\.]+; (fp\\du?)(?: b|\\))/i                                 // Fairphone\n            ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [\n            /(u304aa)/i                                                         // AT&T\n            ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [\n            /\\bsie-(\\w*)/i                                                      // Siemens\n            ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [\n            /\\b(rct\\w+) b/i                                                     // RCA Tablets\n            ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [\n            /\\b(venue[\\d ]{2,7}) b/i                                            // Dell Venue Tablets\n            ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [\n            /\\b(q(?:mv|ta)\\w+) b/i                                              // Verizon Tablet\n            ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [\n            /\\b(?:barnes[& ]+noble |bn[rt])([\\w\\+ ]*) b/i                       // Barnes & Noble Tablet\n            ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [\n            /\\b(tm\\d{3}\\w+) b/i\n            ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [\n            /\\b(k88) b/i                                                        // ZTE K Series Tablet\n            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [\n            /\\b(nx\\d{3}j) b/i                                                   // ZTE Nubia\n            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [\n            /\\b(gen\\d{3}) b.+49h/i                                              // Swiss GEN Mobile\n            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [\n            /\\b(zur\\d{3}) b/i                                                   // Swiss ZUR Tablet\n            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [\n            /\\b((zeki)?tb.*\\b) b/i                                              // Zeki Tablets\n            ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [\n            /\\b([yr]\\d{2}) b/i,\n            /\\b(dragon[- ]+touch |dt)(\\w{5}) b/i                                // Dragon Touch Tablet\n            ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [\n            /\\b(ns-?\\w{0,9}) b/i                                                // Insignia Tablets\n            ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [\n            /\\b((nxa|next)-?\\w{0,9}) b/i                                        // NextBook Tablets\n            ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [\n            /\\b(xtreme\\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i                  // Voice Xtreme Phones\n            ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [\n            /\\b(lvtel\\-)?(v1[12]) b/i                                           // LvTel Phones\n            ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [\n            /\\b(ph-1) /i                                                        // Essential PH-1\n            ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [\n            /\\b(v(100md|700na|7011|917g).*\\b) b/i                               // Envizen Tablets\n            ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [\n            /\\b(trio[-\\w\\. ]+) b/i                                              // MachSpeed Tablets\n            ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [\n            /\\btu_(1491) b/i                                                    // Rotor Tablets\n            ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [\n            /(shield[\\w ]+) b/i                                                 // Nvidia Shield Tablets\n            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [\n            /(sprint) (\\w+)/i                                                   // Sprint Phones\n            ], [VENDOR, MODEL, [TYPE, MOBILE]], [\n            /(kin\\.[onetw]{3})/i                                                // Microsoft Kin\n            ], [[MODEL, /\\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [\n            /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\\)/i             // Zebra\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [\n            /droid.+; (ec30|ps20|tc[2-8]\\d[kx])\\)/i\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [\n\n            ///////////////////\n            // SMARTTVS\n            ///////////////////\n\n            /smart-tv.+(samsung)/i                                              // Samsung\n            ], [VENDOR, [TYPE, SMARTTV]], [\n            /hbbtv.+maple;(\\d+)/i\n            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [\n            /(nux; netcast.+smarttv|lg (netcast\\.tv-201\\d|android tv))/i        // LG SmartTV\n            ], [[VENDOR, LG], [TYPE, SMARTTV]], [\n            /(apple) ?tv/i                                                      // Apple TV\n            ], [VENDOR, [MODEL, APPLE+' TV'], [TYPE, SMARTTV]], [\n            /crkey/i                                                            // Google Chromecast\n            ], [[MODEL, CHROME+'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [\n            /droid.+aft(\\w+)( bui|\\))/i                                         // Fire TV\n            ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [\n            /\\(dtv[\\);].+(aquos)/i,\n            /(aquos-tv[\\w ]+)\\)/i                                               // Sharp\n            ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],[\n            /(bravia[\\w ]+)( bui|\\))/i                                              // Sony\n            ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [\n            /(mitv-\\w{5}) bui/i                                                 // Xiaomi\n            ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [\n            /Hbbtv.*(technisat) (.*);/i                                         // TechniSAT\n            ], [VENDOR, MODEL, [TYPE, SMARTTV]], [\n            /\\b(roku)[\\dx]*[\\)\\/]((?:dvp-)?[\\d\\.]*)/i,                          // Roku\n            /hbbtv\\/\\d+\\.\\d+\\.\\d+ +\\([\\w\\+ ]*; *([\\w\\d][^;]*);([^;]*)/i         // HbbTV devices\n            ], [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]], [\n            /\\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\\b/i                   // SmartTV from Unidentified Vendors\n            ], [[TYPE, SMARTTV]], [\n\n            ///////////////////\n            // CONSOLES\n            ///////////////////\n\n            /(ouya)/i,                                                          // Ouya\n            /(nintendo) ([wids3utch]+)/i                                        // Nintendo\n            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [\n            /droid.+; (shield) bui/i                                            // Nvidia\n            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [\n            /(playstation [345portablevi]+)/i                                   // Playstation\n            ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [\n            /\\b(xbox(?: one)?(?!; xbox))[\\); ]/i                                // Microsoft Xbox\n            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [\n\n            ///////////////////\n            // WEARABLES\n            ///////////////////\n\n            /\\b(sm-[lr]\\d\\d[05][fnuw]?s?)\\b/i                                   // Samsung Galaxy Watch\n            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, WEARABLE]], [\n            /((pebble))app/i                                                    // Pebble\n            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [\n            /(watch)(?: ?os[,\\/]|\\d,\\d\\/)[\\d\\.]+/i                              // Apple Watch\n            ], [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]], [\n            /droid.+; (glass) \\d/i                                              // Google Glass\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [\n            /droid.+; (wt63?0{2,3})\\)/i\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [\n\n            ///////////////////\n            // XR\n            ///////////////////\n\n            /droid.+; (glass) \\d/i                                              // Google Glass\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [\n            /(pico) (4|neo3(?: link|pro)?)/i                                    // Pico\n            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [\n            /; (quest( \\d| pro)?)/i                                             // Oculus Quest\n            ], [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]], [\n\n            ///////////////////\n            // EMBEDDED\n            ///////////////////\n\n            /(tesla)(?: qtcarbrowser|\\/[-\\w\\.]+)/i                              // Tesla\n            ], [VENDOR, [TYPE, EMBEDDED]], [\n            /(aeobc)\\b/i                                                        // Echo Dot\n            ], [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]], [\n\n            ////////////////////\n            // MIXED (GENERIC)\n            ///////////////////\n\n            /droid .+?; ([^;]+?)(?: bui|; wv\\)|\\) applew).+? mobile safari/i    // Android Phones from Unidentified Vendors\n            ], [MODEL, [TYPE, MOBILE]], [\n            /droid .+?; ([^;]+?)(?: bui|\\) applew).+?(?! mobile) safari/i       // Android Tablets from Unidentified Vendors\n            ], [MODEL, [TYPE, TABLET]], [\n            /\\b((tablet|tab)[;\\/]|focus\\/\\d(?!.+mobile))/i                      // Unidentifiable Tablet\n            ], [[TYPE, TABLET]], [\n            /(phone|mobile(?:[;\\/]| [ \\w\\/\\.]*safari)|pda(?=.+windows ce))/i    // Unidentifiable Mobile\n            ], [[TYPE, MOBILE]], [\n            /(android[-\\w\\. ]{0,9});.+buil/i                                    // Generic Android Device\n            ], [MODEL, [VENDOR, 'Generic']]\n        ],\n\n        engine : [[\n\n            /windows.+ edge\\/([\\w\\.]+)/i                                       // EdgeHTML\n            ], [VERSION, [NAME, EDGE+'HTML']], [\n\n            /(arkweb)\\/([\\w\\.]+)/i                                              // ArkWeb\n            ], [NAME, VERSION], [\n\n            /webkit\\/537\\.36.+chrome\\/(?!27)([\\w\\.]+)/i                         // Blink\n            ], [VERSION, [NAME, 'Blink']], [\n\n            /(presto)\\/([\\w\\.]+)/i,                                             // Presto\n            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna|servo)\\/([\\w\\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna/Servo\n            /ekioh(flow)\\/([\\w\\.]+)/i,                                          // Flow\n            /(khtml|tasman|links)[\\/ ]\\(?([\\w\\.]+)/i,                           // KHTML/Tasman/Links\n            /(icab)[\\/ ]([23]\\.[\\d\\.]+)/i,                                      // iCab\n            /\\b(libweb)/i\n            ], [NAME, VERSION], [\n\n            /rv\\:([\\w\\.]{1,9})\\b.+(gecko)/i                                     // Gecko\n            ], [VERSION, NAME]\n        ],\n\n        os : [[\n\n            // Windows\n            /microsoft (windows) (vista|xp)/i                                   // Windows (iTunes)\n            ], [NAME, VERSION], [\n            /(windows (?:phone(?: os)?|mobile))[\\/ ]?([\\d\\.\\w ]*)/i             // Windows Phone\n            ], [NAME, [VERSION, strMapper, windowsVersionMap]], [\n            /windows nt 6\\.2; (arm)/i,                                        // Windows RT\n            /windows[\\/ ]?([ntce\\d\\. ]+\\w)(?!.+xbox)/i,\n            /(?:win(?=3|9|n)|win 9x )([nt\\d\\.]+)/i\n            ], [[VERSION, strMapper, windowsVersionMap], [NAME, 'Windows']], [\n\n            // iOS/macOS\n            /ip[honead]{2,4}\\b(?:.*os ([\\w]+) like mac|; opera)/i,              // iOS\n            /(?:ios;fbsv\\/|iphone.+ios[\\/ ])([\\d\\.]+)/i,\n            /cfnetwork\\/.+darwin/i\n            ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [\n            /(mac os x) ?([\\w\\. ]*)/i,\n            /(macintosh|mac_powerpc\\b)(?!.+haiku)/i                             // Mac OS\n            ], [[NAME, MAC_OS], [VERSION, /_/g, '.']], [\n\n            // Mobile OSes\n            /droid ([\\w\\.]+)\\b.+(android[- ]x86|harmonyos)/i                    // Android-x86/HarmonyOS\n            ], [VERSION, NAME], [                                               // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS/OpenHarmony\n            /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish|openharmony)[-\\/ ]?([\\w\\.]*)/i,\n            /(blackberry)\\w*\\/([\\w\\.]*)/i,                                      // Blackberry\n            /(tizen|kaios)[\\/ ]([\\w\\.]+)/i,                                     // Tizen/KaiOS\n            /\\((series40);/i                                                    // Series 40\n            ], [NAME, VERSION], [\n            /\\(bb(10);/i                                                        // BlackBerry 10\n            ], [VERSION, [NAME, BLACKBERRY]], [\n            /(?:symbian ?os|symbos|s60(?=;)|series60)[-\\/ ]?([\\w\\.]*)/i         // Symbian\n            ], [VERSION, [NAME, 'Symbian']], [\n            /mozilla\\/[\\d\\.]+ \\((?:mobile|tablet|tv|mobile; [\\w ]+); rv:.+ gecko\\/([\\w\\.]+)/i // Firefox OS\n            ], [VERSION, [NAME, FIREFOX+' OS']], [\n            /web0s;.+rt(tv)/i,\n            /\\b(?:hp)?wos(?:browser)?\\/([\\w\\.]+)/i                              // WebOS\n            ], [VERSION, [NAME, 'webOS']], [\n            /watch(?: ?os[,\\/]|\\d,\\d\\/)([\\d\\.]+)/i                              // watchOS\n            ], [VERSION, [NAME, 'watchOS']], [\n\n            // Google Chromecast\n            /crkey\\/([\\d\\.]+)/i                                                 // Google Chromecast\n            ], [VERSION, [NAME, CHROME+'cast']], [\n            /(cros) [\\w]+(?:\\)| ([\\w\\.]+)\\b)/i                                  // Chromium OS\n            ], [[NAME, CHROMIUM_OS], VERSION],[\n\n            // Smart TVs\n            /panasonic;(viera)/i,                                               // Panasonic Viera\n            /(netrange)mmh/i,                                                   // Netrange\n            /(nettv)\\/(\\d+\\.[\\w\\.]+)/i,                                         // NetTV\n\n            // Console\n            /(nintendo|playstation) ([wids345portablevuch]+)/i,                 // Nintendo/Playstation\n            /(xbox); +xbox ([^\\);]+)/i,                                         // Microsoft Xbox (360, One, X, S, Series X, Series S)\n\n            // Other\n            /\\b(joli|palm)\\b ?(?:os)?\\/?([\\w\\.]*)/i,                            // Joli/Palm\n            /(mint)[\\/\\(\\) ]?(\\w*)/i,                                           // Mint\n            /(mageia|vectorlinux)[; ]/i,                                        // Mageia/VectorLinux\n            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\\/ ]?(?!chrom|package)([-\\w\\.]*)/i,\n                                                                                // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire\n            /(hurd|linux) ?([\\w\\.]*)/i,                                         // Hurd/Linux\n            /(gnu) ?([\\w\\.]*)/i,                                                // GNU\n            /\\b([-frentopcghs]{0,5}bsd|dragonfly)[\\/ ]?(?!amd|[ix346]{1,2}86)([\\w\\.]*)/i, // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly\n            /(haiku) (\\w+)/i                                                    // Haiku\n            ], [NAME, VERSION], [\n            /(sunos) ?([\\w\\.\\d]*)/i                                             // Solaris\n            ], [[NAME, 'Solaris'], VERSION], [\n            /((?:open)?solaris)[-\\/ ]?([\\w\\.]*)/i,                              // Solaris\n            /(aix) ((\\d)(?=\\.|\\)| )[\\w\\.])*/i,                                  // AIX\n            /\\b(beos|os\\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i, // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS\n            /(unix) ?([\\w\\.]*)/i                                                // UNIX\n            ], [NAME, VERSION]\n        ]\n    };\n\n    /////////////////\n    // Constructor\n    ////////////////\n\n    var UAParser = function (ua, extensions) {\n\n        if (typeof ua === OBJ_TYPE) {\n            extensions = ua;\n            ua = undefined;\n        }\n\n        if (!(this instanceof UAParser)) {\n            return new UAParser(ua, extensions).getResult();\n        }\n\n        var _navigator = (typeof window !== UNDEF_TYPE && window.navigator) ? window.navigator : undefined;\n        var _ua = ua || ((_navigator && _navigator.userAgent) ? _navigator.userAgent : EMPTY);\n        var _uach = (_navigator && _navigator.userAgentData) ? _navigator.userAgentData : undefined;\n        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;\n        var _isSelfNav = _navigator && _navigator.userAgent == _ua;\n\n        this.getBrowser = function () {\n            var _browser = {};\n            _browser[NAME] = undefined;\n            _browser[VERSION] = undefined;\n            rgxMapper.call(_browser, _ua, _rgxmap.browser);\n            _browser[MAJOR] = majorize(_browser[VERSION]);\n            // Brave-specific detection\n            if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {\n                _browser[NAME] = 'Brave';\n            }\n            return _browser;\n        };\n        this.getCPU = function () {\n            var _cpu = {};\n            _cpu[ARCHITECTURE] = undefined;\n            rgxMapper.call(_cpu, _ua, _rgxmap.cpu);\n            return _cpu;\n        };\n        this.getDevice = function () {\n            var _device = {};\n            _device[VENDOR] = undefined;\n            _device[MODEL] = undefined;\n            _device[TYPE] = undefined;\n            rgxMapper.call(_device, _ua, _rgxmap.device);\n            if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {\n                _device[TYPE] = MOBILE;\n            }\n            // iPadOS-specific detection: identified as Mac, but has some iOS-only properties\n            if (_isSelfNav && _device[MODEL] == 'Macintosh' && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {\n                _device[MODEL] = 'iPad';\n                _device[TYPE] = TABLET;\n            }\n            return _device;\n        };\n        this.getEngine = function () {\n            var _engine = {};\n            _engine[NAME] = undefined;\n            _engine[VERSION] = undefined;\n            rgxMapper.call(_engine, _ua, _rgxmap.engine);\n            return _engine;\n        };\n        this.getOS = function () {\n            var _os = {};\n            _os[NAME] = undefined;\n            _os[VERSION] = undefined;\n            rgxMapper.call(_os, _ua, _rgxmap.os);\n            if (_isSelfNav && !_os[NAME] && _uach && _uach.platform && _uach.platform != 'Unknown') {\n                _os[NAME] = _uach.platform  \n                                    .replace(/chrome os/i, CHROMIUM_OS)\n                                    .replace(/macos/i, MAC_OS);           // backward compatibility\n            }\n            return _os;\n        };\n        this.getResult = function () {\n            return {\n                ua      : this.getUA(),\n                browser : this.getBrowser(),\n                engine  : this.getEngine(),\n                os      : this.getOS(),\n                device  : this.getDevice(),\n                cpu     : this.getCPU()\n            };\n        };\n        this.getUA = function () {\n            return _ua;\n        };\n        this.setUA = function (ua) {\n            _ua = (typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH) ? trim(ua, UA_MAX_LENGTH) : ua;\n            return this;\n        };\n        this.setUA(_ua);\n        return this;\n    };\n\n    UAParser.VERSION = LIBVERSION;\n    UAParser.BROWSER =  enumerize([NAME, VERSION, MAJOR]);\n    UAParser.CPU = enumerize([ARCHITECTURE]);\n    UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);\n    UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);\n\n    ///////////\n    // Export\n    //////////\n\n    // check js environment\n    if (typeof(exports) !== UNDEF_TYPE) {\n        // nodejs env\n        if (\"object\" !== UNDEF_TYPE && module.exports) {\n            exports = module.exports = UAParser;\n        }\n        exports.UAParser = UAParser;\n    } else {\n        // requirejs env (optional)\n        if (\"function\" === FUNC_TYPE && __webpack_require__.amdO) {\n            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n                return UAParser;\n            }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        } else if (typeof window !== UNDEF_TYPE) {\n            // browser env\n            window.UAParser = UAParser;\n        }\n    }\n\n    // jQuery/Zepto specific (optional)\n    // Note:\n    //   In AMD env the global scope should be kept clean, but jQuery is an exception.\n    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,\n    //   and we should catch that.\n    var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);\n    if ($ && !$.ua) {\n        var parser = new UAParser();\n        $.ua = parser.getResult();\n        $.ua.get = function () {\n            return parser.getUA();\n        };\n        $.ua.set = function (ua) {\n            parser.setUA(ua);\n            var result = parser.getResult();\n            for (var prop in result) {\n                $.ua[prop] = result[prop];\n            }\n        };\n    }\n\n})(typeof window === 'object' ? window : this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ua-parser-js/src/ua-parser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWMsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsR0FBRyx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9yZWdleC5qcz84MWQ1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtNV1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ rng; }\n/* harmony export */ });\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9ybmcuanM/ZjRjYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcbi8vIHJlcXVpcmUgdGhlIGNyeXB0byBBUEkgYW5kIGRvIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGZhbGxiYWNrIHRvIGxvd2VyIHF1YWxpdHkgcmFuZG9tIG51bWJlclxuLy8gZ2VuZXJhdG9ycyAobGlrZSBNYXRoLnJhbmRvbSgpKS5cbnZhciBnZXRSYW5kb21WYWx1ZXM7XG52YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBybmcoKSB7XG4gIC8vIGxhenkgbG9hZCBzbyB0aGF0IGVudmlyb25tZW50cyB0aGF0IG5lZWQgdG8gcG9seWZpbGwgaGF2ZSBhIGNoYW5jZSB0byBkbyBzb1xuICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgIC8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0byBpbXBsZW1lbnRhdGlvbi4gQWxzbyxcbiAgICAvLyBmaW5kIHRoZSBjb21wbGV0ZSBpbXBsZW1lbnRhdGlvbiBvZiBjcnlwdG8gKG1zQ3J5cHRvKSBvbiBJRTExLlxuICAgIGdldFJhbmRvbVZhbHVlcyA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykgfHwgdHlwZW9mIG1zQ3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09PSAnZnVuY3Rpb24nICYmIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKG1zQ3J5cHRvKTtcblxuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js\");\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (stringify);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7O0FBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwZ0JBQTBnQjtBQUMxZ0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTyx3REFBUTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSwrREFBZSxTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzP2JkMzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG5cbnZhciBieXRlVG9IZXggPSBbXTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc3Vic3RyKDEpKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFycikge1xuICB2YXIgb2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgdmFyIHV1aWQgPSAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7IC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcblxuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(rnds);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (v4);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQTJCO0FBQ1k7O0FBRXZDO0FBQ0E7QUFDQSwrQ0FBK0MsK0NBQUcsS0FBSzs7QUFFdkQ7QUFDQSxtQ0FBbUM7O0FBRW5DO0FBQ0E7O0FBRUEsb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFNBQVMseURBQVM7QUFDbEI7O0FBRUEsK0RBQWUsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzP2E2MjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js\");\n\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (validate);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7QUFBK0I7O0FBRS9CO0FBQ0EscUNBQXFDLGlEQUFLO0FBQzFDOztBQUVBLCtEQUFlLFFBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92YWxpZGF0ZS5qcz8xZGZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/webrtc-adapter/src/js/adapter_core.js":
/*!************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/adapter_core.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _adapter_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adapter_factory.js */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/adapter_factory.js\");\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n\n\n\n\nconst adapter =\n  (0,_adapter_factory_js__WEBPACK_IMPORTED_MODULE_0__.adapterFactory)({window: typeof window === 'undefined' ? undefined : window});\n/* harmony default export */ __webpack_exports__[\"default\"] = (adapter);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvYWRhcHRlcl9jb3JlLmpzIiwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFdUM7O0FBRXBEO0FBQ0EsRUFBRSxtRUFBYyxFQUFFLDJEQUEyRDtBQUM3RSwrREFBZSxPQUFPLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9hZGFwdGVyX2NvcmUuanM/YWY0YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7YWRhcHRlckZhY3Rvcnl9IGZyb20gJy4vYWRhcHRlcl9mYWN0b3J5LmpzJztcblxuY29uc3QgYWRhcHRlciA9XG4gIGFkYXB0ZXJGYWN0b3J5KHt3aW5kb3c6IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogd2luZG93fSk7XG5leHBvcnQgZGVmYXVsdCBhZGFwdGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/webrtc-adapter/src/js/adapter_core.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/webrtc-adapter/src/js/adapter_factory.js":
/*!***************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/adapter_factory.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adapterFactory: function() { return /* binding */ adapterFactory; }\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/utils.js\");\n/* harmony import */ var _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chrome/chrome_shim */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js\");\n/* harmony import */ var _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./firefox/firefox_shim */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js\");\n/* harmony import */ var _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./safari/safari_shim */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js\");\n/* harmony import */ var _common_shim__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common_shim */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/common_shim.js\");\n/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! sdp */ \"(app-pages-browser)/./node_modules/sdp/sdp.js\");\n/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(sdp__WEBPACK_IMPORTED_MODULE_5__);\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n\n// Browser shims.\n\n\n\n\n\n\n// Shimming starts here.\nfunction adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = _utils__WEBPACK_IMPORTED_MODULE_0__.log;\n  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_0__.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim: _common_shim__WEBPACK_IMPORTED_MODULE_4__,\n    extractVersion: _utils__WEBPACK_IMPORTED_MODULE_0__.extractVersion,\n    disableLog: _utils__WEBPACK_IMPORTED_MODULE_0__.disableLog,\n    disableWarnings: _utils__WEBPACK_IMPORTED_MODULE_0__.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp: sdp__WEBPACK_IMPORTED_MODULE_5__,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!_chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__ || !_chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__;\n\n      // Must be called before shimPeerConnection.\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimGetUserMedia(window, browserDetails);\n      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimMediaStream(window, browserDetails);\n      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimPeerConnection(window, browserDetails);\n      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimOnTrack(window, browserDetails);\n      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimAddTrackRemoveTrack(window, browserDetails);\n      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimGetSendersWithDtmf(window, browserDetails);\n      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimGetStats(window, browserDetails);\n      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimSenderReceiverGetStats(window, browserDetails);\n      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.fixNegotiationNeeded(window, browserDetails);\n\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimRTCIceCandidate(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimRTCIceCandidateRelayProtocol(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimConnectionState(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimMaxMessageSize(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimSendThrowTypeError(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!_firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__ || !_firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__;\n\n      // Must be called before shimPeerConnection.\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimGetUserMedia(window, browserDetails);\n      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimPeerConnection(window, browserDetails);\n      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimOnTrack(window, browserDetails);\n      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimRemoveStream(window, browserDetails);\n      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimSenderGetStats(window, browserDetails);\n      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimReceiverGetStats(window, browserDetails);\n      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimRTCDataChannel(window, browserDetails);\n      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimAddTransceiver(window, browserDetails);\n      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimGetParameters(window, browserDetails);\n      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimCreateOffer(window, browserDetails);\n      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimCreateAnswer(window, browserDetails);\n\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimRTCIceCandidate(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimConnectionState(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimMaxMessageSize(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!_safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__ || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__;\n\n      // Must be called before shimCallbackAPI.\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimRTCIceServerUrls(window, browserDetails);\n      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimCreateOfferLegacy(window, browserDetails);\n      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimCallbacksAPI(window, browserDetails);\n      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimLocalStreamsAPI(window, browserDetails);\n      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimRemoteStreamsAPI(window, browserDetails);\n      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimTrackEventTransceiver(window, browserDetails);\n      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimGetUserMedia(window, browserDetails);\n      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimAudioContext(window, browserDetails);\n\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimRTCIceCandidate(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimRTCIceCandidateRelayProtocol(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimMaxMessageSize(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimSendThrowTypeError(window, browserDetails);\n      _common_shim__WEBPACK_IMPORTED_MODULE_4__.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/webrtc-adapter/src/js/adapter_factory.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js":
/*!******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fixNegotiationNeeded: function() { return /* binding */ fixNegotiationNeeded; },\n/* harmony export */   shimAddTrackRemoveTrack: function() { return /* binding */ shimAddTrackRemoveTrack; },\n/* harmony export */   shimAddTrackRemoveTrackWithNative: function() { return /* binding */ shimAddTrackRemoveTrackWithNative; },\n/* harmony export */   shimGetDisplayMedia: function() { return /* reexport safe */ _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__.shimGetDisplayMedia; },\n/* harmony export */   shimGetSendersWithDtmf: function() { return /* binding */ shimGetSendersWithDtmf; },\n/* harmony export */   shimGetStats: function() { return /* binding */ shimGetStats; },\n/* harmony export */   shimGetUserMedia: function() { return /* reexport safe */ _getusermedia__WEBPACK_IMPORTED_MODULE_1__.shimGetUserMedia; },\n/* harmony export */   shimMediaStream: function() { return /* binding */ shimMediaStream; },\n/* harmony export */   shimOnTrack: function() { return /* binding */ shimOnTrack; },\n/* harmony export */   shimPeerConnection: function() { return /* binding */ shimPeerConnection; },\n/* harmony export */   shimSenderReceiverGetStats: function() { return /* binding */ shimSenderReceiverGetStats; }\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/utils.js\");\n/* harmony import */ var _getusermedia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getusermedia */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js\");\n/* harmony import */ var _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getdisplaymedia */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js\");\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n\n\n\n\n\nfunction shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nfunction shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    _utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nfunction shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nfunction shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nfunction shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        _utils_js__WEBPACK_IMPORTED_MODULE_0__.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    _utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        _utils_js__WEBPACK_IMPORTED_MODULE_0__.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nfunction shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n          'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nfunction shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n    .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n          'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n        this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n          'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n        externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n        internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n        .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n    window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n    'localDescription', {\n      get() {\n        const description = origLocalDescription.get.apply(this);\n        if (description.type === '') {\n          return description;\n        }\n        return replaceInternalStreamId(this, description);\n      }\n    });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n          'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nfunction shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n      .forEach(function(method) {\n        const nativeMethod = window.RTCPeerConnection.prototype[method];\n        const methodObj = {[method]() {\n          arguments[0] = new ((method === 'addIceCandidate') ?\n            window.RTCIceCandidate :\n            window.RTCSessionDescription)(arguments[0]);\n          return nativeMethod.apply(this, arguments);\n        }};\n        window.RTCPeerConnection.prototype[method] = methodObj[method];\n      });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nfunction fixNegotiationNeeded(window, browserDetails) {\n  _utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js":
/*!**********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shimGetDisplayMedia: function() { return /* binding */ shimGetDisplayMedia; }\n/* harmony export */ });\n/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\nfunction shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvY2hyb21lL2dldGRpc3BsYXltZWRpYS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhO0FBQ047QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvY2hyb21lL2dldGRpc3BsYXltZWRpYS5qcz9jNGU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE4IFRoZSBhZGFwdGVyLmpzIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHNoaW1HZXREaXNwbGF5TWVkaWEod2luZG93LCBnZXRTb3VyY2VJZCkge1xuICBpZiAod2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMgJiZcbiAgICAnZ2V0RGlzcGxheU1lZGlhJyBpbiB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoISh3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZ2V0U291cmNlSWQgaXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBwcm9taXNlIHJlc29sdmluZyB3aXRoXG4gIC8vIHRoZSBzb3VyY2VJZCBvZiB0aGUgc2NyZWVuL3dpbmRvdy90YWIgdG8gYmUgc2hhcmVkLlxuICBpZiAodHlwZW9mIGdldFNvdXJjZUlkICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcignc2hpbUdldERpc3BsYXlNZWRpYTogZ2V0U291cmNlSWQgYXJndW1lbnQgaXMgbm90ICcgK1xuICAgICAgICAnYSBmdW5jdGlvbicpO1xuICAgIHJldHVybjtcbiAgfVxuICB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWEgPVxuICAgIGZ1bmN0aW9uIGdldERpc3BsYXlNZWRpYShjb25zdHJhaW50cykge1xuICAgICAgcmV0dXJuIGdldFNvdXJjZUlkKGNvbnN0cmFpbnRzKVxuICAgICAgICAudGhlbihzb3VyY2VJZCA9PiB7XG4gICAgICAgICAgY29uc3Qgd2lkdGhTcGVjaWZpZWQgPSBjb25zdHJhaW50cy52aWRlbyAmJiBjb25zdHJhaW50cy52aWRlby53aWR0aDtcbiAgICAgICAgICBjb25zdCBoZWlnaHRTcGVjaWZpZWQgPSBjb25zdHJhaW50cy52aWRlbyAmJlxuICAgICAgICAgICAgY29uc3RyYWludHMudmlkZW8uaGVpZ2h0O1xuICAgICAgICAgIGNvbnN0IGZyYW1lUmF0ZVNwZWNpZmllZCA9IGNvbnN0cmFpbnRzLnZpZGVvICYmXG4gICAgICAgICAgICBjb25zdHJhaW50cy52aWRlby5mcmFtZVJhdGU7XG4gICAgICAgICAgY29uc3RyYWludHMudmlkZW8gPSB7XG4gICAgICAgICAgICBtYW5kYXRvcnk6IHtcbiAgICAgICAgICAgICAgY2hyb21lTWVkaWFTb3VyY2U6ICdkZXNrdG9wJyxcbiAgICAgICAgICAgICAgY2hyb21lTWVkaWFTb3VyY2VJZDogc291cmNlSWQsXG4gICAgICAgICAgICAgIG1heEZyYW1lUmF0ZTogZnJhbWVSYXRlU3BlY2lmaWVkIHx8IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmICh3aWR0aFNwZWNpZmllZCkge1xuICAgICAgICAgICAgY29uc3RyYWludHMudmlkZW8ubWFuZGF0b3J5Lm1heFdpZHRoID0gd2lkdGhTcGVjaWZpZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoZWlnaHRTcGVjaWZpZWQpIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvLm1hbmRhdG9yeS5tYXhIZWlnaHQgPSBoZWlnaHRTcGVjaWZpZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shimGetUserMedia: function() { return /* binding */ shimGetUserMedia; }\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/utils.js\");\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n\nconst logging = _utils_js__WEBPACK_IMPORTED_MODULE_0__.log;\n\nfunction shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n              devices = devices.filter(d => d.kind === 'videoinput');\n              let dev = devices.find(d => matches.some(match =>\n                d.label.toLowerCase().includes(match)));\n              if (!dev && devices.length && matches.includes('back')) {\n                dev = devices[devices.length - 1]; // more likely the back cam\n              }\n              if (dev) {\n                constraints.video.deviceId = face.exact\n                  ? {exact: dev.deviceId}\n                  : {ideal: dev.deviceId};\n              }\n              constraints.video = constraintsToChrome_(constraints.video);\n              logging('chrome: ' + JSON.stringify(constraints));\n              return func(constraints);\n            });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/webrtc-adapter/src/js/common_shim.js":
/*!***********************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/common_shim.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   removeExtmapAllowMixed: function() { return /* binding */ removeExtmapAllowMixed; },\n/* harmony export */   shimAddIceCandidateNullOrEmpty: function() { return /* binding */ shimAddIceCandidateNullOrEmpty; },\n/* harmony export */   shimConnectionState: function() { return /* binding */ shimConnectionState; },\n/* harmony export */   shimMaxMessageSize: function() { return /* binding */ shimMaxMessageSize; },\n/* harmony export */   shimParameterlessSetLocalDescription: function() { return /* binding */ shimParameterlessSetLocalDescription; },\n/* harmony export */   shimRTCIceCandidate: function() { return /* binding */ shimRTCIceCandidate; },\n/* harmony export */   shimRTCIceCandidateRelayProtocol: function() { return /* binding */ shimRTCIceCandidateRelayProtocol; },\n/* harmony export */   shimSendThrowTypeError: function() { return /* binding */ shimSendThrowTypeError; }\n/* harmony export */ });\n/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sdp */ \"(app-pages-browser)/./node_modules/sdp/sdp.js\");\n/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sdp__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/utils.js\");\n/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n\n\n\n\nfunction shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substring(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = sdp__WEBPACK_IMPORTED_MODULE_0___default().parseCandidate(args.candidate);\n      for (const key in parsedCandidate) {\n        if (!(key in nativeCandidate)) {\n          Object.defineProperty(nativeCandidate, key,\n            {value: parsedCandidate[key]});\n        }\n      }\n\n      // Override serializer to not serialize the extra attributes.\n      nativeCandidate.toJSON = function toJSON() {\n        return {\n          candidate: nativeCandidate.candidate,\n          sdpMid: nativeCandidate.sdpMid,\n          sdpMLineIndex: nativeCandidate.sdpMLineIndex,\n          usernameFragment: nativeCandidate.usernameFragment,\n        };\n      };\n      return nativeCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  _utils__WEBPACK_IMPORTED_MODULE_1__.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nfunction shimRTCIceCandidateRelayProtocol(window) {\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'relayProtocol' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  _utils__WEBPACK_IMPORTED_MODULE_1__.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      const parsedCandidate = sdp__WEBPACK_IMPORTED_MODULE_0___default().parseCandidate(e.candidate.candidate);\n      if (parsedCandidate.type === 'relay') {\n        // This is a libwebrtc-specific mapping of local type preference\n        // to relayProtocol.\n        e.candidate.relayProtocol = {\n          0: 'tls',\n          1: 'tcp',\n          2: 'udp',\n        }[parsedCandidate.priority >> 24];\n      }\n    }\n    return e;\n  });\n}\n\nfunction shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = sdp__WEBPACK_IMPORTED_MODULE_0___default().splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = sdp__WEBPACK_IMPORTED_MODULE_0___default().parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = sdp__WEBPACK_IMPORTED_MODULE_0___default().matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substring(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nfunction shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  _utils__WEBPACK_IMPORTED_MODULE_1__.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nfunction shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n          this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n          this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nfunction removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' &&\n      browserDetails._safariVersion >= 13.1) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nfunction shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\n// Note: Make sure to call this ahead of APIs that modify\n// setLocalDescription.length\nfunction shimParameterlessSetLocalDescription(window, browserDetails) {\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      let desc = arguments[0] || {};\n      if (typeof desc !== 'object' || (desc.type && desc.sdp)) {\n        return nativeSetLocalDescription.apply(this, arguments);\n      }\n      // The remaining steps should technically happen when SLD comes off the\n      // RTCPeerConnection's operations chain (not ahead of going on it), but\n      // this is too difficult to shim. Instead, this shim only covers the\n      // common case where the operations chain is empty. This is imperfect, but\n      // should cover many cases. Rationale: Even if we can't reduce the glare\n      // window to zero on imperfect implementations, there's value in tapping\n      // into the perfect negotiation pattern that several browsers support.\n      desc = {type: desc.type, sdp: desc.sdp};\n      if (!desc.type) {\n        switch (this.signalingState) {\n          case 'stable':\n          case 'have-local-offer':\n          case 'have-remote-pranswer':\n            desc.type = 'offer';\n            break;\n          default:\n            desc.type = 'answer';\n            break;\n        }\n      }\n      if (desc.sdp || (desc.type !== 'offer' && desc.type !== 'answer')) {\n        return nativeSetLocalDescription.apply(this, [desc]);\n      }\n      const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;\n      return func.apply(this)\n        .then(d => nativeSetLocalDescription.apply(this, [d]));\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/webrtc-adapter/src/js/common_shim.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js":
/*!********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shimAddTransceiver: function() { return /* binding */ shimAddTransceiver; },\n/* harmony export */   shimCreateAnswer: function() { return /* binding */ shimCreateAnswer; },\n/* harmony export */   shimCreateOffer: function() { return /* binding */ shimCreateOffer; },\n/* harmony export */   shimGetDisplayMedia: function() { return /* reexport safe */ _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__.shimGetDisplayMedia; },\n/* harmony export */   shimGetParameters: function() { return /* binding */ shimGetParameters; },\n/* harmony export */   shimGetUserMedia: function() { return /* reexport safe */ _getusermedia__WEBPACK_IMPORTED_MODULE_1__.shimGetUserMedia; },\n/* harmony export */   shimOnTrack: function() { return /* binding */ shimOnTrack; },\n/* harmony export */   shimPeerConnection: function() { return /* binding */ shimPeerConnection; },\n/* harmony export */   shimRTCDataChannel: function() { return /* binding */ shimRTCDataChannel; },\n/* harmony export */   shimReceiverGetStats: function() { return /* binding */ shimReceiverGetStats; },\n/* harmony export */   shimRemoveStream: function() { return /* binding */ shimRemoveStream; },\n/* harmony export */   shimSenderGetStats: function() { return /* binding */ shimSenderGetStats; }\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/utils.js\");\n/* harmony import */ var _getusermedia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getusermedia */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js\");\n/* harmony import */ var _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getdisplaymedia */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js\");\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n\n\n\n\n\nfunction shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nfunction shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n      .forEach(function(method) {\n        const nativeMethod = window.RTCPeerConnection.prototype[method];\n        const methodObj = {[method]() {\n          arguments[0] = new ((method === 'addIceCandidate') ?\n            window.RTCIceCandidate :\n            window.RTCSessionDescription)(arguments[0]);\n          return nativeMethod.apply(this, arguments);\n        }};\n        window.RTCPeerConnection.prototype[method] = methodObj[method];\n      });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nfunction shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n      Promise.resolve(new Map());\n  };\n}\n\nfunction shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  _utils__WEBPACK_IMPORTED_MODULE_0__.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nfunction shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      _utils__WEBPACK_IMPORTED_MODULE_0__.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nfunction shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nfunction shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        // WebIDL input coercion and validation\n        let sendEncodings = arguments[1] && arguments[1].sendEncodings;\n        if (sendEncodings === undefined) {\n          sendEncodings = [];\n        }\n        sendEncodings = [...sendEncodings];\n        const shouldPerformCheck = sendEncodings.length > 0;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = sendEncodings;\n            sender.sendEncodings = sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nfunction shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nfunction shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n        .then(() => {\n          return origCreateOffer.apply(this, arguments);\n        })\n        .finally(() => {\n          this.setParametersPromises = [];\n        });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nfunction shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n        .then(() => {\n          return origCreateAnswer.apply(this, arguments);\n        })\n        .finally(() => {\n          this.setParametersPromises = [];\n        });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js":
/*!***********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shimGetDisplayMedia: function() { return /* binding */ shimGetDisplayMedia; }\n/* harmony export */ });\n/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n\nfunction shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZmlyZWZveC9nZXRkaXNwbGF5bWVkaWEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFTjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2ZpcmVmb3gvZ2V0ZGlzcGxheW1lZGlhLmpzP2QyODEiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIGFkYXB0ZXIuanMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltR2V0RGlzcGxheU1lZGlhKHdpbmRvdywgcHJlZmVycmVkTWVkaWFTb3VyY2UpIHtcbiAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmXG4gICAgJ2dldERpc3BsYXlNZWRpYScgaW4gd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCEod2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldERpc3BsYXlNZWRpYSA9XG4gICAgZnVuY3Rpb24gZ2V0RGlzcGxheU1lZGlhKGNvbnN0cmFpbnRzKSB7XG4gICAgICBpZiAoIShjb25zdHJhaW50cyAmJiBjb25zdHJhaW50cy52aWRlbykpIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IERPTUV4Y2VwdGlvbignZ2V0RGlzcGxheU1lZGlhIHdpdGhvdXQgdmlkZW8gJyArXG4gICAgICAgICAgICAnY29uc3RyYWludHMgaXMgdW5kZWZpbmVkJyk7XG4gICAgICAgIGVyci5uYW1lID0gJ05vdEZvdW5kRXJyb3InO1xuICAgICAgICAvLyBmcm9tIGh0dHBzOi8vaGV5Y2FtLmdpdGh1Yi5pby93ZWJpZGwvI2lkbC1ET01FeGNlcHRpb24tZXJyb3ItbmFtZXNcbiAgICAgICAgZXJyLmNvZGUgPSA4O1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb25zdHJhaW50cy52aWRlbyA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zdHJhaW50cy52aWRlbyA9IHttZWRpYVNvdXJjZTogcHJlZmVycmVkTWVkaWFTb3VyY2V9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3RyYWludHMudmlkZW8ubWVkaWFTb3VyY2UgPSBwcmVmZXJyZWRNZWRpYVNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpO1xuICAgIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js":
/*!********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shimGetUserMedia: function() { return /* binding */ shimGetUserMedia; }\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/utils.js\");\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n\n\n\nfunction shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    _utils__WEBPACK_IMPORTED_MODULE_0__.deprecated('navigator.getUserMedia',\n      'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZmlyZWZveC9nZXR1c2VybWVkaWEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBRXFCOztBQUUzQjtBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUksOENBQWdCO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZmlyZWZveC9nZXR1c2VybWVkaWEuanM/MmIzZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGltR2V0VXNlck1lZGlhKHdpbmRvdywgYnJvd3NlckRldGFpbHMpIHtcbiAgY29uc3QgbmF2aWdhdG9yID0gd2luZG93ICYmIHdpbmRvdy5uYXZpZ2F0b3I7XG4gIGNvbnN0IE1lZGlhU3RyZWFtVHJhY2sgPSB3aW5kb3cgJiYgd2luZG93Lk1lZGlhU3RyZWFtVHJhY2s7XG5cbiAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHtcbiAgICAvLyBSZXBsYWNlIEZpcmVmb3ggNDQrJ3MgZGVwcmVjYXRpb24gd2FybmluZyB3aXRoIHVucHJlZml4ZWQgdmVyc2lvbi5cbiAgICB1dGlscy5kZXByZWNhdGVkKCduYXZpZ2F0b3IuZ2V0VXNlck1lZGlhJyxcbiAgICAgICduYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYScpO1xuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKS50aGVuKG9uU3VjY2Vzcywgb25FcnJvcik7XG4gIH07XG5cbiAgaWYgKCEoYnJvd3NlckRldGFpbHMudmVyc2lvbiA+IDU1ICYmXG4gICAgICAnYXV0b0dhaW5Db250cm9sJyBpbiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFN1cHBvcnRlZENvbnN0cmFpbnRzKCkpKSB7XG4gICAgY29uc3QgcmVtYXAgPSBmdW5jdGlvbihvYmosIGEsIGIpIHtcbiAgICAgIGlmIChhIGluIG9iaiAmJiAhKGIgaW4gb2JqKSkge1xuICAgICAgICBvYmpbYl0gPSBvYmpbYV07XG4gICAgICAgIGRlbGV0ZSBvYmpbYV07XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IG5hdGl2ZUdldFVzZXJNZWRpYSA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhLlxuICAgICAgYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9IGZ1bmN0aW9uKGMpIHtcbiAgICAgIGlmICh0eXBlb2YgYyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGMuYXVkaW8gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGMpKTtcbiAgICAgICAgcmVtYXAoYy5hdWRpbywgJ2F1dG9HYWluQ29udHJvbCcsICdtb3pBdXRvR2FpbkNvbnRyb2wnKTtcbiAgICAgICAgcmVtYXAoYy5hdWRpbywgJ25vaXNlU3VwcHJlc3Npb24nLCAnbW96Tm9pc2VTdXBwcmVzc2lvbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZUdldFVzZXJNZWRpYShjKTtcbiAgICB9O1xuXG4gICAgaWYgKE1lZGlhU3RyZWFtVHJhY2sgJiYgTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUuZ2V0U2V0dGluZ3MpIHtcbiAgICAgIGNvbnN0IG5hdGl2ZUdldFNldHRpbmdzID0gTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUuZ2V0U2V0dGluZ3M7XG4gICAgICBNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZS5nZXRTZXR0aW5ncyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBvYmogPSBuYXRpdmVHZXRTZXR0aW5ncy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICByZW1hcChvYmosICdtb3pBdXRvR2FpbkNvbnRyb2wnLCAnYXV0b0dhaW5Db250cm9sJyk7XG4gICAgICAgIHJlbWFwKG9iaiwgJ21vek5vaXNlU3VwcHJlc3Npb24nLCAnbm9pc2VTdXBwcmVzc2lvbicpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoTWVkaWFTdHJlYW1UcmFjayAmJiBNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZS5hcHBseUNvbnN0cmFpbnRzKSB7XG4gICAgICBjb25zdCBuYXRpdmVBcHBseUNvbnN0cmFpbnRzID1cbiAgICAgICAgTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUuYXBwbHlDb25zdHJhaW50cztcbiAgICAgIE1lZGlhU3RyZWFtVHJhY2sucHJvdG90eXBlLmFwcGx5Q29uc3RyYWludHMgPSBmdW5jdGlvbihjKSB7XG4gICAgICAgIGlmICh0aGlzLmtpbmQgPT09ICdhdWRpbycgJiYgdHlwZW9mIGMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgYyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYykpO1xuICAgICAgICAgIHJlbWFwKGMsICdhdXRvR2FpbkNvbnRyb2wnLCAnbW96QXV0b0dhaW5Db250cm9sJyk7XG4gICAgICAgICAgcmVtYXAoYywgJ25vaXNlU3VwcHJlc3Npb24nLCAnbW96Tm9pc2VTdXBwcmVzc2lvbicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYXRpdmVBcHBseUNvbnN0cmFpbnRzLmFwcGx5KHRoaXMsIFtjXSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js":
/*!******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/safari/safari_shim.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shimAudioContext: function() { return /* binding */ shimAudioContext; },\n/* harmony export */   shimCallbacksAPI: function() { return /* binding */ shimCallbacksAPI; },\n/* harmony export */   shimConstraints: function() { return /* binding */ shimConstraints; },\n/* harmony export */   shimCreateOfferLegacy: function() { return /* binding */ shimCreateOfferLegacy; },\n/* harmony export */   shimGetUserMedia: function() { return /* binding */ shimGetUserMedia; },\n/* harmony export */   shimLocalStreamsAPI: function() { return /* binding */ shimLocalStreamsAPI; },\n/* harmony export */   shimRTCIceServerUrls: function() { return /* binding */ shimRTCIceServerUrls; },\n/* harmony export */   shimRemoteStreamsAPI: function() { return /* binding */ shimRemoteStreamsAPI; },\n/* harmony export */   shimTrackEventTransceiver: function() { return /* binding */ shimTrackEventTransceiver; }\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/webrtc-adapter/src/js/utils.js\");\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n\n\nfunction shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nfunction shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nfunction shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nfunction shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n        .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nfunction shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: _utils__WEBPACK_IMPORTED_MODULE_0__.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nfunction shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (server.urls === undefined && server.url) {\n            _utils__WEBPACK_IMPORTED_MODULE_0__.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nfunction shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nfunction shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio', {direction: 'recvonly'});\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video', {direction: 'recvonly'});\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nfunction shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/webrtc-adapter/src/js/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/utils.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compactObject: function() { return /* binding */ compactObject; },\n/* harmony export */   deprecated: function() { return /* binding */ deprecated; },\n/* harmony export */   detectBrowser: function() { return /* binding */ detectBrowser; },\n/* harmony export */   disableLog: function() { return /* binding */ disableLog; },\n/* harmony export */   disableWarnings: function() { return /* binding */ disableWarnings; },\n/* harmony export */   extractVersion: function() { return /* binding */ extractVersion; },\n/* harmony export */   filterStats: function() { return /* binding */ filterStats; },\n/* harmony export */   log: function() { return /* binding */ log; },\n/* harmony export */   walkStats: function() { return /* binding */ walkStats; },\n/* harmony export */   wrapPeerConnectionEvent: function() { return /* binding */ wrapPeerConnectionEvent; }\n/* harmony export */ });\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nfunction extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseFloat(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nfunction wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n          this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n          this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nfunction disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n    'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nfunction disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nfunction log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nfunction deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nfunction detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator ||\n      !window.navigator.userAgent) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = parseInt(extractVersion(navigator.userAgent,\n      /Firefox\\/(\\d+)\\./, 1));\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = parseInt(extractVersion(navigator.userAgent,\n      /Chrom(e|ium)\\/(\\d+)\\./, 2));\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = parseInt(extractVersion(navigator.userAgent,\n      /AppleWebKit\\/(\\d+)\\./, 1));\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n    // Only for internal usage.\n    result._safariVersion = extractVersion(navigator.userAgent,\n      /Version\\/(\\d+(\\.?\\d+))/, 1);\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nfunction compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nfunction walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nfunction filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/webrtc-adapter/src/js/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/zustand/esm/shallow.js":
/*!*********************************************!*\
  !*** ./node_modules/zustand/esm/shallow.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nfunction shallow(objA, objB) {\n  if (Object.is(objA, objB)) {\n    return true;\n  }\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n    return false;\n  }\n  const keysA = Object.keys(objA);\n  if (keysA.length !== Object.keys(objB).length) {\n    return false;\n  }\n  for (let i = 0; i < keysA.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !Object.is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (shallow);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy96dXN0YW5kL2VzbS9zaGFsbG93LmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0RBQWUsT0FBTyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy96dXN0YW5kL2VzbS9zaGFsbG93LmpzPzE1Y2MiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gc2hhbGxvdyhvYmpBLCBvYmpCKSB7XG4gIGlmIChPYmplY3QuaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gXCJvYmplY3RcIiB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IE9iamVjdC5rZXlzKG9iakIpLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFPYmplY3QuaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2hhbGxvdztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/zustand/esm/shallow.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/zustand/esm/vanilla.js":
/*!*********************************************!*\
  !*** ./node_modules/zustand/esm/vanilla.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nfunction create(createState) {\n  let state;\n  const listeners = new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (nextState !== state) {\n      const previousState = state;\n      state = replace ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {\n    let currentSlice = selector(state);\n    function listenerToAdd() {\n      const nextSlice = selector(state);\n      if (!equalityFn(currentSlice, nextSlice)) {\n        const previousSlice = currentSlice;\n        listener(currentSlice = nextSlice, previousSlice);\n      }\n    }\n    listeners.add(listenerToAdd);\n    return () => listeners.delete(listenerToAdd);\n  };\n  const subscribe = (listener, selector, equalityFn) => {\n    if (selector || equalityFn) {\n      return subscribeWithSelector(listener, selector, equalityFn);\n    }\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => listeners.clear();\n  const api = { setState, getState, subscribe, destroy };\n  state = createState(setState, getState, api);\n  return api;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (create);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy96dXN0YW5kL2VzbS92YW5pbGxhLmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBLCtEQUFlLE1BQU0sRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvenVzdGFuZC9lc20vdmFuaWxsYS5qcz9jOTlmIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGNyZWF0ZShjcmVhdGVTdGF0ZSkge1xuICBsZXQgc3RhdGU7XG4gIGNvbnN0IGxpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgY29uc3Qgc2V0U3RhdGUgPSAocGFydGlhbCwgcmVwbGFjZSkgPT4ge1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IHR5cGVvZiBwYXJ0aWFsID09PSBcImZ1bmN0aW9uXCIgPyBwYXJ0aWFsKHN0YXRlKSA6IHBhcnRpYWw7XG4gICAgaWYgKG5leHRTdGF0ZSAhPT0gc3RhdGUpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzU3RhdGUgPSBzdGF0ZTtcbiAgICAgIHN0YXRlID0gcmVwbGFjZSA/IG5leHRTdGF0ZSA6IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCBuZXh0U3RhdGUpO1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiBsaXN0ZW5lcihzdGF0ZSwgcHJldmlvdXNTdGF0ZSkpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZ2V0U3RhdGUgPSAoKSA9PiBzdGF0ZTtcbiAgY29uc3Qgc3Vic2NyaWJlV2l0aFNlbGVjdG9yID0gKGxpc3RlbmVyLCBzZWxlY3RvciA9IGdldFN0YXRlLCBlcXVhbGl0eUZuID0gT2JqZWN0LmlzKSA9PiB7XG4gICAgbGV0IGN1cnJlbnRTbGljZSA9IHNlbGVjdG9yKHN0YXRlKTtcbiAgICBmdW5jdGlvbiBsaXN0ZW5lclRvQWRkKCkge1xuICAgICAgY29uc3QgbmV4dFNsaWNlID0gc2VsZWN0b3Ioc3RhdGUpO1xuICAgICAgaWYgKCFlcXVhbGl0eUZuKGN1cnJlbnRTbGljZSwgbmV4dFNsaWNlKSkge1xuICAgICAgICBjb25zdCBwcmV2aW91c1NsaWNlID0gY3VycmVudFNsaWNlO1xuICAgICAgICBsaXN0ZW5lcihjdXJyZW50U2xpY2UgPSBuZXh0U2xpY2UsIHByZXZpb3VzU2xpY2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyVG9BZGQpO1xuICAgIHJldHVybiAoKSA9PiBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyVG9BZGQpO1xuICB9O1xuICBjb25zdCBzdWJzY3JpYmUgPSAobGlzdGVuZXIsIHNlbGVjdG9yLCBlcXVhbGl0eUZuKSA9PiB7XG4gICAgaWYgKHNlbGVjdG9yIHx8IGVxdWFsaXR5Rm4pIHtcbiAgICAgIHJldHVybiBzdWJzY3JpYmVXaXRoU2VsZWN0b3IobGlzdGVuZXIsIHNlbGVjdG9yLCBlcXVhbGl0eUZuKTtcbiAgICB9XG4gICAgbGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gICAgcmV0dXJuICgpID0+IGxpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICB9O1xuICBjb25zdCBkZXN0cm95ID0gKCkgPT4gbGlzdGVuZXJzLmNsZWFyKCk7XG4gIGNvbnN0IGFwaSA9IHsgc2V0U3RhdGUsIGdldFN0YXRlLCBzdWJzY3JpYmUsIGRlc3Ryb3kgfTtcbiAgc3RhdGUgPSBjcmVhdGVTdGF0ZShzZXRTdGF0ZSwgZ2V0U3RhdGUsIGFwaSk7XG4gIHJldHVybiBhcGk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/zustand/esm/vanilla.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./styles/globals.css":
/*!****************************!*\
  !*** ./styles/globals.css ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"ed908d235885\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3N0eWxlcy9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3R5bGVzL2dsb2JhbHMuY3NzPzYzOWEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJlZDkwOGQyMzU4ODVcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./styles/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/layout.tsx":
/*!************************!*\
  !*** ./app/layout.tsx ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ RootLayout; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _100mslive_react_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @100mslive/react-sdk */ \"(app-pages-browser)/./node_modules/@100mslive/react-sdk/dist/primitives/HmsRoomProvider.js\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../styles/globals.css */ \"(app-pages-browser)/./styles/globals.css\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\nfunction RootLayout(param) {\n    var children = param.children;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"html\", {\n        lang: \"en\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"head\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n                        charSet: \"UTF-8\"\n                    }, void 0, false, {\n                        fileName: \"/Users/aritra/Work/Freelance/3xBuilds/clubhouse-clone-react/app/layout.tsx\",\n                        lineNumber: 15,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n                        name: \"viewport\",\n                        content: \"width=device-width, initial-scale=1.0\"\n                    }, void 0, false, {\n                        fileName: \"/Users/aritra/Work/Freelance/3xBuilds/clubhouse-clone-react/app/layout.tsx\",\n                        lineNumber: 16,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n                        children: \"100ms Quickstart\"\n                    }, void 0, false, {\n                        fileName: \"/Users/aritra/Work/Freelance/3xBuilds/clubhouse-clone-react/app/layout.tsx\",\n                        lineNumber: 17,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/aritra/Work/Freelance/3xBuilds/clubhouse-clone-react/app/layout.tsx\",\n                lineNumber: 14,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"body\", {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_100mslive_react_sdk__WEBPACK_IMPORTED_MODULE_2__.HMSRoomProvider, {\n                    children: children\n                }, void 0, false, {\n                    fileName: \"/Users/aritra/Work/Freelance/3xBuilds/clubhouse-clone-react/app/layout.tsx\",\n                    lineNumber: 20,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/aritra/Work/Freelance/3xBuilds/clubhouse-clone-react/app/layout.tsx\",\n                lineNumber: 19,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/aritra/Work/Freelance/3xBuilds/clubhouse-clone-react/app/layout.tsx\",\n        lineNumber: 13,\n        columnNumber: 5\n    }, this);\n}\n_c = RootLayout;\nvar _c;\n$RefreshReg$(_c, \"RootLayout\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9sYXlvdXQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRXVEO0FBQ3hCO0FBT2hCLFNBQVNDLFdBQVcsS0FBNkI7UUFBN0IsaUJBQUVDO0lBQ25DLHFCQUNFLDhEQUFDQztRQUFLQyxNQUFLOzswQkFDVCw4REFBQ0M7O2tDQUNDLDhEQUFDQzt3QkFBS0MsU0FBUTs7Ozs7O2tDQUNkLDhEQUFDRDt3QkFBS0UsTUFBSzt3QkFBV0MsU0FBUTs7Ozs7O2tDQUM5Qiw4REFBQ0M7a0NBQU07Ozs7Ozs7Ozs7OzswQkFFVCw4REFBQ0M7MEJBQ0MsNEVBQUNYLGlFQUFlQTs4QkFDYkU7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS1g7S0Fmd0JEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9sYXlvdXQudHN4Pzk5ODgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCB7IEhNU1Jvb21Qcm92aWRlciB9IGZyb20gXCJAMTAwbXNsaXZlL3JlYWN0LXNka1wiO1xuaW1wb3J0IFwiLi4vc3R5bGVzL2dsb2JhbHMuY3NzXCI7XG5pbXBvcnQgeyBSZWFjdE5vZGUgfSBmcm9tIFwicmVhY3RcIjtcblxuaW50ZXJmYWNlIFJvb3RMYXlvdXRQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJvb3RMYXlvdXQoeyBjaGlsZHJlbiB9OiBSb290TGF5b3V0UHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8aHRtbCBsYW5nPVwiZW5cIj5cbiAgICAgIDxoZWFkPlxuICAgICAgICA8bWV0YSBjaGFyU2V0PVwiVVRGLThcIiAvPlxuICAgICAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFwiIC8+XG4gICAgICAgIDx0aXRsZT4xMDBtcyBRdWlja3N0YXJ0PC90aXRsZT5cbiAgICAgIDwvaGVhZD5cbiAgICAgIDxib2R5PlxuICAgICAgICA8SE1TUm9vbVByb3ZpZGVyPlxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9ITVNSb29tUHJvdmlkZXI+XG4gICAgICA8L2JvZHk+XG4gICAgPC9odG1sPlxuICApO1xufVxuIl0sIm5hbWVzIjpbIkhNU1Jvb21Qcm92aWRlciIsIlJvb3RMYXlvdXQiLCJjaGlsZHJlbiIsImh0bWwiLCJsYW5nIiwiaGVhZCIsIm1ldGEiLCJjaGFyU2V0IiwibmFtZSIsImNvbnRlbnQiLCJ0aXRsZSIsImJvZHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/layout.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nvar enableRenderableContext = false;\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || enableRenderableContext  || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n\n          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  var ref;\n\n  {\n    ref = _ref;\n  }\n\n  var element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // debugInfo contains Server Component debug information.\n\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\nvar didWarnAboutKeySpread = {};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, isStaticChildren, source, self) {\n  {\n    if (!isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    } else {\n      // This is a valid element type.\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      var children = config.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    } // Warn about key spread regardless of whether the type is valid.\n\n\n    if (hasOwnProperty.call(config, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(config).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref')) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    var element = ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    }\n\n    return element;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nvar ownerHasKeyUseWarning = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = getComponentNameFromType(parentType);\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  // TODO: Move this to render phase instead of at element creation.\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar jsxDEV = jsxDEV$1 ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/MTNhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/immer/dist/immer.esm.mjs":
/*!***********************************************!*\
  !*** ./node_modules/immer/dist/immer.esm.mjs ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Immer: function() { return /* binding */ un; },\n/* harmony export */   applyPatches: function() { return /* binding */ pn; },\n/* harmony export */   castDraft: function() { return /* binding */ K; },\n/* harmony export */   castImmutable: function() { return /* binding */ $; },\n/* harmony export */   createDraft: function() { return /* binding */ ln; },\n/* harmony export */   current: function() { return /* binding */ R; },\n/* harmony export */   enableAllPlugins: function() { return /* binding */ J; },\n/* harmony export */   enableES5: function() { return /* binding */ F; },\n/* harmony export */   enableMapSet: function() { return /* binding */ C; },\n/* harmony export */   enablePatches: function() { return /* binding */ T; },\n/* harmony export */   finishDraft: function() { return /* binding */ dn; },\n/* harmony export */   freeze: function() { return /* binding */ d; },\n/* harmony export */   immerable: function() { return /* binding */ L; },\n/* harmony export */   isDraft: function() { return /* binding */ r; },\n/* harmony export */   isDraftable: function() { return /* binding */ t; },\n/* harmony export */   nothing: function() { return /* binding */ H; },\n/* harmony export */   original: function() { return /* binding */ e; },\n/* harmony export */   produce: function() { return /* binding */ fn; },\n/* harmony export */   produceWithPatches: function() { return /* binding */ cn; },\n/* harmony export */   setAutoFreeze: function() { return /* binding */ sn; },\n/* harmony export */   setUseProxies: function() { return /* binding */ vn; }\n/* harmony export */ });\nfunction n(n){for(var r=arguments.length,t=Array(r>1?r-1:0),e=1;e<r;e++)t[e-1]=arguments[e];if(true){var i=Y[n],o=i?\"function\"==typeof i?i.apply(null,t):i:\"unknown error nr: \"+n;throw Error(\"[Immer] \"+o)}throw Error(\"[Immer] minified error nr: \"+n+(t.length?\" \"+t.map((function(n){return\"'\"+n+\"'\"})).join(\",\"):\"\")+\". Find the full error at: https://bit.ly/3cXEKWf\")}function r(n){return!!n&&!!n[Q]}function t(n){var r;return!!n&&(function(n){if(!n||\"object\"!=typeof n)return!1;var r=Object.getPrototypeOf(n);if(null===r)return!0;var t=Object.hasOwnProperty.call(r,\"constructor\")&&r.constructor;return t===Object||\"function\"==typeof t&&Function.toString.call(t)===Z}(n)||Array.isArray(n)||!!n[L]||!!(null===(r=n.constructor)||void 0===r?void 0:r[L])||s(n)||v(n))}function e(t){return r(t)||n(23,t),t[Q].t}function i(n,r,t){void 0===t&&(t=!1),0===o(n)?(t?Object.keys:nn)(n).forEach((function(e){t&&\"symbol\"==typeof e||r(e,n[e],n)})):n.forEach((function(t,e){return r(e,t,n)}))}function o(n){var r=n[Q];return r?r.i>3?r.i-4:r.i:Array.isArray(n)?1:s(n)?2:v(n)?3:0}function u(n,r){return 2===o(n)?n.has(r):Object.prototype.hasOwnProperty.call(n,r)}function a(n,r){return 2===o(n)?n.get(r):n[r]}function f(n,r,t){var e=o(n);2===e?n.set(r,t):3===e?n.add(t):n[r]=t}function c(n,r){return n===r?0!==n||1/n==1/r:n!=n&&r!=r}function s(n){return X&&n instanceof Map}function v(n){return q&&n instanceof Set}function p(n){return n.o||n.t}function l(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var r=rn(n);delete r[Q];for(var t=nn(r),e=0;e<t.length;e++){var i=t[e],o=r[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(r[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:n[i]})}return Object.create(Object.getPrototypeOf(n),r)}function d(n,e){return void 0===e&&(e=!1),y(n)||r(n)||!t(n)||(o(n)>1&&(n.set=n.add=n.clear=n.delete=h),Object.freeze(n),e&&i(n,(function(n,r){return d(r,!0)}),!0)),n}function h(){n(2)}function y(n){return null==n||\"object\"!=typeof n||Object.isFrozen(n)}function b(r){var t=tn[r];return t||n(18,r),t}function m(n,r){tn[n]||(tn[n]=r)}function _(){return false||U||n(0),U}function j(n,r){r&&(b(\"Patches\"),n.u=[],n.s=[],n.v=r)}function g(n){O(n),n.p.forEach(S),n.p=null}function O(n){n===U&&(U=n.l)}function w(n){return U={p:[],l:U,h:n,m:!0,_:0}}function S(n){var r=n[Q];0===r.i||1===r.i?r.j():r.g=!0}function P(r,e){e._=e.p.length;var i=e.p[0],o=void 0!==r&&r!==i;return e.h.O||b(\"ES5\").S(e,r,o),o?(i[Q].P&&(g(e),n(4)),t(r)&&(r=M(e,r),e.l||x(e,r)),e.u&&b(\"Patches\").M(i[Q].t,r,e.u,e.s)):r=M(e,i,[]),g(e),e.u&&e.v(e.u,e.s),r!==H?r:void 0}function M(n,r,t){if(y(r))return r;var e=r[Q];if(!e)return i(r,(function(i,o){return A(n,e,r,i,o,t)}),!0),r;if(e.A!==n)return r;if(!e.P)return x(n,e.t,!0),e.t;if(!e.I){e.I=!0,e.A._--;var o=4===e.i||5===e.i?e.o=l(e.k):e.o,u=o,a=!1;3===e.i&&(u=new Set(o),o.clear(),a=!0),i(u,(function(r,i){return A(n,e,o,r,i,t,a)})),x(n,o,!1),t&&n.u&&b(\"Patches\").N(e,t,n.u,n.s)}return e.o}function A(e,i,o,a,c,s,v){if( true&&c===o&&n(5),r(c)){var p=M(e,c,s&&i&&3!==i.i&&!u(i.R,a)?s.concat(a):void 0);if(f(o,a,p),!r(p))return;e.m=!1}else v&&o.add(c);if(t(c)&&!y(c)){if(!e.h.D&&e._<1)return;M(e,c),i&&i.A.l||x(e,c)}}function x(n,r,t){void 0===t&&(t=!1),!n.l&&n.h.D&&n.m&&d(r,t)}function z(n,r){var t=n[Q];return(t?p(t):n)[r]}function I(n,r){if(r in n)for(var t=Object.getPrototypeOf(n);t;){var e=Object.getOwnPropertyDescriptor(t,r);if(e)return e;t=Object.getPrototypeOf(t)}}function k(n){n.P||(n.P=!0,n.l&&k(n.l))}function E(n){n.o||(n.o=l(n.t))}function N(n,r,t){var e=s(r)?b(\"MapSet\").F(r,t):v(r)?b(\"MapSet\").T(r,t):n.O?function(n,r){var t=Array.isArray(n),e={i:t?1:0,A:r?r.A:_(),P:!1,I:!1,R:{},l:r,t:n,k:null,o:null,j:null,C:!1},i=e,o=en;t&&(i=[e],o=on);var u=Proxy.revocable(i,o),a=u.revoke,f=u.proxy;return e.k=f,e.j=a,f}(r,t):b(\"ES5\").J(r,t);return(t?t.A:_()).p.push(e),e}function R(e){return r(e)||n(22,e),function n(r){if(!t(r))return r;var e,u=r[Q],c=o(r);if(u){if(!u.P&&(u.i<4||!b(\"ES5\").K(u)))return u.t;u.I=!0,e=D(r,c),u.I=!1}else e=D(r,c);return i(e,(function(r,t){u&&a(u.t,r)===t||f(e,r,n(t))})),3===c?new Set(e):e}(e)}function D(n,r){switch(r){case 2:return new Map(n);case 3:return Array.from(n)}return l(n)}function F(){function t(n,r){var t=s[n];return t?t.enumerable=r:s[n]=t={configurable:!0,enumerable:r,get:function(){var r=this[Q];return true&&f(r),en.get(r,n)},set:function(r){var t=this[Q]; true&&f(t),en.set(t,n,r)}},t}function e(n){for(var r=n.length-1;r>=0;r--){var t=n[r][Q];if(!t.P)switch(t.i){case 5:a(t)&&k(t);break;case 4:o(t)&&k(t)}}}function o(n){for(var r=n.t,t=n.k,e=nn(t),i=e.length-1;i>=0;i--){var o=e[i];if(o!==Q){var a=r[o];if(void 0===a&&!u(r,o))return!0;var f=t[o],s=f&&f[Q];if(s?s.t!==a:!c(f,a))return!0}}var v=!!r[Q];return e.length!==nn(r).length+(v?0:1)}function a(n){var r=n.k;if(r.length!==n.t.length)return!0;var t=Object.getOwnPropertyDescriptor(r,r.length-1);if(t&&!t.get)return!0;for(var e=0;e<r.length;e++)if(!r.hasOwnProperty(e))return!0;return!1}function f(r){r.g&&n(3,JSON.stringify(p(r)))}var s={};m(\"ES5\",{J:function(n,r){var e=Array.isArray(n),i=function(n,r){if(n){for(var e=Array(r.length),i=0;i<r.length;i++)Object.defineProperty(e,\"\"+i,t(i,!0));return e}var o=rn(r);delete o[Q];for(var u=nn(o),a=0;a<u.length;a++){var f=u[a];o[f]=t(f,n||!!o[f].enumerable)}return Object.create(Object.getPrototypeOf(r),o)}(e,n),o={i:e?5:4,A:r?r.A:_(),P:!1,I:!1,R:{},l:r,t:n,k:i,o:null,g:!1,C:!1};return Object.defineProperty(i,Q,{value:o,writable:!0}),i},S:function(n,t,o){o?r(t)&&t[Q].A===n&&e(n.p):(n.u&&function n(r){if(r&&\"object\"==typeof r){var t=r[Q];if(t){var e=t.t,o=t.k,f=t.R,c=t.i;if(4===c)i(o,(function(r){r!==Q&&(void 0!==e[r]||u(e,r)?f[r]||n(o[r]):(f[r]=!0,k(t)))})),i(e,(function(n){void 0!==o[n]||u(o,n)||(f[n]=!1,k(t))}));else if(5===c){if(a(t)&&(k(t),f.length=!0),o.length<e.length)for(var s=o.length;s<e.length;s++)f[s]=!1;else for(var v=e.length;v<o.length;v++)f[v]=!0;for(var p=Math.min(o.length,e.length),l=0;l<p;l++)o.hasOwnProperty(l)||(f[l]=!0),void 0===f[l]&&n(o[l])}}}}(n.p[0]),e(n.p))},K:function(n){return 4===n.i?o(n):a(n)}})}function T(){function e(n){if(!t(n))return n;if(Array.isArray(n))return n.map(e);if(s(n))return new Map(Array.from(n.entries()).map((function(n){return[n[0],e(n[1])]})));if(v(n))return new Set(Array.from(n).map(e));var r=Object.create(Object.getPrototypeOf(n));for(var i in n)r[i]=e(n[i]);return u(n,L)&&(r[L]=n[L]),r}function f(n){return r(n)?e(n):n}var c=\"add\";m(\"Patches\",{$:function(r,t){return t.forEach((function(t){for(var i=t.path,u=t.op,f=r,s=0;s<i.length-1;s++){var v=o(f),p=i[s];\"string\"!=typeof p&&\"number\"!=typeof p&&(p=\"\"+p),0!==v&&1!==v||\"__proto__\"!==p&&\"constructor\"!==p||n(24),\"function\"==typeof f&&\"prototype\"===p&&n(24),\"object\"!=typeof(f=a(f,p))&&n(15,i.join(\"/\"))}var l=o(f),d=e(t.value),h=i[i.length-1];switch(u){case\"replace\":switch(l){case 2:return f.set(h,d);case 3:n(16);default:return f[h]=d}case c:switch(l){case 1:return\"-\"===h?f.push(d):f.splice(h,0,d);case 2:return f.set(h,d);case 3:return f.add(d);default:return f[h]=d}case\"remove\":switch(l){case 1:return f.splice(h,1);case 2:return f.delete(h);case 3:return f.delete(t.value);default:return delete f[h]}default:n(17,u)}})),r},N:function(n,r,t,e){switch(n.i){case 0:case 4:case 2:return function(n,r,t,e){var o=n.t,s=n.o;i(n.R,(function(n,i){var v=a(o,n),p=a(s,n),l=i?u(o,n)?\"replace\":c:\"remove\";if(v!==p||\"replace\"!==l){var d=r.concat(n);t.push(\"remove\"===l?{op:l,path:d}:{op:l,path:d,value:p}),e.push(l===c?{op:\"remove\",path:d}:\"remove\"===l?{op:c,path:d,value:f(v)}:{op:\"replace\",path:d,value:f(v)})}}))}(n,r,t,e);case 5:case 1:return function(n,r,t,e){var i=n.t,o=n.R,u=n.o;if(u.length<i.length){var a=[u,i];i=a[0],u=a[1];var s=[e,t];t=s[0],e=s[1]}for(var v=0;v<i.length;v++)if(o[v]&&u[v]!==i[v]){var p=r.concat([v]);t.push({op:\"replace\",path:p,value:f(u[v])}),e.push({op:\"replace\",path:p,value:f(i[v])})}for(var l=i.length;l<u.length;l++){var d=r.concat([l]);t.push({op:c,path:d,value:f(u[l])})}i.length<u.length&&e.push({op:\"replace\",path:r.concat([\"length\"]),value:i.length})}(n,r,t,e);case 3:return function(n,r,t,e){var i=n.t,o=n.o,u=0;i.forEach((function(n){if(!o.has(n)){var i=r.concat([u]);t.push({op:\"remove\",path:i,value:n}),e.unshift({op:c,path:i,value:n})}u++})),u=0,o.forEach((function(n){if(!i.has(n)){var o=r.concat([u]);t.push({op:c,path:o,value:n}),e.unshift({op:\"remove\",path:o,value:n})}u++}))}(n,r,t,e)}},M:function(n,r,t,e){t.push({op:\"replace\",path:[],value:r===H?void 0:r}),e.push({op:\"replace\",path:[],value:n})}})}function C(){function r(n,r){function t(){this.constructor=n}a(n,r),n.prototype=(t.prototype=r.prototype,new t)}function e(n){n.o||(n.R=new Map,n.o=new Map(n.t))}function o(n){n.o||(n.o=new Set,n.t.forEach((function(r){if(t(r)){var e=N(n.A.h,r,n);n.p.set(r,e),n.o.add(e)}else n.o.add(r)})))}function u(r){r.g&&n(3,JSON.stringify(p(r)))}var a=function(n,r){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var t in r)r.hasOwnProperty(t)&&(n[t]=r[t])})(n,r)},f=function(){function n(n,r){return this[Q]={i:2,l:r,A:r?r.A:_(),P:!1,I:!1,o:void 0,R:void 0,t:n,k:this,C:!1,g:!1},this}r(n,Map);var o=n.prototype;return Object.defineProperty(o,\"size\",{get:function(){return p(this[Q]).size}}),o.has=function(n){return p(this[Q]).has(n)},o.set=function(n,r){var t=this[Q];return u(t),p(t).has(n)&&p(t).get(n)===r||(e(t),k(t),t.R.set(n,!0),t.o.set(n,r),t.R.set(n,!0)),this},o.delete=function(n){if(!this.has(n))return!1;var r=this[Q];return u(r),e(r),k(r),r.t.has(n)?r.R.set(n,!1):r.R.delete(n),r.o.delete(n),!0},o.clear=function(){var n=this[Q];u(n),p(n).size&&(e(n),k(n),n.R=new Map,i(n.t,(function(r){n.R.set(r,!1)})),n.o.clear())},o.forEach=function(n,r){var t=this;p(this[Q]).forEach((function(e,i){n.call(r,t.get(i),i,t)}))},o.get=function(n){var r=this[Q];u(r);var i=p(r).get(n);if(r.I||!t(i))return i;if(i!==r.t.get(n))return i;var o=N(r.A.h,i,r);return e(r),r.o.set(n,o),o},o.keys=function(){return p(this[Q]).keys()},o.values=function(){var n,r=this,t=this.keys();return(n={})[V]=function(){return r.values()},n.next=function(){var n=t.next();return n.done?n:{done:!1,value:r.get(n.value)}},n},o.entries=function(){var n,r=this,t=this.keys();return(n={})[V]=function(){return r.entries()},n.next=function(){var n=t.next();if(n.done)return n;var e=r.get(n.value);return{done:!1,value:[n.value,e]}},n},o[V]=function(){return this.entries()},n}(),c=function(){function n(n,r){return this[Q]={i:3,l:r,A:r?r.A:_(),P:!1,I:!1,o:void 0,t:n,k:this,p:new Map,g:!1,C:!1},this}r(n,Set);var t=n.prototype;return Object.defineProperty(t,\"size\",{get:function(){return p(this[Q]).size}}),t.has=function(n){var r=this[Q];return u(r),r.o?!!r.o.has(n)||!(!r.p.has(n)||!r.o.has(r.p.get(n))):r.t.has(n)},t.add=function(n){var r=this[Q];return u(r),this.has(n)||(o(r),k(r),r.o.add(n)),this},t.delete=function(n){if(!this.has(n))return!1;var r=this[Q];return u(r),o(r),k(r),r.o.delete(n)||!!r.p.has(n)&&r.o.delete(r.p.get(n))},t.clear=function(){var n=this[Q];u(n),p(n).size&&(o(n),k(n),n.o.clear())},t.values=function(){var n=this[Q];return u(n),o(n),n.o.values()},t.entries=function(){var n=this[Q];return u(n),o(n),n.o.entries()},t.keys=function(){return this.values()},t[V]=function(){return this.values()},t.forEach=function(n,r){for(var t=this.values(),e=t.next();!e.done;)n.call(r,e.value,e.value,this),e=t.next()},n}();m(\"MapSet\",{F:function(n,r){return new f(n,r)},T:function(n,r){return new c(n,r)}})}function J(){F(),C(),T()}function K(n){return n}function $(n){return n}var G,U,W=\"undefined\"!=typeof Symbol&&\"symbol\"==typeof Symbol(\"x\"),X=\"undefined\"!=typeof Map,q=\"undefined\"!=typeof Set,B=\"undefined\"!=typeof Proxy&&void 0!==Proxy.revocable&&\"undefined\"!=typeof Reflect,H=W?Symbol.for(\"immer-nothing\"):((G={})[\"immer-nothing\"]=!0,G),L=W?Symbol.for(\"immer-draftable\"):\"__$immer_draftable\",Q=W?Symbol.for(\"immer-state\"):\"__$immer_state\",V=\"undefined\"!=typeof Symbol&&Symbol.iterator||\"@@iterator\",Y={0:\"Illegal state\",1:\"Immer drafts cannot have computed properties\",2:\"This object has been frozen and should not be mutated\",3:function(n){return\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \"+n},4:\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",5:\"Immer forbids circular references\",6:\"The first or second argument to `produce` must be a function\",7:\"The third argument to `produce` must be a function or undefined\",8:\"First argument to `createDraft` must be a plain object, an array, or an immerable object\",9:\"First argument to `finishDraft` must be a draft returned by `createDraft`\",10:\"The given draft is already finalized\",11:\"Object.defineProperty() cannot be used on an Immer draft\",12:\"Object.setPrototypeOf() cannot be used on an Immer draft\",13:\"Immer only supports deleting array indices\",14:\"Immer only supports setting array indices and the 'length' property\",15:function(n){return\"Cannot apply patch, path doesn't resolve: \"+n},16:'Sets cannot have \"replace\" patches.',17:function(n){return\"Unsupported patch operation: \"+n},18:function(n){return\"The plugin for '\"+n+\"' has not been loaded into Immer. To enable the plugin, import and call `enable\"+n+\"()` when initializing your application.\"},20:\"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",21:function(n){return\"produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '\"+n+\"'\"},22:function(n){return\"'current' expects a draft, got: \"+n},23:function(n){return\"'original' expects a draft, got: \"+n},24:\"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"},Z=\"\"+Object.prototype.constructor,nn=\"undefined\"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,rn=Object.getOwnPropertyDescriptors||function(n){var r={};return nn(n).forEach((function(t){r[t]=Object.getOwnPropertyDescriptor(n,t)})),r},tn={},en={get:function(n,r){if(r===Q)return n;var e=p(n);if(!u(e,r))return function(n,r,t){var e,i=I(r,t);return i?\"value\"in i?i.value:null===(e=i.get)||void 0===e?void 0:e.call(n.k):void 0}(n,e,r);var i=e[r];return n.I||!t(i)?i:i===z(n.t,r)?(E(n),n.o[r]=N(n.A.h,i,n)):i},has:function(n,r){return r in p(n)},ownKeys:function(n){return Reflect.ownKeys(p(n))},set:function(n,r,t){var e=I(p(n),r);if(null==e?void 0:e.set)return e.set.call(n.k,t),!0;if(!n.P){var i=z(p(n),r),o=null==i?void 0:i[Q];if(o&&o.t===t)return n.o[r]=t,n.R[r]=!1,!0;if(c(t,i)&&(void 0!==t||u(n.t,r)))return!0;E(n),k(n)}return n.o[r]===t&&(void 0!==t||r in n.o)||Number.isNaN(t)&&Number.isNaN(n.o[r])||(n.o[r]=t,n.R[r]=!0),!0},deleteProperty:function(n,r){return void 0!==z(n.t,r)||r in n.t?(n.R[r]=!1,E(n),k(n)):delete n.R[r],n.o&&delete n.o[r],!0},getOwnPropertyDescriptor:function(n,r){var t=p(n),e=Reflect.getOwnPropertyDescriptor(t,r);return e?{writable:!0,configurable:1!==n.i||\"length\"!==r,enumerable:e.enumerable,value:t[r]}:e},defineProperty:function(){n(11)},getPrototypeOf:function(n){return Object.getPrototypeOf(n.t)},setPrototypeOf:function(){n(12)}},on={};i(en,(function(n,r){on[n]=function(){return arguments[0]=arguments[0][0],r.apply(this,arguments)}})),on.deleteProperty=function(r,t){return true&&isNaN(parseInt(t))&&n(13),on.set.call(this,r,t,void 0)},on.set=function(r,t,e){return true&&\"length\"!==t&&isNaN(parseInt(t))&&n(14),en.set.call(this,r[0],t,e,r[0])};var un=function(){function e(r){var e=this;this.O=B,this.D=!0,this.produce=function(r,i,o){if(\"function\"==typeof r&&\"function\"!=typeof i){var u=i;i=r;var a=e;return function(n){var r=this;void 0===n&&(n=u);for(var t=arguments.length,e=Array(t>1?t-1:0),o=1;o<t;o++)e[o-1]=arguments[o];return a.produce(n,(function(n){var t;return(t=i).call.apply(t,[r,n].concat(e))}))}}var f;if(\"function\"!=typeof i&&n(6),void 0!==o&&\"function\"!=typeof o&&n(7),t(r)){var c=w(e),s=N(e,r,void 0),v=!0;try{f=i(s),v=!1}finally{v?g(c):O(c)}return\"undefined\"!=typeof Promise&&f instanceof Promise?f.then((function(n){return j(c,o),P(n,c)}),(function(n){throw g(c),n})):(j(c,o),P(f,c))}if(!r||\"object\"!=typeof r){if(void 0===(f=i(r))&&(f=r),f===H&&(f=void 0),e.D&&d(f,!0),o){var p=[],l=[];b(\"Patches\").M(r,f,p,l),o(p,l)}return f}n(21,r)},this.produceWithPatches=function(n,r){if(\"function\"==typeof n)return function(r){for(var t=arguments.length,i=Array(t>1?t-1:0),o=1;o<t;o++)i[o-1]=arguments[o];return e.produceWithPatches(r,(function(r){return n.apply(void 0,[r].concat(i))}))};var t,i,o=e.produce(n,r,(function(n,r){t=n,i=r}));return\"undefined\"!=typeof Promise&&o instanceof Promise?o.then((function(n){return[n,t,i]})):[o,t,i]},\"boolean\"==typeof(null==r?void 0:r.useProxies)&&this.setUseProxies(r.useProxies),\"boolean\"==typeof(null==r?void 0:r.autoFreeze)&&this.setAutoFreeze(r.autoFreeze)}var i=e.prototype;return i.createDraft=function(e){t(e)||n(8),r(e)&&(e=R(e));var i=w(this),o=N(this,e,void 0);return o[Q].C=!0,O(i),o},i.finishDraft=function(r,t){var e=r&&r[Q]; true&&(e&&e.C||n(9),e.I&&n(10));var i=e.A;return j(i,t),P(void 0,i)},i.setAutoFreeze=function(n){this.D=n},i.setUseProxies=function(r){r&&!B&&n(20),this.O=r},i.applyPatches=function(n,t){var e;for(e=t.length-1;e>=0;e--){var i=t[e];if(0===i.path.length&&\"replace\"===i.op){n=i.value;break}}e>-1&&(t=t.slice(e+1));var o=b(\"Patches\").$;return r(n)?o(n,t):this.produce(n,(function(n){return o(n,t)}))},e}(),an=new un,fn=an.produce,cn=an.produceWithPatches.bind(an),sn=an.setAutoFreeze.bind(an),vn=an.setUseProxies.bind(an),pn=an.applyPatches.bind(an),ln=an.createDraft.bind(an),dn=an.finishDraft.bind(an);/* harmony default export */ __webpack_exports__[\"default\"] = (fn);\n//# sourceMappingURL=immer.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9pbW1lci9kaXN0L2ltbWVyLmVzbS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsY0FBYyxrREFBa0QsSUFBSSx3QkFBd0IsR0FBRyxJQUFtQyxFQUFFLDZFQUE2RSwwQkFBMEIsNkVBQTZFLGdCQUFnQixxRUFBcUUsY0FBYyxrQkFBa0IsY0FBYyxNQUFNLHdCQUF3QixtQ0FBbUMsK0JBQStCLHFCQUFxQixpRUFBaUUsdUVBQXVFLGlHQUFpRyxjQUFjLDRCQUE0QixrQkFBa0IsdUVBQXVFLG1DQUFtQyw0QkFBNEIsZ0JBQWdCLEdBQUcsY0FBYyxXQUFXLDREQUE0RCxnQkFBZ0IsbUVBQW1FLGdCQUFnQiw4QkFBOEIsa0JBQWtCLFdBQVcsdUNBQXVDLGdCQUFnQix3Q0FBd0MsY0FBYywyQkFBMkIsY0FBYywyQkFBMkIsY0FBYyxnQkFBZ0IsY0FBYyx5REFBeUQsWUFBWSxZQUFZLG9CQUFvQixXQUFXLEtBQUssa0JBQWtCLDBFQUEwRSwrREFBK0QsRUFBRSxpREFBaUQsZ0JBQWdCLDhIQUE4SCxlQUFlLFNBQVMsYUFBYSxLQUFLLGNBQWMsdURBQXVELGNBQWMsWUFBWSxvQkFBb0IsZ0JBQWdCLGlCQUFpQixhQUFhLE1BQU0sTUFBbUMsWUFBWSxnQkFBZ0Isc0NBQXNDLGNBQWMsNkJBQTZCLGNBQWMsZUFBZSxjQUFjLFVBQVUsdUJBQXVCLGNBQWMsV0FBVyw4QkFBOEIsZ0JBQWdCLGVBQWUsaUNBQWlDLDZLQUE2SyxrQkFBa0IsaUJBQWlCLFdBQVcsZ0NBQWdDLHNCQUFzQixRQUFRLG9CQUFvQiwrQkFBK0IsU0FBUyxlQUFlLCtDQUErQywwREFBMEQsd0JBQXdCLGlEQUFpRCxXQUFXLDBCQUEwQixHQUFHLEtBQW1DLG9CQUFvQix5REFBeUQseUJBQXlCLE9BQU8saUJBQWlCLGdCQUFnQix3QkFBd0IseUJBQXlCLGtCQUFrQiw0Q0FBNEMsZ0JBQWdCLFdBQVcsb0JBQW9CLGdCQUFnQiw2Q0FBNkMsRUFBRSxFQUFFLDJDQUEyQyxjQUFjLDRCQUE0QixjQUFjLDBCQUEwQixjQUFjLGtCQUFrQixrQkFBa0Isd0VBQXdFLDBCQUEwQixrQ0FBa0MsbUNBQW1DLFVBQVUsZ0JBQWdCLGdEQUFnRCxxQkFBcUIsc0JBQXNCLDhCQUE4QixjQUFjLG1DQUFtQyxrQkFBa0Isb0JBQW9CLE1BQU0sNENBQTRDLHVCQUF1QixjQUFjLDBCQUEwQiw2QkFBNkIsc0JBQXNCLElBQUksZ0JBQWdCLFVBQVUseUJBQXlCLDRCQUE0QixZQUFZLGFBQWEsZ0JBQWdCLFdBQVcsZ0NBQWdDLDRDQUE0QyxjQUFjLE1BQU0sS0FBbUMsbUJBQW1CLGlCQUFpQixjQUFjLEtBQW1DLHNCQUFzQixHQUFHLGNBQWMscUJBQXFCLEtBQUssS0FBSyxjQUFjLG9CQUFvQixrQkFBa0IsTUFBTSxvQkFBb0IsY0FBYyx5Q0FBeUMsS0FBSyxLQUFLLFdBQVcsVUFBVSxXQUFXLGdDQUFnQyxxQkFBcUIsK0JBQStCLGFBQWEsdUNBQXVDLGNBQWMsVUFBVSxrQ0FBa0Msb0RBQW9ELHNCQUFzQixZQUFZLFdBQVcscUNBQXFDLFNBQVMsY0FBYywrQkFBK0IsU0FBUyxTQUFTLGdCQUFnQix1Q0FBdUMsTUFBTSw4QkFBOEIsV0FBVywwQ0FBMEMsU0FBUyxZQUFZLFlBQVksb0JBQW9CLFdBQVcsS0FBSyxXQUFXLCtCQUErQixpREFBaUQsU0FBUyxrQ0FBa0MsK0JBQStCLGtDQUFrQyxvQkFBb0IsSUFBSSxtQkFBbUIsK0NBQStDLDBCQUEwQixXQUFXLE1BQU0sNEJBQTRCLDBCQUEwQiw0REFBNEQsb0JBQW9CLHNDQUFzQyxHQUFHLGVBQWUsaUVBQWlFLFdBQVcsWUFBWSx3QkFBd0IsV0FBVyxZQUFZLDBDQUEwQyxJQUFJLDZEQUE2RCxpQkFBaUIsZUFBZSwwQkFBMEIsRUFBRSxhQUFhLGNBQWMsa0JBQWtCLG9DQUFvQyxnRUFBZ0UscUJBQXFCLElBQUksNkNBQTZDLDhDQUE4Qyw0QkFBNEIsNkJBQTZCLGNBQWMsbUJBQW1CLFlBQVksYUFBYSxnQkFBZ0IsOEJBQThCLGdDQUFnQyxhQUFhLEtBQUssa0JBQWtCLG9NQUFvTSx3Q0FBd0MsVUFBVSx3QkFBd0IseUJBQXlCLGFBQWEsc0JBQXNCLGlCQUFpQiwrQ0FBK0MseUJBQXlCLHVCQUF1QixzQkFBc0IsdUJBQXVCLDRCQUE0QiwwQkFBMEIsZ0NBQWdDLDJCQUEyQixpQkFBaUIsS0FBSyxxQkFBcUIsWUFBWSw4Q0FBOEMsZ0JBQWdCLHFCQUFxQixzREFBc0QseUJBQXlCLGtCQUFrQixxQkFBcUIsWUFBWSxFQUFFLG9CQUFvQixnQkFBZ0IsbUJBQW1CLGVBQWUsdUJBQXVCLEVBQUUsK0JBQStCLEdBQUcsR0FBRyxVQUFVLHVDQUF1QyxzQkFBc0Isc0JBQXNCLFlBQVksY0FBYyxZQUFZLGNBQWMsWUFBWSxXQUFXLDBCQUEwQixvQkFBb0IsUUFBUSxrQ0FBa0MsVUFBVSxrQ0FBa0MsRUFBRSxtQkFBbUIsV0FBVyxLQUFLLG9CQUFvQixRQUFRLDBCQUEwQixFQUFFLDJCQUEyQixzREFBc0QsRUFBRSxVQUFVLGdDQUFnQyxvQkFBb0IsdUJBQXVCLGNBQWMsb0JBQW9CLFFBQVEsMkJBQTJCLGFBQWEsb0JBQW9CLEVBQUUsSUFBSSw4QkFBOEIsY0FBYyxvQkFBb0IsUUFBUSxvQkFBb0IsYUFBYSwyQkFBMkIsRUFBRSxJQUFJLEdBQUcsV0FBVyxxQkFBcUIsUUFBUSwwQ0FBMEMsVUFBVSw2QkFBNkIsR0FBRyxFQUFFLGFBQWEsZ0JBQWdCLGFBQWEsbUJBQW1CLG1EQUFtRCxjQUFjLG9DQUFvQyxjQUFjLDJDQUEyQyxTQUFTLG1CQUFtQix3QkFBd0IsZ0JBQWdCLElBQUksY0FBYywrQkFBK0Isb0JBQW9CLGlDQUFpQyxhQUFhLGdDQUFnQyxjQUFjLGdCQUFnQixnREFBZ0QsT0FBTyxjQUFjLGdCQUFnQixnQkFBZ0IscUVBQXFFLE1BQU0sU0FBUyxrQkFBa0IsdUNBQXVDLGVBQWUsd0JBQXdCLG9CQUFvQix5QkFBeUIscUJBQXFCLGNBQWMsb0dBQW9HLHNCQUFzQix5QkFBeUIsY0FBYyw4RUFBOEUsb0JBQW9CLGNBQWMsMERBQTBELGNBQWMsZ0JBQWdCLHlCQUF5QixXQUFXLGtDQUFrQyx1QkFBdUIsR0FBRyxtQkFBbUIsY0FBYyxLQUFLLGtCQUFrQix1QkFBdUIsMkJBQTJCLG1CQUFtQiwyQkFBMkIsbUJBQW1CLHlCQUF5QixxQkFBcUIsMkJBQTJCLFdBQVcsZ0JBQWdCLGtCQUFrQixtQkFBbUIsZUFBZSxpQkFBaUIsOEJBQThCLEdBQUcsc0JBQXNCLDJCQUEyQixXQUFXLGdCQUFnQixtQkFBbUIsbUJBQW1CLGVBQWUsbUJBQW1CLHFCQUFxQixPQUFPLDJCQUEyQixHQUFHLGlCQUFpQixzQkFBc0IsR0FBRyxnQkFBZ0IsZ0JBQWdCLGdCQUFnQixzRUFBc0UsTUFBTSxTQUFTLGtCQUFrQix1Q0FBdUMsZUFBZSx3QkFBd0Isb0JBQW9CLGNBQWMsOEVBQThFLG1CQUFtQixjQUFjLHFEQUFxRCxzQkFBc0IseUJBQXlCLGNBQWMsMEVBQTBFLG9CQUFvQixjQUFjLHdDQUF3QyxxQkFBcUIsY0FBYyw4QkFBOEIsc0JBQXNCLGNBQWMsK0JBQStCLG1CQUFtQixxQkFBcUIsaUJBQWlCLHFCQUFxQix5QkFBeUIsbUNBQW1DLFFBQVEsMkNBQTJDLEdBQUcsR0FBRyxZQUFZLGdCQUFnQixrQkFBa0IsaUJBQWlCLG1CQUFtQixFQUFFLGFBQWEsWUFBWSxjQUFjLFNBQVMsY0FBYyxTQUFTLGdQQUFnUCw4TEFBOEwsMklBQTJJLCtIQUErSCwydkJBQTJ2QixxREFBcUQseURBQXlELHdDQUF3QyxnQkFBZ0IseUpBQXlKLCtGQUErRixrS0FBa0ssZ0JBQWdCLDJDQUEyQyxnQkFBZ0IsNENBQTRDLDRGQUE0RixxSkFBcUosNkVBQTZFLDZFQUE2RSxTQUFTLGtDQUFrQywwQ0FBMEMsS0FBSyxNQUFNLEtBQUssa0JBQWtCLGtCQUFrQixXQUFXLGtDQUFrQyxlQUFlLG9GQUFvRixRQUFRLFdBQVcsOERBQThELG1CQUFtQixpQkFBaUIscUJBQXFCLDZCQUE2QixxQkFBcUIsZ0JBQWdCLG9EQUFvRCxTQUFTLHNDQUFzQywyQ0FBMkMsMkNBQTJDLFVBQVUsMEdBQTBHLDhCQUE4Qiw2RkFBNkYsd0NBQXdDLG1EQUFtRCxVQUFVLGtGQUFrRixHQUFHLDJCQUEyQixNQUFNLDRCQUE0QixrQ0FBa0MsMkJBQTJCLE9BQU8sT0FBTyxvQkFBb0IsaUJBQWlCLDZEQUE2RCxtQ0FBbUMsTUFBTSxLQUFtQyx5REFBeUQsd0JBQXdCLE1BQU0sS0FBbUMsMkVBQTJFLGtCQUFrQixjQUFjLFdBQVcsZ0RBQWdELCtDQUErQyxRQUFRLElBQUksUUFBUSxtQkFBbUIsV0FBVyxrQkFBa0Isa0RBQWtELElBQUksd0JBQXdCLGdDQUFnQyxNQUFNLDBDQUEwQyxJQUFJLE1BQU0sMkVBQTJFLGdDQUFnQyxJQUFJLFlBQVksUUFBUSxZQUFZLDRFQUE0RSxxQkFBcUIsZUFBZSxhQUFhLG1CQUFtQiwyQkFBMkIsOERBQThELGNBQWMsK0JBQStCLFNBQVMsUUFBUSx1Q0FBdUMsMkNBQTJDLGtEQUFrRCxJQUFJLHdCQUF3QiwyQ0FBMkMscUNBQXFDLElBQUksdUNBQXVDLFFBQVEsR0FBRyw0RUFBNEUsY0FBYyxXQUFXLG1LQUFtSyxrQkFBa0IsaUNBQWlDLDBCQUEwQixpQ0FBaUMsd0JBQXdCLDZCQUE2QixjQUFjLEtBQW1DLDRCQUE0QixVQUFVLDBCQUEwQiw2QkFBNkIsU0FBUyw2QkFBNkIsc0JBQXNCLDhCQUE4QixNQUFNLGlCQUFpQixLQUFLLEtBQUssV0FBVyx3Q0FBd0MsVUFBVSxPQUFPLHVCQUF1QixxQkFBcUIsK0NBQStDLGNBQWMsR0FBRyxHQUFHLHlNQUF5TSwrREFBZSxFQUFFLEVBQXdXO0FBQ2o5akIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2ltbWVyL2Rpc3QvaW1tZXIuZXNtLm1qcz83MmM1Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG4obil7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsdD1BcnJheShyPjE/ci0xOjApLGU9MTtlPHI7ZSsrKXRbZS0xXT1hcmd1bWVudHNbZV07aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGk9WVtuXSxvPWk/XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KG51bGwsdCk6aTpcInVua25vd24gZXJyb3IgbnI6IFwiK247dGhyb3cgRXJyb3IoXCJbSW1tZXJdIFwiK28pfXRocm93IEVycm9yKFwiW0ltbWVyXSBtaW5pZmllZCBlcnJvciBucjogXCIrbisodC5sZW5ndGg/XCIgXCIrdC5tYXAoKGZ1bmN0aW9uKG4pe3JldHVyblwiJ1wiK24rXCInXCJ9KSkuam9pbihcIixcIik6XCJcIikrXCIuIEZpbmQgdGhlIGZ1bGwgZXJyb3IgYXQ6IGh0dHBzOi8vYml0Lmx5LzNjWEVLV2ZcIil9ZnVuY3Rpb24gcihuKXtyZXR1cm4hIW4mJiEhbltRXX1mdW5jdGlvbiB0KG4pe3ZhciByO3JldHVybiEhbiYmKGZ1bmN0aW9uKG4pe2lmKCFufHxcIm9iamVjdFwiIT10eXBlb2YgbilyZXR1cm4hMTt2YXIgcj1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7aWYobnVsbD09PXIpcmV0dXJuITA7dmFyIHQ9T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocixcImNvbnN0cnVjdG9yXCIpJiZyLmNvbnN0cnVjdG9yO3JldHVybiB0PT09T2JqZWN0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZGdW5jdGlvbi50b1N0cmluZy5jYWxsKHQpPT09Wn0obil8fEFycmF5LmlzQXJyYXkobil8fCEhbltMXXx8ISEobnVsbD09PShyPW4uY29uc3RydWN0b3IpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyW0xdKXx8cyhuKXx8dihuKSl9ZnVuY3Rpb24gZSh0KXtyZXR1cm4gcih0KXx8bigyMyx0KSx0W1FdLnR9ZnVuY3Rpb24gaShuLHIsdCl7dm9pZCAwPT09dCYmKHQ9ITEpLDA9PT1vKG4pPyh0P09iamVjdC5rZXlzOm5uKShuKS5mb3JFYWNoKChmdW5jdGlvbihlKXt0JiZcInN5bWJvbFwiPT10eXBlb2YgZXx8cihlLG5bZV0sbil9KSk6bi5mb3JFYWNoKChmdW5jdGlvbih0LGUpe3JldHVybiByKGUsdCxuKX0pKX1mdW5jdGlvbiBvKG4pe3ZhciByPW5bUV07cmV0dXJuIHI/ci5pPjM/ci5pLTQ6ci5pOkFycmF5LmlzQXJyYXkobik/MTpzKG4pPzI6dihuKT8zOjB9ZnVuY3Rpb24gdShuLHIpe3JldHVybiAyPT09byhuKT9uLmhhcyhyKTpPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixyKX1mdW5jdGlvbiBhKG4scil7cmV0dXJuIDI9PT1vKG4pP24uZ2V0KHIpOm5bcl19ZnVuY3Rpb24gZihuLHIsdCl7dmFyIGU9byhuKTsyPT09ZT9uLnNldChyLHQpOjM9PT1lP24uYWRkKHQpOm5bcl09dH1mdW5jdGlvbiBjKG4scil7cmV0dXJuIG49PT1yPzAhPT1ufHwxL249PTEvcjpuIT1uJiZyIT1yfWZ1bmN0aW9uIHMobil7cmV0dXJuIFgmJm4gaW5zdGFuY2VvZiBNYXB9ZnVuY3Rpb24gdihuKXtyZXR1cm4gcSYmbiBpbnN0YW5jZW9mIFNldH1mdW5jdGlvbiBwKG4pe3JldHVybiBuLm98fG4udH1mdW5jdGlvbiBsKG4pe2lmKEFycmF5LmlzQXJyYXkobikpcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG4pO3ZhciByPXJuKG4pO2RlbGV0ZSByW1FdO2Zvcih2YXIgdD1ubihyKSxlPTA7ZTx0Lmxlbmd0aDtlKyspe3ZhciBpPXRbZV0sbz1yW2ldOyExPT09by53cml0YWJsZSYmKG8ud3JpdGFibGU9ITAsby5jb25maWd1cmFibGU9ITApLChvLmdldHx8by5zZXQpJiYocltpXT17Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLGVudW1lcmFibGU6by5lbnVtZXJhYmxlLHZhbHVlOm5baV19KX1yZXR1cm4gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yobikscil9ZnVuY3Rpb24gZChuLGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSkseShuKXx8cihuKXx8IXQobil8fChvKG4pPjEmJihuLnNldD1uLmFkZD1uLmNsZWFyPW4uZGVsZXRlPWgpLE9iamVjdC5mcmVlemUobiksZSYmaShuLChmdW5jdGlvbihuLHIpe3JldHVybiBkKHIsITApfSksITApKSxufWZ1bmN0aW9uIGgoKXtuKDIpfWZ1bmN0aW9uIHkobil7cmV0dXJuIG51bGw9PW58fFwib2JqZWN0XCIhPXR5cGVvZiBufHxPYmplY3QuaXNGcm96ZW4obil9ZnVuY3Rpb24gYihyKXt2YXIgdD10bltyXTtyZXR1cm4gdHx8bigxOCxyKSx0fWZ1bmN0aW9uIG0obixyKXt0bltuXXx8KHRuW25dPXIpfWZ1bmN0aW9uIF8oKXtyZXR1cm5cInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxVfHxuKDApLFV9ZnVuY3Rpb24gaihuLHIpe3ImJihiKFwiUGF0Y2hlc1wiKSxuLnU9W10sbi5zPVtdLG4udj1yKX1mdW5jdGlvbiBnKG4pe08obiksbi5wLmZvckVhY2goUyksbi5wPW51bGx9ZnVuY3Rpb24gTyhuKXtuPT09VSYmKFU9bi5sKX1mdW5jdGlvbiB3KG4pe3JldHVybiBVPXtwOltdLGw6VSxoOm4sbTohMCxfOjB9fWZ1bmN0aW9uIFMobil7dmFyIHI9bltRXTswPT09ci5pfHwxPT09ci5pP3IuaigpOnIuZz0hMH1mdW5jdGlvbiBQKHIsZSl7ZS5fPWUucC5sZW5ndGg7dmFyIGk9ZS5wWzBdLG89dm9pZCAwIT09ciYmciE9PWk7cmV0dXJuIGUuaC5PfHxiKFwiRVM1XCIpLlMoZSxyLG8pLG8/KGlbUV0uUCYmKGcoZSksbig0KSksdChyKSYmKHI9TShlLHIpLGUubHx8eChlLHIpKSxlLnUmJmIoXCJQYXRjaGVzXCIpLk0oaVtRXS50LHIsZS51LGUucykpOnI9TShlLGksW10pLGcoZSksZS51JiZlLnYoZS51LGUucyksciE9PUg/cjp2b2lkIDB9ZnVuY3Rpb24gTShuLHIsdCl7aWYoeShyKSlyZXR1cm4gcjt2YXIgZT1yW1FdO2lmKCFlKXJldHVybiBpKHIsKGZ1bmN0aW9uKGksbyl7cmV0dXJuIEEobixlLHIsaSxvLHQpfSksITApLHI7aWYoZS5BIT09bilyZXR1cm4gcjtpZighZS5QKXJldHVybiB4KG4sZS50LCEwKSxlLnQ7aWYoIWUuSSl7ZS5JPSEwLGUuQS5fLS07dmFyIG89ND09PWUuaXx8NT09PWUuaT9lLm89bChlLmspOmUubyx1PW8sYT0hMTszPT09ZS5pJiYodT1uZXcgU2V0KG8pLG8uY2xlYXIoKSxhPSEwKSxpKHUsKGZ1bmN0aW9uKHIsaSl7cmV0dXJuIEEobixlLG8scixpLHQsYSl9KSkseChuLG8sITEpLHQmJm4udSYmYihcIlBhdGNoZXNcIikuTihlLHQsbi51LG4ucyl9cmV0dXJuIGUub31mdW5jdGlvbiBBKGUsaSxvLGEsYyxzLHYpe2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmM9PT1vJiZuKDUpLHIoYykpe3ZhciBwPU0oZSxjLHMmJmkmJjMhPT1pLmkmJiF1KGkuUixhKT9zLmNvbmNhdChhKTp2b2lkIDApO2lmKGYobyxhLHApLCFyKHApKXJldHVybjtlLm09ITF9ZWxzZSB2JiZvLmFkZChjKTtpZih0KGMpJiYheShjKSl7aWYoIWUuaC5EJiZlLl88MSlyZXR1cm47TShlLGMpLGkmJmkuQS5sfHx4KGUsYyl9fWZ1bmN0aW9uIHgobixyLHQpe3ZvaWQgMD09PXQmJih0PSExKSwhbi5sJiZuLmguRCYmbi5tJiZkKHIsdCl9ZnVuY3Rpb24geihuLHIpe3ZhciB0PW5bUV07cmV0dXJuKHQ/cCh0KTpuKVtyXX1mdW5jdGlvbiBJKG4scil7aWYociBpbiBuKWZvcih2YXIgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7dDspe3ZhciBlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpZihlKXJldHVybiBlO3Q9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfX1mdW5jdGlvbiBrKG4pe24uUHx8KG4uUD0hMCxuLmwmJmsobi5sKSl9ZnVuY3Rpb24gRShuKXtuLm98fChuLm89bChuLnQpKX1mdW5jdGlvbiBOKG4scix0KXt2YXIgZT1zKHIpP2IoXCJNYXBTZXRcIikuRihyLHQpOnYocik/YihcIk1hcFNldFwiKS5UKHIsdCk6bi5PP2Z1bmN0aW9uKG4scil7dmFyIHQ9QXJyYXkuaXNBcnJheShuKSxlPXtpOnQ/MTowLEE6cj9yLkE6XygpLFA6ITEsSTohMSxSOnt9LGw6cix0Om4sazpudWxsLG86bnVsbCxqOm51bGwsQzohMX0saT1lLG89ZW47dCYmKGk9W2VdLG89b24pO3ZhciB1PVByb3h5LnJldm9jYWJsZShpLG8pLGE9dS5yZXZva2UsZj11LnByb3h5O3JldHVybiBlLms9ZixlLmo9YSxmfShyLHQpOmIoXCJFUzVcIikuSihyLHQpO3JldHVybih0P3QuQTpfKCkpLnAucHVzaChlKSxlfWZ1bmN0aW9uIFIoZSl7cmV0dXJuIHIoZSl8fG4oMjIsZSksZnVuY3Rpb24gbihyKXtpZighdChyKSlyZXR1cm4gcjt2YXIgZSx1PXJbUV0sYz1vKHIpO2lmKHUpe2lmKCF1LlAmJih1Lmk8NHx8IWIoXCJFUzVcIikuSyh1KSkpcmV0dXJuIHUudDt1Lkk9ITAsZT1EKHIsYyksdS5JPSExfWVsc2UgZT1EKHIsYyk7cmV0dXJuIGkoZSwoZnVuY3Rpb24ocix0KXt1JiZhKHUudCxyKT09PXR8fGYoZSxyLG4odCkpfSkpLDM9PT1jP25ldyBTZXQoZSk6ZX0oZSl9ZnVuY3Rpb24gRChuLHIpe3N3aXRjaChyKXtjYXNlIDI6cmV0dXJuIG5ldyBNYXAobik7Y2FzZSAzOnJldHVybiBBcnJheS5mcm9tKG4pfXJldHVybiBsKG4pfWZ1bmN0aW9uIEYoKXtmdW5jdGlvbiB0KG4scil7dmFyIHQ9c1tuXTtyZXR1cm4gdD90LmVudW1lcmFibGU9cjpzW25dPXQ9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOnIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHI9dGhpc1tRXTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHIpLGVuLmdldChyLG4pfSxzZXQ6ZnVuY3Rpb24ocil7dmFyIHQ9dGhpc1tRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHQpLGVuLnNldCh0LG4scil9fSx0fWZ1bmN0aW9uIGUobil7Zm9yKHZhciByPW4ubGVuZ3RoLTE7cj49MDtyLS0pe3ZhciB0PW5bcl1bUV07aWYoIXQuUClzd2l0Y2godC5pKXtjYXNlIDU6YSh0KSYmayh0KTticmVhaztjYXNlIDQ6byh0KSYmayh0KX19fWZ1bmN0aW9uIG8obil7Zm9yKHZhciByPW4udCx0PW4uayxlPW5uKHQpLGk9ZS5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIG89ZVtpXTtpZihvIT09USl7dmFyIGE9cltvXTtpZih2b2lkIDA9PT1hJiYhdShyLG8pKXJldHVybiEwO3ZhciBmPXRbb10scz1mJiZmW1FdO2lmKHM/cy50IT09YTohYyhmLGEpKXJldHVybiEwfX12YXIgdj0hIXJbUV07cmV0dXJuIGUubGVuZ3RoIT09bm4ocikubGVuZ3RoKyh2PzA6MSl9ZnVuY3Rpb24gYShuKXt2YXIgcj1uLms7aWYoci5sZW5ndGghPT1uLnQubGVuZ3RoKXJldHVybiEwO3ZhciB0PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixyLmxlbmd0aC0xKTtpZih0JiYhdC5nZXQpcmV0dXJuITA7Zm9yKHZhciBlPTA7ZTxyLmxlbmd0aDtlKyspaWYoIXIuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gZihyKXtyLmcmJm4oMyxKU09OLnN0cmluZ2lmeShwKHIpKSl9dmFyIHM9e307bShcIkVTNVwiLHtKOmZ1bmN0aW9uKG4scil7dmFyIGU9QXJyYXkuaXNBcnJheShuKSxpPWZ1bmN0aW9uKG4scil7aWYobil7Zm9yKHZhciBlPUFycmF5KHIubGVuZ3RoKSxpPTA7aTxyLmxlbmd0aDtpKyspT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJcIitpLHQoaSwhMCkpO3JldHVybiBlfXZhciBvPXJuKHIpO2RlbGV0ZSBvW1FdO2Zvcih2YXIgdT1ubihvKSxhPTA7YTx1Lmxlbmd0aDthKyspe3ZhciBmPXVbYV07b1tmXT10KGYsbnx8ISFvW2ZdLmVudW1lcmFibGUpfXJldHVybiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihyKSxvKX0oZSxuKSxvPXtpOmU/NTo0LEE6cj9yLkE6XygpLFA6ITEsSTohMSxSOnt9LGw6cix0Om4sazppLG86bnVsbCxnOiExLEM6ITF9O3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoaSxRLHt2YWx1ZTpvLHdyaXRhYmxlOiEwfSksaX0sUzpmdW5jdGlvbihuLHQsbyl7bz9yKHQpJiZ0W1FdLkE9PT1uJiZlKG4ucCk6KG4udSYmZnVuY3Rpb24gbihyKXtpZihyJiZcIm9iamVjdFwiPT10eXBlb2Ygcil7dmFyIHQ9cltRXTtpZih0KXt2YXIgZT10LnQsbz10LmssZj10LlIsYz10Lmk7aWYoND09PWMpaShvLChmdW5jdGlvbihyKXtyIT09USYmKHZvaWQgMCE9PWVbcl18fHUoZSxyKT9mW3JdfHxuKG9bcl0pOihmW3JdPSEwLGsodCkpKX0pKSxpKGUsKGZ1bmN0aW9uKG4pe3ZvaWQgMCE9PW9bbl18fHUobyxuKXx8KGZbbl09ITEsayh0KSl9KSk7ZWxzZSBpZig1PT09Yyl7aWYoYSh0KSYmKGsodCksZi5sZW5ndGg9ITApLG8ubGVuZ3RoPGUubGVuZ3RoKWZvcih2YXIgcz1vLmxlbmd0aDtzPGUubGVuZ3RoO3MrKylmW3NdPSExO2Vsc2UgZm9yKHZhciB2PWUubGVuZ3RoO3Y8by5sZW5ndGg7disrKWZbdl09ITA7Zm9yKHZhciBwPU1hdGgubWluKG8ubGVuZ3RoLGUubGVuZ3RoKSxsPTA7bDxwO2wrKylvLmhhc093blByb3BlcnR5KGwpfHwoZltsXT0hMCksdm9pZCAwPT09ZltsXSYmbihvW2xdKX19fX0obi5wWzBdKSxlKG4ucCkpfSxLOmZ1bmN0aW9uKG4pe3JldHVybiA0PT09bi5pP28obik6YShuKX19KX1mdW5jdGlvbiBUKCl7ZnVuY3Rpb24gZShuKXtpZighdChuKSlyZXR1cm4gbjtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBuLm1hcChlKTtpZihzKG4pKXJldHVybiBuZXcgTWFwKEFycmF5LmZyb20obi5lbnRyaWVzKCkpLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuW25bMF0sZShuWzFdKV19KSkpO2lmKHYobikpcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbShuKS5tYXAoZSkpO3ZhciByPU9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pKTtmb3IodmFyIGkgaW4gbilyW2ldPWUobltpXSk7cmV0dXJuIHUobixMKSYmKHJbTF09bltMXSkscn1mdW5jdGlvbiBmKG4pe3JldHVybiByKG4pP2Uobik6bn12YXIgYz1cImFkZFwiO20oXCJQYXRjaGVzXCIseyQ6ZnVuY3Rpb24ocix0KXtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtmb3IodmFyIGk9dC5wYXRoLHU9dC5vcCxmPXIscz0wO3M8aS5sZW5ndGgtMTtzKyspe3ZhciB2PW8oZikscD1pW3NdO1wic3RyaW5nXCIhPXR5cGVvZiBwJiZcIm51bWJlclwiIT10eXBlb2YgcCYmKHA9XCJcIitwKSwwIT09diYmMSE9PXZ8fFwiX19wcm90b19fXCIhPT1wJiZcImNvbnN0cnVjdG9yXCIhPT1wfHxuKDI0KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBmJiZcInByb3RvdHlwZVwiPT09cCYmbigyNCksXCJvYmplY3RcIiE9dHlwZW9mKGY9YShmLHApKSYmbigxNSxpLmpvaW4oXCIvXCIpKX12YXIgbD1vKGYpLGQ9ZSh0LnZhbHVlKSxoPWlbaS5sZW5ndGgtMV07c3dpdGNoKHUpe2Nhc2VcInJlcGxhY2VcIjpzd2l0Y2gobCl7Y2FzZSAyOnJldHVybiBmLnNldChoLGQpO2Nhc2UgMzpuKDE2KTtkZWZhdWx0OnJldHVybiBmW2hdPWR9Y2FzZSBjOnN3aXRjaChsKXtjYXNlIDE6cmV0dXJuXCItXCI9PT1oP2YucHVzaChkKTpmLnNwbGljZShoLDAsZCk7Y2FzZSAyOnJldHVybiBmLnNldChoLGQpO2Nhc2UgMzpyZXR1cm4gZi5hZGQoZCk7ZGVmYXVsdDpyZXR1cm4gZltoXT1kfWNhc2VcInJlbW92ZVwiOnN3aXRjaChsKXtjYXNlIDE6cmV0dXJuIGYuc3BsaWNlKGgsMSk7Y2FzZSAyOnJldHVybiBmLmRlbGV0ZShoKTtjYXNlIDM6cmV0dXJuIGYuZGVsZXRlKHQudmFsdWUpO2RlZmF1bHQ6cmV0dXJuIGRlbGV0ZSBmW2hdfWRlZmF1bHQ6bigxNyx1KX19KSkscn0sTjpmdW5jdGlvbihuLHIsdCxlKXtzd2l0Y2gobi5pKXtjYXNlIDA6Y2FzZSA0OmNhc2UgMjpyZXR1cm4gZnVuY3Rpb24obixyLHQsZSl7dmFyIG89bi50LHM9bi5vO2kobi5SLChmdW5jdGlvbihuLGkpe3ZhciB2PWEobyxuKSxwPWEocyxuKSxsPWk/dShvLG4pP1wicmVwbGFjZVwiOmM6XCJyZW1vdmVcIjtpZih2IT09cHx8XCJyZXBsYWNlXCIhPT1sKXt2YXIgZD1yLmNvbmNhdChuKTt0LnB1c2goXCJyZW1vdmVcIj09PWw/e29wOmwscGF0aDpkfTp7b3A6bCxwYXRoOmQsdmFsdWU6cH0pLGUucHVzaChsPT09Yz97b3A6XCJyZW1vdmVcIixwYXRoOmR9OlwicmVtb3ZlXCI9PT1sP3tvcDpjLHBhdGg6ZCx2YWx1ZTpmKHYpfTp7b3A6XCJyZXBsYWNlXCIscGF0aDpkLHZhbHVlOmYodil9KX19KSl9KG4scix0LGUpO2Nhc2UgNTpjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKG4scix0LGUpe3ZhciBpPW4udCxvPW4uUix1PW4ubztpZih1Lmxlbmd0aDxpLmxlbmd0aCl7dmFyIGE9W3UsaV07aT1hWzBdLHU9YVsxXTt2YXIgcz1bZSx0XTt0PXNbMF0sZT1zWzFdfWZvcih2YXIgdj0wO3Y8aS5sZW5ndGg7disrKWlmKG9bdl0mJnVbdl0hPT1pW3ZdKXt2YXIgcD1yLmNvbmNhdChbdl0pO3QucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpwLHZhbHVlOmYodVt2XSl9KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTpmKGlbdl0pfSl9Zm9yKHZhciBsPWkubGVuZ3RoO2w8dS5sZW5ndGg7bCsrKXt2YXIgZD1yLmNvbmNhdChbbF0pO3QucHVzaCh7b3A6YyxwYXRoOmQsdmFsdWU6Zih1W2xdKX0pfWkubGVuZ3RoPHUubGVuZ3RoJiZlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6ci5jb25jYXQoW1wibGVuZ3RoXCJdKSx2YWx1ZTppLmxlbmd0aH0pfShuLHIsdCxlKTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKG4scix0LGUpe3ZhciBpPW4udCxvPW4ubyx1PTA7aS5mb3JFYWNoKChmdW5jdGlvbihuKXtpZighby5oYXMobikpe3ZhciBpPXIuY29uY2F0KFt1XSk7dC5wdXNoKHtvcDpcInJlbW92ZVwiLHBhdGg6aSx2YWx1ZTpufSksZS51bnNoaWZ0KHtvcDpjLHBhdGg6aSx2YWx1ZTpufSl9dSsrfSkpLHU9MCxvLmZvckVhY2goKGZ1bmN0aW9uKG4pe2lmKCFpLmhhcyhuKSl7dmFyIG89ci5jb25jYXQoW3VdKTt0LnB1c2goe29wOmMscGF0aDpvLHZhbHVlOm59KSxlLnVuc2hpZnQoe29wOlwicmVtb3ZlXCIscGF0aDpvLHZhbHVlOm59KX11Kyt9KSl9KG4scix0LGUpfX0sTTpmdW5jdGlvbihuLHIsdCxlKXt0LnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6cj09PUg/dm9pZCAwOnJ9KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6bn0pfX0pfWZ1bmN0aW9uIEMoKXtmdW5jdGlvbiByKG4scil7ZnVuY3Rpb24gdCgpe3RoaXMuY29uc3RydWN0b3I9bn1hKG4sciksbi5wcm90b3R5cGU9KHQucHJvdG90eXBlPXIucHJvdG90eXBlLG5ldyB0KX1mdW5jdGlvbiBlKG4pe24ub3x8KG4uUj1uZXcgTWFwLG4ubz1uZXcgTWFwKG4udCkpfWZ1bmN0aW9uIG8obil7bi5vfHwobi5vPW5ldyBTZXQsbi50LmZvckVhY2goKGZ1bmN0aW9uKHIpe2lmKHQocikpe3ZhciBlPU4obi5BLmgscixuKTtuLnAuc2V0KHIsZSksbi5vLmFkZChlKX1lbHNlIG4uby5hZGQocil9KSkpfWZ1bmN0aW9uIHUocil7ci5nJiZuKDMsSlNPTi5zdHJpbmdpZnkocChyKSkpfXZhciBhPWZ1bmN0aW9uKG4scil7cmV0dXJuKGE9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKG4scil7bi5fX3Byb3RvX189cn18fGZ1bmN0aW9uKG4scil7Zm9yKHZhciB0IGluIHIpci5oYXNPd25Qcm9wZXJ0eSh0KSYmKG5bdF09clt0XSl9KShuLHIpfSxmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHIpe3JldHVybiB0aGlzW1FdPXtpOjIsbDpyLEE6cj9yLkE6XygpLFA6ITEsSTohMSxvOnZvaWQgMCxSOnZvaWQgMCx0Om4sazp0aGlzLEM6ITEsZzohMX0sdGhpc31yKG4sTWFwKTt2YXIgbz1uLnByb3RvdHlwZTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLnNpemV9fSksby5oYXM9ZnVuY3Rpb24obil7cmV0dXJuIHAodGhpc1tRXSkuaGFzKG4pfSxvLnNldD1mdW5jdGlvbihuLHIpe3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCkscCh0KS5oYXMobikmJnAodCkuZ2V0KG4pPT09cnx8KGUodCksayh0KSx0LlIuc2V0KG4sITApLHQuby5zZXQobixyKSx0LlIuc2V0KG4sITApKSx0aGlzfSxvLmRlbGV0ZT1mdW5jdGlvbihuKXtpZighdGhpcy5oYXMobikpcmV0dXJuITE7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxlKHIpLGsociksci50LmhhcyhuKT9yLlIuc2V0KG4sITEpOnIuUi5kZWxldGUobiksci5vLmRlbGV0ZShuKSwhMH0sby5jbGVhcj1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07dShuKSxwKG4pLnNpemUmJihlKG4pLGsobiksbi5SPW5ldyBNYXAsaShuLnQsKGZ1bmN0aW9uKHIpe24uUi5zZXQociwhMSl9KSksbi5vLmNsZWFyKCkpfSxvLmZvckVhY2g9ZnVuY3Rpb24obixyKXt2YXIgdD10aGlzO3AodGhpc1tRXSkuZm9yRWFjaCgoZnVuY3Rpb24oZSxpKXtuLmNhbGwocix0LmdldChpKSxpLHQpfSkpfSxvLmdldD1mdW5jdGlvbihuKXt2YXIgcj10aGlzW1FdO3Uocik7dmFyIGk9cChyKS5nZXQobik7aWYoci5JfHwhdChpKSlyZXR1cm4gaTtpZihpIT09ci50LmdldChuKSlyZXR1cm4gaTt2YXIgbz1OKHIuQS5oLGkscik7cmV0dXJuIGUociksci5vLnNldChuLG8pLG99LG8ua2V5cz1mdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLmtleXMoKX0sby52YWx1ZXM9ZnVuY3Rpb24oKXt2YXIgbixyPXRoaXMsdD10aGlzLmtleXMoKTtyZXR1cm4obj17fSlbVl09ZnVuY3Rpb24oKXtyZXR1cm4gci52YWx1ZXMoKX0sbi5uZXh0PWZ1bmN0aW9uKCl7dmFyIG49dC5uZXh0KCk7cmV0dXJuIG4uZG9uZT9uOntkb25lOiExLHZhbHVlOnIuZ2V0KG4udmFsdWUpfX0sbn0sby5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIG4scj10aGlzLHQ9dGhpcy5rZXlzKCk7cmV0dXJuKG49e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHIuZW50cmllcygpfSxuLm5leHQ9ZnVuY3Rpb24oKXt2YXIgbj10Lm5leHQoKTtpZihuLmRvbmUpcmV0dXJuIG47dmFyIGU9ci5nZXQobi52YWx1ZSk7cmV0dXJue2RvbmU6ITEsdmFsdWU6W24udmFsdWUsZV19fSxufSxvW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW50cmllcygpfSxufSgpLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKG4scil7cmV0dXJuIHRoaXNbUV09e2k6MyxsOnIsQTpyP3IuQTpfKCksUDohMSxJOiExLG86dm9pZCAwLHQ6bixrOnRoaXMscDpuZXcgTWFwLGc6ITEsQzohMX0sdGhpc31yKG4sU2V0KTt2YXIgdD1uLnByb3RvdHlwZTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLnNpemV9fSksdC5oYXM9ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxyLm8/ISFyLm8uaGFzKG4pfHwhKCFyLnAuaGFzKG4pfHwhci5vLmhhcyhyLnAuZ2V0KG4pKSk6ci50LmhhcyhuKX0sdC5hZGQ9ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSx0aGlzLmhhcyhuKXx8KG8ociksayhyKSxyLm8uYWRkKG4pKSx0aGlzfSx0LmRlbGV0ZT1mdW5jdGlvbihuKXtpZighdGhpcy5oYXMobikpcmV0dXJuITE7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxvKHIpLGsociksci5vLmRlbGV0ZShuKXx8ISFyLnAuaGFzKG4pJiZyLm8uZGVsZXRlKHIucC5nZXQobikpfSx0LmNsZWFyPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTt1KG4pLHAobikuc2l6ZSYmKG8obiksayhuKSxuLm8uY2xlYXIoKSl9LHQudmFsdWVzPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxvKG4pLG4uby52YWx1ZXMoKX0sdC5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxvKG4pLG4uby5lbnRyaWVzKCl9LHQua2V5cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSx0W1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWVzKCl9LHQuZm9yRWFjaD1mdW5jdGlvbihuLHIpe2Zvcih2YXIgdD10aGlzLnZhbHVlcygpLGU9dC5uZXh0KCk7IWUuZG9uZTspbi5jYWxsKHIsZS52YWx1ZSxlLnZhbHVlLHRoaXMpLGU9dC5uZXh0KCl9LG59KCk7bShcIk1hcFNldFwiLHtGOmZ1bmN0aW9uKG4scil7cmV0dXJuIG5ldyBmKG4scil9LFQ6ZnVuY3Rpb24obixyKXtyZXR1cm4gbmV3IGMobixyKX19KX1mdW5jdGlvbiBKKCl7RigpLEMoKSxUKCl9ZnVuY3Rpb24gSyhuKXtyZXR1cm4gbn1mdW5jdGlvbiAkKG4pe3JldHVybiBufXZhciBHLFUsVz1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sKFwieFwiKSxYPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBNYXAscT1cInVuZGVmaW5lZFwiIT10eXBlb2YgU2V0LEI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb3h5JiZ2b2lkIDAhPT1Qcm94eS5yZXZvY2FibGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0LEg9Vz9TeW1ib2wuZm9yKFwiaW1tZXItbm90aGluZ1wiKTooKEc9e30pW1wiaW1tZXItbm90aGluZ1wiXT0hMCxHKSxMPVc/U3ltYm9sLmZvcihcImltbWVyLWRyYWZ0YWJsZVwiKTpcIl9fJGltbWVyX2RyYWZ0YWJsZVwiLFE9Vz9TeW1ib2wuZm9yKFwiaW1tZXItc3RhdGVcIik6XCJfXyRpbW1lcl9zdGF0ZVwiLFY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yfHxcIkBAaXRlcmF0b3JcIixZPXswOlwiSWxsZWdhbCBzdGF0ZVwiLDE6XCJJbW1lciBkcmFmdHMgY2Fubm90IGhhdmUgY29tcHV0ZWQgcHJvcGVydGllc1wiLDI6XCJUaGlzIG9iamVjdCBoYXMgYmVlbiBmcm96ZW4gYW5kIHNob3VsZCBub3QgYmUgbXV0YXRlZFwiLDM6ZnVuY3Rpb24obil7cmV0dXJuXCJDYW5ub3QgdXNlIGEgcHJveHkgdGhhdCBoYXMgYmVlbiByZXZva2VkLiBEaWQgeW91IHBhc3MgYW4gb2JqZWN0IGZyb20gaW5zaWRlIGFuIGltbWVyIGZ1bmN0aW9uIHRvIGFuIGFzeW5jIHByb2Nlc3M/IFwiK259LDQ6XCJBbiBpbW1lciBwcm9kdWNlciByZXR1cm5lZCBhIG5ldyB2YWx1ZSAqYW5kKiBtb2RpZmllZCBpdHMgZHJhZnQuIEVpdGhlciByZXR1cm4gYSBuZXcgdmFsdWUgKm9yKiBtb2RpZnkgdGhlIGRyYWZ0LlwiLDU6XCJJbW1lciBmb3JiaWRzIGNpcmN1bGFyIHJlZmVyZW5jZXNcIiw2OlwiVGhlIGZpcnN0IG9yIHNlY29uZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uXCIsNzpcIlRoZSB0aGlyZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIHVuZGVmaW5lZFwiLDg6XCJGaXJzdCBhcmd1bWVudCB0byBgY3JlYXRlRHJhZnRgIG11c3QgYmUgYSBwbGFpbiBvYmplY3QsIGFuIGFycmF5LCBvciBhbiBpbW1lcmFibGUgb2JqZWN0XCIsOTpcIkZpcnN0IGFyZ3VtZW50IHRvIGBmaW5pc2hEcmFmdGAgbXVzdCBiZSBhIGRyYWZ0IHJldHVybmVkIGJ5IGBjcmVhdGVEcmFmdGBcIiwxMDpcIlRoZSBnaXZlbiBkcmFmdCBpcyBhbHJlYWR5IGZpbmFsaXplZFwiLDExOlwiT2JqZWN0LmRlZmluZVByb3BlcnR5KCkgY2Fubm90IGJlIHVzZWQgb24gYW4gSW1tZXIgZHJhZnRcIiwxMjpcIk9iamVjdC5zZXRQcm90b3R5cGVPZigpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTM6XCJJbW1lciBvbmx5IHN1cHBvcnRzIGRlbGV0aW5nIGFycmF5IGluZGljZXNcIiwxNDpcIkltbWVyIG9ubHkgc3VwcG9ydHMgc2V0dGluZyBhcnJheSBpbmRpY2VzIGFuZCB0aGUgJ2xlbmd0aCcgcHJvcGVydHlcIiwxNTpmdW5jdGlvbihuKXtyZXR1cm5cIkNhbm5vdCBhcHBseSBwYXRjaCwgcGF0aCBkb2Vzbid0IHJlc29sdmU6IFwiK259LDE2OidTZXRzIGNhbm5vdCBoYXZlIFwicmVwbGFjZVwiIHBhdGNoZXMuJywxNzpmdW5jdGlvbihuKXtyZXR1cm5cIlVuc3VwcG9ydGVkIHBhdGNoIG9wZXJhdGlvbjogXCIrbn0sMTg6ZnVuY3Rpb24obil7cmV0dXJuXCJUaGUgcGx1Z2luIGZvciAnXCIrbitcIicgaGFzIG5vdCBiZWVuIGxvYWRlZCBpbnRvIEltbWVyLiBUbyBlbmFibGUgdGhlIHBsdWdpbiwgaW1wb3J0IGFuZCBjYWxsIGBlbmFibGVcIituK1wiKClgIHdoZW4gaW5pdGlhbGl6aW5nIHlvdXIgYXBwbGljYXRpb24uXCJ9LDIwOlwiQ2Fubm90IHVzZSBwcm94aWVzIGlmIFByb3h5LCBQcm94eS5yZXZvY2FibGUgb3IgUmVmbGVjdCBhcmUgbm90IGF2YWlsYWJsZVwiLDIxOmZ1bmN0aW9uKG4pe3JldHVyblwicHJvZHVjZSBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhpbmdzIHRoYXQgYXJlIGRyYWZ0YWJsZTogcGxhaW4gb2JqZWN0cywgYXJyYXlzLCBNYXAsIFNldCBvciBjbGFzc2VzIHRoYXQgYXJlIG1hcmtlZCB3aXRoICdbaW1tZXJhYmxlXTogdHJ1ZScuIEdvdCAnXCIrbitcIidcIn0sMjI6ZnVuY3Rpb24obil7cmV0dXJuXCInY3VycmVudCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK259LDIzOmZ1bmN0aW9uKG4pe3JldHVyblwiJ29yaWdpbmFsJyBleHBlY3RzIGEgZHJhZnQsIGdvdDogXCIrbn0sMjQ6XCJQYXRjaGluZyByZXNlcnZlZCBhdHRyaWJ1dGVzIGxpa2UgX19wcm90b19fLCBwcm90b3R5cGUgYW5kIGNvbnN0cnVjdG9yIGlzIG5vdCBhbGxvd2VkXCJ9LFo9XCJcIitPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLG5uPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0Lm93bktleXM/UmVmbGVjdC5vd25LZXlzOnZvaWQgMCE9PU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/ZnVuY3Rpb24obil7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG4pLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG4pKX06T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMscm49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnN8fGZ1bmN0aW9uKG4pe3ZhciByPXt9O3JldHVybiBubihuKS5mb3JFYWNoKChmdW5jdGlvbih0KXtyW3RdPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iobix0KX0pKSxyfSx0bj17fSxlbj17Z2V0OmZ1bmN0aW9uKG4scil7aWYocj09PVEpcmV0dXJuIG47dmFyIGU9cChuKTtpZighdShlLHIpKXJldHVybiBmdW5jdGlvbihuLHIsdCl7dmFyIGUsaT1JKHIsdCk7cmV0dXJuIGk/XCJ2YWx1ZVwiaW4gaT9pLnZhbHVlOm51bGw9PT0oZT1pLmdldCl8fHZvaWQgMD09PWU/dm9pZCAwOmUuY2FsbChuLmspOnZvaWQgMH0obixlLHIpO3ZhciBpPWVbcl07cmV0dXJuIG4uSXx8IXQoaSk/aTppPT09eihuLnQscik/KEUobiksbi5vW3JdPU4obi5BLmgsaSxuKSk6aX0saGFzOmZ1bmN0aW9uKG4scil7cmV0dXJuIHIgaW4gcChuKX0sb3duS2V5czpmdW5jdGlvbihuKXtyZXR1cm4gUmVmbGVjdC5vd25LZXlzKHAobikpfSxzZXQ6ZnVuY3Rpb24obixyLHQpe3ZhciBlPUkocChuKSxyKTtpZihudWxsPT1lP3ZvaWQgMDplLnNldClyZXR1cm4gZS5zZXQuY2FsbChuLmssdCksITA7aWYoIW4uUCl7dmFyIGk9eihwKG4pLHIpLG89bnVsbD09aT92b2lkIDA6aVtRXTtpZihvJiZvLnQ9PT10KXJldHVybiBuLm9bcl09dCxuLlJbcl09ITEsITA7aWYoYyh0LGkpJiYodm9pZCAwIT09dHx8dShuLnQscikpKXJldHVybiEwO0UobiksayhuKX1yZXR1cm4gbi5vW3JdPT09dCYmKHZvaWQgMCE9PXR8fHIgaW4gbi5vKXx8TnVtYmVyLmlzTmFOKHQpJiZOdW1iZXIuaXNOYU4obi5vW3JdKXx8KG4ub1tyXT10LG4uUltyXT0hMCksITB9LGRlbGV0ZVByb3BlcnR5OmZ1bmN0aW9uKG4scil7cmV0dXJuIHZvaWQgMCE9PXoobi50LHIpfHxyIGluIG4udD8obi5SW3JdPSExLEUobiksayhuKSk6ZGVsZXRlIG4uUltyXSxuLm8mJmRlbGV0ZSBuLm9bcl0sITB9LGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpmdW5jdGlvbihuLHIpe3ZhciB0PXAobiksZT1SZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LHIpO3JldHVybiBlP3t3cml0YWJsZTohMCxjb25maWd1cmFibGU6MSE9PW4uaXx8XCJsZW5ndGhcIiE9PXIsZW51bWVyYWJsZTplLmVudW1lcmFibGUsdmFsdWU6dFtyXX06ZX0sZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oKXtuKDExKX0sZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24obil7cmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuLnQpfSxzZXRQcm90b3R5cGVPZjpmdW5jdGlvbigpe24oMTIpfX0sb249e307aShlbiwoZnVuY3Rpb24obixyKXtvbltuXT1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF09YXJndW1lbnRzWzBdWzBdLHIuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0pKSxvbi5kZWxldGVQcm9wZXJ0eT1mdW5jdGlvbihyLHQpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmlzTmFOKHBhcnNlSW50KHQpKSYmbigxMyksb24uc2V0LmNhbGwodGhpcyxyLHQsdm9pZCAwKX0sb24uc2V0PWZ1bmN0aW9uKHIsdCxlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcImxlbmd0aFwiIT09dCYmaXNOYU4ocGFyc2VJbnQodCkpJiZuKDE0KSxlbi5zZXQuY2FsbCh0aGlzLHJbMF0sdCxlLHJbMF0pfTt2YXIgdW49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHIpe3ZhciBlPXRoaXM7dGhpcy5PPUIsdGhpcy5EPSEwLHRoaXMucHJvZHVjZT1mdW5jdGlvbihyLGksbyl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgciYmXCJmdW5jdGlvblwiIT10eXBlb2YgaSl7dmFyIHU9aTtpPXI7dmFyIGE9ZTtyZXR1cm4gZnVuY3Rpb24obil7dmFyIHI9dGhpczt2b2lkIDA9PT1uJiYobj11KTtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxlPUFycmF5KHQ+MT90LTE6MCksbz0xO288dDtvKyspZVtvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gYS5wcm9kdWNlKG4sKGZ1bmN0aW9uKG4pe3ZhciB0O3JldHVybih0PWkpLmNhbGwuYXBwbHkodCxbcixuXS5jb25jYXQoZSkpfSkpfX12YXIgZjtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBpJiZuKDYpLHZvaWQgMCE9PW8mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG8mJm4oNyksdChyKSl7dmFyIGM9dyhlKSxzPU4oZSxyLHZvaWQgMCksdj0hMDt0cnl7Zj1pKHMpLHY9ITF9ZmluYWxseXt2P2coYyk6TyhjKX1yZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmZiBpbnN0YW5jZW9mIFByb21pc2U/Zi50aGVuKChmdW5jdGlvbihuKXtyZXR1cm4gaihjLG8pLFAobixjKX0pLChmdW5jdGlvbihuKXt0aHJvdyBnKGMpLG59KSk6KGooYyxvKSxQKGYsYykpfWlmKCFyfHxcIm9iamVjdFwiIT10eXBlb2Ygcil7aWYodm9pZCAwPT09KGY9aShyKSkmJihmPXIpLGY9PT1IJiYoZj12b2lkIDApLGUuRCYmZChmLCEwKSxvKXt2YXIgcD1bXSxsPVtdO2IoXCJQYXRjaGVzXCIpLk0ocixmLHAsbCksbyhwLGwpfXJldHVybiBmfW4oMjEscil9LHRoaXMucHJvZHVjZVdpdGhQYXRjaGVzPWZ1bmN0aW9uKG4scil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbilyZXR1cm4gZnVuY3Rpb24ocil7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsaT1BcnJheSh0PjE/dC0xOjApLG89MTtvPHQ7bysrKWlbby0xXT1hcmd1bWVudHNbb107cmV0dXJuIGUucHJvZHVjZVdpdGhQYXRjaGVzKHIsKGZ1bmN0aW9uKHIpe3JldHVybiBuLmFwcGx5KHZvaWQgMCxbcl0uY29uY2F0KGkpKX0pKX07dmFyIHQsaSxvPWUucHJvZHVjZShuLHIsKGZ1bmN0aW9uKG4scil7dD1uLGk9cn0pKTtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmbyBpbnN0YW5jZW9mIFByb21pc2U/by50aGVuKChmdW5jdGlvbihuKXtyZXR1cm5bbix0LGldfSkpOltvLHQsaV19LFwiYm9vbGVhblwiPT10eXBlb2YobnVsbD09cj92b2lkIDA6ci51c2VQcm94aWVzKSYmdGhpcy5zZXRVc2VQcm94aWVzKHIudXNlUHJveGllcyksXCJib29sZWFuXCI9PXR5cGVvZihudWxsPT1yP3ZvaWQgMDpyLmF1dG9GcmVlemUpJiZ0aGlzLnNldEF1dG9GcmVlemUoci5hdXRvRnJlZXplKX12YXIgaT1lLnByb3RvdHlwZTtyZXR1cm4gaS5jcmVhdGVEcmFmdD1mdW5jdGlvbihlKXt0KGUpfHxuKDgpLHIoZSkmJihlPVIoZSkpO3ZhciBpPXcodGhpcyksbz1OKHRoaXMsZSx2b2lkIDApO3JldHVybiBvW1FdLkM9ITAsTyhpKSxvfSxpLmZpbmlzaERyYWZ0PWZ1bmN0aW9uKHIsdCl7dmFyIGU9ciYmcltRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoZSYmZS5DfHxuKDkpLGUuSSYmbigxMCkpO3ZhciBpPWUuQTtyZXR1cm4gaihpLHQpLFAodm9pZCAwLGkpfSxpLnNldEF1dG9GcmVlemU9ZnVuY3Rpb24obil7dGhpcy5EPW59LGkuc2V0VXNlUHJveGllcz1mdW5jdGlvbihyKXtyJiYhQiYmbigyMCksdGhpcy5PPXJ9LGkuYXBwbHlQYXRjaGVzPWZ1bmN0aW9uKG4sdCl7dmFyIGU7Zm9yKGU9dC5sZW5ndGgtMTtlPj0wO2UtLSl7dmFyIGk9dFtlXTtpZigwPT09aS5wYXRoLmxlbmd0aCYmXCJyZXBsYWNlXCI9PT1pLm9wKXtuPWkudmFsdWU7YnJlYWt9fWU+LTEmJih0PXQuc2xpY2UoZSsxKSk7dmFyIG89YihcIlBhdGNoZXNcIikuJDtyZXR1cm4gcihuKT9vKG4sdCk6dGhpcy5wcm9kdWNlKG4sKGZ1bmN0aW9uKG4pe3JldHVybiBvKG4sdCl9KSl9LGV9KCksYW49bmV3IHVuLGZuPWFuLnByb2R1Y2UsY249YW4ucHJvZHVjZVdpdGhQYXRjaGVzLmJpbmQoYW4pLHNuPWFuLnNldEF1dG9GcmVlemUuYmluZChhbiksdm49YW4uc2V0VXNlUHJveGllcy5iaW5kKGFuKSxwbj1hbi5hcHBseVBhdGNoZXMuYmluZChhbiksbG49YW4uY3JlYXRlRHJhZnQuYmluZChhbiksZG49YW4uZmluaXNoRHJhZnQuYmluZChhbik7ZXhwb3J0IGRlZmF1bHQgZm47ZXhwb3J0e3VuIGFzIEltbWVyLHBuIGFzIGFwcGx5UGF0Y2hlcyxLIGFzIGNhc3REcmFmdCwkIGFzIGNhc3RJbW11dGFibGUsbG4gYXMgY3JlYXRlRHJhZnQsUiBhcyBjdXJyZW50LEogYXMgZW5hYmxlQWxsUGx1Z2lucyxGIGFzIGVuYWJsZUVTNSxDIGFzIGVuYWJsZU1hcFNldCxUIGFzIGVuYWJsZVBhdGNoZXMsZG4gYXMgZmluaXNoRHJhZnQsZCBhcyBmcmVlemUsTCBhcyBpbW1lcmFibGUsciBhcyBpc0RyYWZ0LHQgYXMgaXNEcmFmdGFibGUsSCBhcyBub3RoaW5nLGUgYXMgb3JpZ2luYWwsZm4gYXMgcHJvZHVjZSxjbiBhcyBwcm9kdWNlV2l0aFBhdGNoZXMsc24gYXMgc2V0QXV0b0ZyZWV6ZSx2biBhcyBzZXRVc2VQcm94aWVzfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltbWVyLmVzbS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/immer/dist/immer.esm.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Faritra%2FWork%2FFreelance%2F3xBuilds%2Fclubhouse-clone-react%2Fapp%2Flayout.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);